// File: ./admin.php
<?php
require_once 'session_check.php';
requireLogin(true); // Vy≈æaduje admin pr√°va
?>
<!DOCTYPE html>
<html lang="cs">
<head>
    <link rel="stylesheet" href="./css/toast.css">
    <script src="./js/toast.js"></script>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin | CineBukay</title>
    <link href="https://fonts.googleapis.com/css?family=Lato&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="./css/vestylu.css">
    <link rel="stylesheet" href="./css/admin.css">
</head>
<body>
<?php
    require_once 'session_check.php';
    $userMenu = getUserMenuHTML(); // Z√≠sk√° HTML pro menu podle stavu p≈ôihl√°≈°en√≠
    ?>

    <header class="site-header">
        <div class="logo">
            <h1>CineBukay</h1>
        </div>
        <?php echo $userMenu; ?>
    </header>
    
    <!-- Navigace odstranƒõna -->
    
    <main class="main-content full-width"> <!-- P≈ôid√°na t≈ô√≠da pro plnou ≈°√≠≈ôku, pokud sidebar zmizel -->
        <!-- Sekce Filmy -->
        <div id="movies-section" class="content-section active">
            <div class="section-header">
                <h2>Spr√°va film≈Ø</h2>
                <button class="add-btn" id="add-movie-btn">+ P≈ôidat nov√Ω film</button>
            </div>
            
            <div class="search-container">
                <div class="search-box">
                    <input type="text" class="search-input" placeholder="Hledat film...">
                    <button class="search-btn">üîç</button>
                </div>
                <select class="filter-select">
                    <option value="all">V≈°echny filmy</option>
                    <option value="active">Aktu√°ln√≠</option>
                    <option value="archive">Archiv</option>
                </select>
            </div>

            <!-- Loading stav -->
            <div id="movies-loading" class="loading-state">
                <div class="loading-spinner"></div>
                <p>Naƒç√≠t√°m filmy...</p>
            </div>
            
            <!-- Mobile zobrazen√≠ -->
            <div class="movies-cards">
                <!-- Sem budou dynamicky vlo≈æeny karty film≈Ø pro mobiln√≠ zobrazen√≠ -->
            </div>
            
            <!-- Desktop zobrazen√≠ -->
            <div class="movies-table">
                <table class="admin-table">
                    <thead>
                        <tr>
                            <th>N√°zev</th>
                            <th>≈Ω√°nr</th>
                            <th>D√©lka</th>
                            <th>Datum a ƒças prom√≠t√°n√≠</th>
                            <th>Akce</th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- Sem budou dynamicky vlo≈æeny ≈ô√°dky film≈Ø pro desktop zobrazen√≠ -->
                    </tbody>
                </table>
            </div>
            
            <div class="pagination">
                <button class="page-btn active">1</button>
                <button class="page-btn">2</button>
                <button class="next-btn">‚Üí</button>
            </div>
        </div>
        <!-- Ostatn√≠ sekce odstranƒõny -->
    </main>
    
    <!-- Modal pro p≈ôid√°n√≠/√∫pravu filmu -->
    <div class="modal" id="movie-modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">P≈ôidat nov√Ω film</h3>
                <button class="close-btn">&times;</button>
            </div>
            <div class="modal-body">
                <form id="movie-form">
                    <input type="hidden" id="movie-id">
                    
                    <div class="form-group">
                        <label class="form-label">N√°zev filmu *</label>
                        <input type="text" class="form-input" id="movie-title" required>
                    </div>
                    
                    <div class="form-row">
                        <div class="form-col">
                            <label class="form-label">D√©lka (min) *</label>
                            <input type="number" class="form-input" id="movie-duration" min="1" required>
                        </div>
                        <div class="form-col">
                            <label class="form-label">≈Ω√°nr *</label>
                            <input type="text" class="form-input" id="movie-genre" list="genres" placeholder="P≈ôidat ≈æ√°nr" required>
                            <datalist id="genres">
                                <option value="Akƒçn√≠">
                                <option value="Animovan√Ω">
                                <option value="Dobrodru≈æn√Ω">
                                <option value="Drama">
                                <option value="Fantasy">
                                <option value="Horor">
                                <option value="Komedie">
                                <option value="Thriller">
                                <option value="Sci-fi">
                                <option value="≈Ωivotopisn√Ω">
                            </datalist>
                        </div>
                    </div>
                    
                    <div class="genre-tags" id="genre-tags">
                        <!-- Tagy budou p≈ôid√°ny JavaScriptem -->
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">Obr√°zek filmu</label>
                        <div class="image-upload" id="image-upload">
                            <div class="upload-icon">üì∑</div>
                            <div>Nahr√°t obr√°zek</div>
                        </div>
                        <input type="file" id="movie-image" style="display:none" accept="image/*">
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">Datum a ƒças prom√≠t√°n√≠ *</label>
                        <input type="datetime-local" class="form-input" id="movie-datetime" required>
                    </div>
                    
                    <!-- Odstranƒõna sekce pro v√≠ce ƒças≈Ø -->
                    
                    <div class="form-group">
                        <label class="form-label">Popis filmu</label>
                        <textarea class="form-input" id="movie-description" rows="3"></textarea>
                    </div>
                    
                    <div class="form-actions">
                        <button type="button" class="cancel-btn">Zru≈°it</button>
                        <button type="submit" class="save-btn">Ulo≈æit</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
    
    <!-- Modal pro potvrzen√≠ smaz√°n√≠ -->
    <div class="modal" id="delete-modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">Smazat film</h3>
                <button class="close-btn">&times;</button>
            </div>
            <div class="modal-body">
                <p>Opravdu chcete smazat film <span id="delete-movie-name"></span>?</p>
                <div class="form-actions">
                    <button class="cancel-btn">Zru≈°it</button>
                    <button class="confirm-btn">Smazat</button>
                </div>
            </div>
        </div>
    </div>
    
    <script src="./js/admin.js"></script>
    <script src="./js/common.js"></script>
<?php
// Kontrola toast zpr√°vy ze session
$toastMessage = getToastMessage();
if ($toastMessage): 
?>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        showToast('<?php echo addslashes($toastMessage['message']); ?>', '<?php echo $toastMessage['type']; ?>');
    });
</script>
<?php endif; ?>
</body>
</html>

// File: ./api_endpoint.php
<?php
// File: api_endpoint.php
// Unified API endpoint for movie (screening) operations and potentially others later.

require_once 'db_config.php'; // Still needed for Database class auto-loading config
require_once 'src/Database.php'; // Include the new Database class
require_once 'session_check.php';

header('Content-Type: application/json');

// --- Movie (Screening) Functions ---

/**
 * Get all screenings from the database.
 * Includes image data encoded as base64.
 * @return array List of screenings or error message.
 */
function getAllMovies() {
    try {
        $pdo = Database::getConnection(); // Use Database class
        $stmt = $pdo->query("
            SELECT 
                id_screening,
                title,
                duration,
                genre,
                description,
                encode(image, 'base64') as image, -- Encode image to base64 for JSON
                screening_date,
                screening_time::varchar as screening_time -- Ensure time is string
            FROM screenings 
            ORDER BY screening_date DESC, screening_time DESC
        ");
        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
        error_log("API Error (getAllMovies): " . $e->getMessage());
        return ['status' => 'error', 'message' => 'Chyba p≈ôi naƒç√≠t√°n√≠ film≈Ø.'];
    }
}

/**
 * Add a new screening to the database.
 * @param array $data Data from the POST request. Expects 'title', 'duration', 'screening_date', 'screening_time' (JSON array), 'genre', 'description', 'image' (base64).
 * @return array Result status and message.
 */
function addMovie($data) {
    // Basic validation
    $required = ['title', 'duration', 'screening_date', 'screening_time'];
    foreach ($required as $field) {
        if (!isset($data[$field]) || empty($data[$field])) {
            return ['status' => 'error', 'message' => "Chyb√≠ povinn√© pole: $field"];
        }
    }

    try {
        $pdo = Database::getConnection(); // Use Database class
        
        $sql = "INSERT INTO screenings 
                (title, duration, genre, description, image, screening_date, screening_time) 
                VALUES 
                (:title, :duration, :genre, :description, :image, :screening_date, :screening_time)";
        
        $stmt = $pdo->prepare($sql);
        
        // Decode image from base64 if provided
        $imageData = null;
        if (!empty($data['image'])) {
            // Remove the data URI scheme prefix if present
            $base64Image = preg_replace('#^data:image/\w+;base64,#i', '', $data['image']);
            $imageData = base64_decode($base64Image);
            if ($imageData === false) {
                 return ['status' => 'error', 'message' => 'Neplatn√Ω form√°t obr√°zku (base64).'];
            }
        }

        // Decode screening times JSON and get the first one (or default)
        $screeningTimes = json_decode($data['screening_time'], true);
        if (json_last_error() !== JSON_ERROR_NONE || !is_array($screeningTimes)) {
             return ['status' => 'error', 'message' => 'Neplatn√Ω form√°t ƒças≈Ø prom√≠t√°n√≠ (JSON pole).'];
        }
        $firstTime = $screeningTimes[0] ?? '00:00:00'; // Use first time or default

        $params = [
            'title' => $data['title'],
            'duration' => intval($data['duration']),
            'genre' => $data['genre'] ?? 'Neza≈ôazeno',
            'description' => $data['description'] ?? '',
            'image' => $imageData, // PDO handles BYTEA correctly with null or binary string
            'screening_date' => $data['screening_date'],
            'title' => $data['title'],
            'duration' => intval($data['duration']),
            'genre' => $data['genre'] ?? 'Neza≈ôazeno',
            'description' => $data['description'] ?? '',
            // 'image' => $imageData, // Bind separately
            'screening_date' => $data['screening_date'],
            'screening_time' => $firstTime 
        ];

        // Bind parameters explicitly, especially LOB for image
        $stmt->bindParam(':title', $params['title']);
        $stmt->bindParam(':duration', $params['duration'], PDO::PARAM_INT);
        $stmt->bindParam(':genre', $params['genre']);
        $stmt->bindParam(':description', $params['description']);
        $stmt->bindParam(':image', $imageData, PDO::PARAM_LOB); // Specify LOB type for BYTEA
        $stmt->bindParam(':screening_date', $params['screening_date']);
        $stmt->bindParam(':screening_time', $params['screening_time']);

        $stmt->execute();
        
        return ['status' => 'success', 'message' => 'Film byl √∫spƒõ≈°nƒõ p≈ôid√°n.'];
    } catch (PDOException $e) {
        error_log("API Error (addMovie): " . $e->getMessage());
        return ['status' => 'error', 'message' => 'Chyba p≈ôi p≈ôid√°v√°n√≠ filmu: ' . $e->getMessage()];
    } catch (Exception $e) {
        error_log("API Error (addMovie - General): " . $e->getMessage());
        return ['status' => 'error', 'message' => 'Obecn√° chyba p≈ôi p≈ôid√°v√°n√≠ filmu.'];
    }
}

/**
 * Update an existing screening.
 * @param int $id Screening ID.
 * @param array $data Data from the POST request.
 * @return array Result status and message.
 */
function updateMovie($id, $data) {
     // Basic validation
    $required = ['title', 'duration', 'screening_date', 'screening_time', 'genre', 'description'];
     foreach ($required as $field) {
        if (!isset($data[$field])) { // Allow empty description/genre
            return ['status' => 'error', 'message' => "Chyb√≠ pole: $field"];
        }
    }
    
    try {
        $pdo = Database::getConnection(); // Use Database class
        
        $sql = "UPDATE screenings SET 
                title = :title,
                duration = :duration,
                genre = :genre,
                description = :description,
                screening_date = :screening_date,
                screening_time = :screening_time";
        
        $params = [
            'id' => $id,
            'title' => $data['title'],
            'duration' => intval($data['duration']),
            'genre' => $data['genre'] ?? 'Neza≈ôazeno',
            'description' => $data['description'] ?? '',
            'screening_date' => $data['screening_date'],
        ];

        // Decode screening times JSON and get the first one
        $screeningTimes = json_decode($data['screening_time'], true);
         if (json_last_error() !== JSON_ERROR_NONE || !is_array($screeningTimes)) {
             return ['status' => 'error', 'message' => 'Neplatn√Ω form√°t ƒças≈Ø prom√≠t√°n√≠ (JSON pole).'];
        }
        $params['screening_time'] = $screeningTimes[0] ?? '00:00:00';

        // Add image update only if a new image is provided
        if (!empty($data['image'])) {
            $base64Image = preg_replace('#^data:image/\w+;base64,#i', '', $data['image']);
            $imageData = base64_decode($base64Image);
             if ($imageData === false) {
                 return ['status' => 'error', 'message' => 'Neplatn√Ω form√°t obr√°zku (base64).'];
            }
            $sql .= ", image = :image";
            $params['image'] = $imageData;
        }
        
        $sql .= " WHERE id_screening = :id";
        
        $stmt = $pdo->prepare($sql);

        // Bind parameters explicitly
        $stmt->bindParam(':id', $params['id'], PDO::PARAM_INT);
        $stmt->bindParam(':title', $params['title']);
        $stmt->bindParam(':duration', $params['duration'], PDO::PARAM_INT);
        $stmt->bindParam(':genre', $params['genre']);
        $stmt->bindParam(':description', $params['description']);
        $stmt->bindParam(':screening_date', $params['screening_date']);
        $stmt->bindParam(':screening_time', $params['screening_time']);
        if (isset($params['image'])) {
            $stmt->bindParam(':image', $params['image'], PDO::PARAM_LOB); // Specify LOB type
        }
        
        $stmt->execute();
        
        // Check if any row was actually updated
        if ($stmt->rowCount() > 0) {
            return ['status' => 'success', 'message' => 'Film byl √∫spƒõ≈°nƒõ aktualizov√°n.'];
        } else {
            // It's possible the movie ID didn't exist or no data changed
            // Check if movie exists to give a better message
            $checkStmt = $pdo->prepare("SELECT COUNT(*) FROM screenings WHERE id_screening = :id");
            $checkStmt->execute(['id' => $id]);
            if ($checkStmt->fetchColumn() == 0) { // Use == instead of === for potential string '0' from fetchColumn
                 return ['status' => 'error', 'message' => 'Film s dan√Ωm ID nebyl nalezen.'];
            }
            // If it exists, maybe no data changed
            return ['status' => 'success', 'message' => 'Film aktualizov√°n (≈æ√°dn√© zmƒõny dat).'];
        }
    } catch (PDOException $e) {
        error_log("API Error (updateMovie): " . $e->getMessage());
        return ['status' => 'error', 'message' => 'Chyba p≈ôi aktualizaci filmu: ' . $e->getMessage()];
     } catch (Exception $e) {
        error_log("API Error (updateMovie - General): " . $e->getMessage());
        return ['status' => 'error', 'message' => 'Obecn√° chyba p≈ôi aktualizaci filmu.'];
    }
}

/**
 * Delete a screening.
 * @param int $id Screening ID.
 * @return array Result status and message.
 */
function deleteMovie($id) {
    try {
        $pdo = Database::getConnection();
        
        // Zaƒçneme transakci pro zachov√°n√≠ konzistence dat
        $pdo->beginTransaction();
        
        // Nejprve sma≈æeme v≈°echny souvisej√≠c√≠ rezervace
        $stmt = $pdo->prepare("DELETE FROM reservations WHERE id_screening = :id");
        $stmt->execute(['id' => $id]);
        $reservationsDeleted = $stmt->rowCount();
        
        // Pot√© sma≈æeme film
        $stmt = $pdo->prepare("DELETE FROM screenings WHERE id_screening = :id");
        $stmt->execute(['id' => $id]);
        
        if ($stmt->rowCount() > 0) {
            $pdo->commit();
            $message = 'Film byl √∫spƒõ≈°nƒõ smaz√°n.';
            if ($reservationsDeleted > 0) {
                $message .= ' Bylo tak√© smaz√°no ' . $reservationsDeleted . ' souvisej√≠c√≠ch rezervac√≠.';
            }
            return ['status' => 'success', 'message' => $message];
        } else {
            $pdo->rollBack();
            return ['status' => 'error', 'message' => 'Film s dan√Ωm ID nebyl nalezen nebo ji≈æ byl smaz√°n.'];
        }
    } catch (PDOException $e) {
        $pdo->rollBack();
        error_log("API Error (deleteMovie): " . $e->getMessage());
        return ['status' => 'error', 'message' => 'Chyba p≈ôi maz√°n√≠ filmu: ' . $e->getMessage()];
    }
}

// --- Request Handling ---

$method = $_SERVER['REQUEST_METHOD'];

if ($method === 'GET') {
    // No authentication needed for getting movies (public view)
    $response = getAllMovies();
    echo json_encode($response);
    exit;
}

if ($method === 'POST') {
    // All POST actions require admin login
    global $auth; // Make the $auth instance from session_check.php available
    $auth->requireLogin(true); // Call the method on the $auth instance
    
    $action = $_POST['action'] ?? '';
    $response = ['status' => 'error', 'message' => 'Neplatn√° akce nebo chybƒõj√≠c√≠ parametr action.'];
    
    switch ($action) {
        case 'add':
            $response = addMovie($_POST);
            break;
            
        case 'update':
            if (isset($_POST['id'])) {
                $response = updateMovie($_POST['id'], $_POST);
            } else {
                 $response = ['status' => 'error', 'message' => 'Chyb√≠ ID filmu pro aktualizaci.'];
            }
            break;
            
        case 'delete':
            if (isset($_POST['id'])) {
                $response = deleteMovie($_POST['id']);
            } else {
                 $response = ['status' => 'error', 'message' => 'Chyb√≠ ID filmu pro smaz√°n√≠.'];
            }
            break;
        
        // Add other POST actions here if needed in the future
    }
    
    echo json_encode($response);
    exit;
}

// Handle other methods if necessary (PUT, DELETE, etc.)
http_response_code(405); // Method Not Allowed
echo json_encode(['status' => 'error', 'message' => 'Metoda nen√≠ povolena.']);
exit;
?>

// File: ./auth_handlers.php
<?php
// File: auth_handlers.php
// Handles authentication related requests (login, register, logout)
// Delegates logic to the Auth class.

require_once __DIR__ . '/src/Auth.php'; // Include the Auth class
require_once __DIR__ . '/db_config.php'; // Needed for Database class auto-loading config
require_once 'session_check.php';

// Instantiate Auth class (this also starts the session)
$auth = new Auth();

// Handle AJAX POST requests
if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['action'])) {
    $action = $_POST['action'];
    $response = ['status' => 'error', 'message' => 'Neplatn√° akce.']; // Default error response

    try {
        switch ($action) {
            case 'login':
                if (isset($_POST['username']) && isset($_POST['password'])) {
                    $remember = isset($_POST['remember']) && $_POST['remember'] === 'true';
                    $response = $auth->loginUser($_POST['username'], $_POST['password'], $remember);
                } else {
                    $response = ['status' => 'error', 'message' => 'Chyb√≠ u≈æivatelsk√© jm√©no nebo heslo.'];
                }
                break;

            case 'register':
                if (isset($_POST['username']) && isset($_POST['password'])) {
                    // Basic validation could be added here (e.g., password length) before calling register
                    $response = $auth->registerUser($_POST['username'], $_POST['password']);
                } else {
                    $response = ['status' => 'error', 'message' => 'Chyb√≠ u≈æivatelsk√© jm√©no nebo heslo.'];
                }
                break;
            
            // Note: AJAX logout is less common, usually done via GET link, but handle if needed
            case 'logout':
                $auth->logoutUser();
                $response = ['status' => 'success', 'message' => 'Odhl√°≈°en√≠ probƒõhlo √∫spƒõ≈°nƒõ.'];
                break;
        }
    } catch (Exception $e) {
        // Catch potential exceptions from Auth methods (like DB connection issues)
        error_log("Auth Handler Error: " . $e->getMessage());
        $response = ['status' => 'error', 'message' => 'Do≈°lo k syst√©mov√© chybƒõ.'];
    }

    // Return JSON response
    header('Content-Type: application/json');
    echo json_encode($response);
    exit;
}

// Handle GET logout request (e.g., from a link)
if ($_SERVER['REQUEST_METHOD'] === 'GET' && isset($_GET['action']) && $_GET['action'] === 'logout') {
    $auth->logoutUser();
    // Redirect to login page after logout
    setToastMessage('√öspƒõ≈°nƒõ jste se odhl√°sili.');
    header("Location: login.php");
    exit;
}

// If no valid action is found or method is not POST/GET for logout
http_response_code(400); // Bad Request
header('Content-Type: application/json');
echo json_encode(['status' => 'error', 'message' => 'Neplatn√Ω po≈æadavek.']);
exit;

?>

// File: ./css/admin.css
/* Z√°kladn√≠ resetov√°n√≠ a nastaven√≠ */

* {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
    font-family: "Lato", sans-serif;
}

body {
    background-color: #242333;
    color: #fff;
    padding-top: 70px;
}


/* Header */

.site-header {
    background-color: #1a1a2e;
    padding: 15px;
    display: flex;
    justify-content: space-between;
    align-items: center;
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    z-index: 100;
}

.site-title {
    font-size: 18px;
    margin: 0;
}

.user-icon {
    padding: 5px 10px;
    background-color: #444451;
    border-radius: 8px;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    cursor: pointer;
    transition: background-color 0.3s ease;
    min-width: 60px;
    text-align: center;
}

.user-icon:hover {
    background-color: #555562;
}

.user-icon-symbol {
    font-size: 1.5rem;
    color: #fff;
    line-height: 1;
}

.user-name {
    font-size: 0.7rem;
    color: #ccc;
    margin-top: 4px;
    display: block;
    max-width: 80px;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}


/* Navigace pro desktop */

.sidebar {
    display: none;
}

@media (min-width: 769px) {
    .sidebar {
        display: block;
        background-color: #1a1a2e;
        padding: 15px 0;
        position: fixed;
        top: 70px;
        left: 0;
        bottom: 0;
        width: 200px;
    }
}


/* Navigace pro mobil */

.mobile-nav {
    background-color: #1a1a2e;
    padding: 10px 0;
    position: fixed;
    top: 61px;
    left: 0;
    width: 100%;
    z-index: 99;
}

@media (min-width: 769px) {
    .mobile-nav {
        display: none;
    }
}

.nav-item {
    display: block;
    padding: 12px 20px;
    color: #fff;
    text-decoration: none;
    border-left: 4px solid transparent;
}

.nav-item.active {
    background-color: rgba(255, 255, 255, 0.1);
    border-left-color: #0cb800;
}


/* Hlavn√≠ obsah */

h2 {
    margin-bottom: 20px;
    font-size: 24px;
}

.add-btn {
    display: block;
    background-color: #0cb800;
    color: white;
    border: none;
    border-radius: 5px;
    padding: 12px;
    width: 100%;
    text-align: center;
    font-size: 16px;
    margin-bottom: 20px;
    cursor: pointer;
}


/* Vyhled√°v√°n√≠ a filtrov√°n√≠ */

.search-container {
    margin-bottom: 20px;
}

.search-box {
    display: flex;
    margin-bottom: 10px;
}

.search-input {
    flex: 1;
    padding: 12px;
    background-color: rgba(255, 255, 255, 0.1);
    border: none;
    border-radius: 5px 0 0 5px;
    color: #fff;
    font-size: 16px;
}

.search-btn {
    background-color: #0cb800;
    border: none;
    color: white;
    padding: 0 15px;
    border-radius: 0 5px 5px 0;
    cursor: pointer;
}

.filter-select {
    width: 100%;
    padding: 12px;
    background-color: rgba(255, 255, 255, 0.1);
    border: none;
    border-radius: 5px;
    color: #fff;
    font-size: 16px;
    -webkit-appearance: none;
    appearance: none;
    background-image: url("data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='white'%3e%3cpath d='M7 10l5 5 5-5z'/%3e%3c/svg%3e");
    background-repeat: no-repeat;
    background-position: right 15px center;
    background-size: 20px;
}

@media (min-width: 769px) {
    .search-container {
        display: flex;
        gap: 15px;
    }
    .search-box {
        flex: 2;
        margin-bottom: 0;
    }
    .filter-select {
        flex: 1;
    }
    .add-btn {
        width: auto;
        float: right;
        padding: 10px 15px;
        margin-top: -45px;
    }
}


/* Karty film≈Ø - pro mobiln√≠ zobrazen√≠ */

.movies-list {
    margin-bottom: 20px;
}

.movie-card {
    background-color: rgba(0, 0, 0, 0.3);
    border-radius: 8px;
    overflow: hidden;
    margin-bottom: 15px;
}

.movie-header {
    display: flex;
    padding: 15px;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
}

.movie-image {
    width: 60px;
    height: 90px;
    border-radius: 4px;
    margin-right: 15px;
    object-fit: cover;
}

.movie-title {
    font-size: 18px;
    font-weight: bold;
    margin-bottom: 5px;
}

.movie-meta {
    color: #ccc;
    font-size: 14px;
}

.movie-details {
    padding: 15px;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
}

.movie-dates {
    background: rgba(255, 255, 255, 0.05);
    padding: 8px 12px;
    border-radius: 4px;
    margin-bottom: 10px;
    font-size: 14px;
}

.date-label,
.time-label {
    color: #aaa;
    margin-right: 8px;
}

.movie-actions {
    display: flex;
    padding: 10px;
}

.action-btn {
    flex: 1;
    margin: 0 5px;
    padding: 10px 0;
    border: none;
    border-radius: 4px;
    font-size: 16px;
    font-weight: bold;
    cursor: pointer;
}

.edit-btn {
    background-color: #2196F3;
    color: white;
}

.delete-btn {
    background-color: #f44336;
    color: white;
}


/* Tabulka pro desktop */

.movies-table {
    display: none;
}

@media (min-width: 769px) {
    .movies-cards {
        display: none;
    }
    .movies-table {
        display: block;
        overflow-x: auto;
    }
    .admin-table {
        width: 100%;
        border-collapse: collapse;
        background-color: rgba(0, 0, 0, 0.2);
    }
    .admin-table th,
    .admin-table td {
        padding: 12px 15px;
        text-align: left;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    }
    .admin-table th {
        background-color: rgba(0, 0, 0, 0.3);
        color: #ddd;
        font-weight: 600;
        font-size: 0.9rem;
    }
    .movie-name-with-image {
        display: flex;
        align-items: center;
        gap: 10px;
    }
    .movie-name-with-image img {
        width: 40px;
        height: 60px;
        object-fit: cover;
        border-radius: 4px;
    }
    .action-buttons {
        display: flex;
        gap: 8px;
    }
    .action-buttons button {
        padding: 8px 12px;
        border: none;
        border-radius: 4px;
        font-size: 0.9rem;
        cursor: pointer;
    }
}


/* Archivovan√© filmy */

.movie-card.archived {
    opacity: 0.7;
}

.archive-badge {
    display: inline-block;
    background-color: #666;
    color: white;
    font-size: 12px;
    padding: 2px 8px;
    border-radius: 10px;
    margin-left: 10px;
}

.archived-row {
    opacity: 0.7;
}


/* Paginace */

.pagination {
    display: flex;
    justify-content: center;
    align-items: center;
    margin-top: 20px;
    gap: 8px;
}

.page-btn {
    width: 40px;
    height: 40px;
    display: flex;
    justify-content: center;
    align-items: center;
    background-color: rgba(255, 255, 255, 0.1);
    border: none;
    color: #fff;
    border-radius: 5px;
    font-size: 16px;
    cursor: pointer;
}

.page-btn.active {
    background-color: #0cb800;
}

.next-btn {
    width: 40px;
    height: 40px;
    display: flex;
    justify-content: center;
    align-items: center;
    background-color: rgba(255, 255, 255, 0.1);
    border: none;
    color: #fff;
    border-radius: 5px;
    font-size: 24px;
    cursor: pointer;
}


/* Mod√°ln√≠ okno */

.modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(0, 0, 0, 0.9);
    z-index: 999;
    overflow-y: auto;
}

.modal.active {
    display: block;
}

.modal-content {
    background-color: #333;
    border-radius: 8px;
    width: calc(100% - 30px);
    margin: 70px auto 20px;
    max-width: 500px;
}

.modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 15px;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
}

.modal-title {
    font-size: 20px;
    margin: 0;
}

.close-btn {
    background: none;
    border: none;
    color: #ccc;
    font-size: 24px;
    cursor: pointer;
}

.modal-body {
    padding: 15px;
}


/* Formul√°≈ô */

.form-group {
    margin-bottom: 20px;
}

.form-label {
    display: block;
    margin-bottom: 8px;
    color: #ccc;
}

.form-input {
    width: 100%;
    padding: 12px;
    background-color: rgba(255, 255, 255, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: 5px;
    color: #fff;
    font-size: 16px;
}

.form-row {
    display: flex;
    gap: 10px;
    margin-bottom: 20px;
}

.form-col {
    flex: 1;
}

@media (max-width: 768px) {
    .form-row {
        flex-direction: column;
    }
}

.image-upload {
    width: 100%;
    height: 120px;
    background-color: rgba(255, 255, 255, 0.05);
    border: 2px dashed rgba(255, 255, 255, 0.2);
    border-radius: 5px;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    cursor: pointer;
}

.upload-icon {
    font-size: 24px;
    margin-bottom: 10px;
}

.genre-tags {
    display: flex;
    flex-wrap: wrap;
    gap: 8px;
    margin-top: 10px;
}

.genre-tag {
    background-color: rgba(12, 184, 0, 0.2);
    border: 1px solid rgba(12, 184, 0, 0.5);
    border-radius: 20px;
    padding: 4px 10px;
    font-size: 14px;
    display: flex;
    align-items: center;
}

.remove-tag {
    background: none;
    border: none;
    color: rgba(255, 255, 255, 0.7);
    margin-left: 8px;
    font-size: 16px;
    cursor: pointer;
}

.times-container {
    display: flex;
    flex-direction: column;
    gap: 10px;
}

.time-group {
    display: flex;
    align-items: center;
}

.time-input {
    flex: 1;
}

.remove-time {
    background: none;
    border: none;
    color: #f44336;
    font-size: 24px;
    margin-left: 10px;
    cursor: pointer;
}

.add-time {
    background: none;
    border: 1px dashed rgba(255, 255, 255, 0.3);
    color: #ccc;
    padding: 8px;
    width: 100%;
    text-align: center;
    border-radius: 5px;
    cursor: pointer;
    margin-top: 5px;
}

.form-actions {
    display: flex;
    gap: 10px;
    margin-top: 20px;
}

.cancel-btn,
.save-btn,
.confirm-btn {
    flex: 1;
    padding: 12px;
    border: none;
    border-radius: 5px;
    font-size: 16px;
    font-weight: bold;
    cursor: pointer;
}

.cancel-btn {
    background-color: rgba(255, 255, 255, 0.2);
    color: #fff;
}

.save-btn {
    background-color: #0cb800;
    color: white;
}

.confirm-btn {
    background-color: #f44336;
    color: white;
}
// File: ./css/movies.css
/* Responzivn√≠ styl pro str√°nku s filmy */


/* Logo v headeru */

.logo h1 {
    margin: 0;
    font-size: 1.5rem;
    font-weight: 700;
    color: #fff;
}


/* Hlavn√≠ kontejner */

.movies-container {
    width: 100%;
    max-width: 1200px;
    margin: 20px auto;
    padding: 0 15px;
}


/* Filtrov√°n√≠ a vyhled√°v√°n√≠ */

.filter-controls {
    display: flex;
    flex-direction: column;
    margin-bottom: 25px;
    gap: 10px;
}

.search-box {
    display: flex;
    width: 100%;
}

.search-box input {
    flex: 1;
    padding: 12px 15px;
    border: none;
    background-color: rgba(255, 255, 255, 0.1);
    color: #fff;
    border-radius: 5px 0 0 5px;
    font-size: 1rem;
}

.search-box input:focus {
    outline: none;
    background-color: rgba(255, 255, 255, 0.15);
}

.search-box button {
    background-color: #0cb800;
    border: none;
    color: white;
    padding: 0 15px;
    cursor: pointer;
    border-radius: 0 5px 5px 0;
    transition: background-color 0.3s;
}

.search-box button:hover {
    background-color: #09a100;
}

.filter-box select {
    width: 100%;
    padding: 12px 15px;
    border: none;
    background-color: rgba(255, 255, 255, 0.1);
    color: #fff;
    border-radius: 5px;
    cursor: pointer;
    font-size: 1rem;
}

.filter-box select:focus {
    outline: none;
    background-color: rgba(255, 255, 255, 0.15);
}


/* Kontejner s filmy - v√Ωchoz√≠ zobrazen√≠ pro mobiln√≠ za≈ô√≠zen√≠ */

.movies-wrapper {
    display: flex;
    flex-direction: column;
    gap: 15px;
    margin-bottom: 30px;
}


/* Karta filmu - v√Ωchoz√≠ horizont√°ln√≠ zobrazen√≠ pro mobil */

.movie-card {
    background-color: rgba(16, 16, 25, 0.5);
    /* Trochu svƒõtlej≈°√≠ pozad√≠ */
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3), 0 0 20px rgba(12, 184, 0, 0.05);
    /* Z√°kladn√≠ zelen√Ω glow */
    transition: all 0.3s ease;
}

.movie-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.4), 0 0 30px rgba(12, 184, 0, 0.2);
    /* Silnƒõj≈°√≠ glow p≈ôi hoveru */
}

.movie-card:active {
    transform: scale(0.98);
}


/* Obr√°zek filmu */

.movie-image {
    width: 90px;
    min-width: 90px;
    overflow: hidden;
    position: relative;
}

.movie-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
}


/* Obsah filmu */

.movie-content {
    flex: 1;
    padding: 12px;
    display: flex;
    flex-direction: column;
}

.movie-title {
    margin: 0 0 8px;
    font-size: 1.1rem;
    line-height: 1.3;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
    min-height: 1.3em;
}

.movie-details {
    display: flex;
    flex-direction: column;
    gap: 8px;
    flex: 1;
}

.movie-meta {
    display: flex;
    gap: 10px;
    font-size: 0.85rem;
    color: #ccc;
}

.movie-time {
    display: flex;
    flex-direction: column;
    font-size: 0.85rem;
    color: #fff;
    background-color: rgba(255, 255, 255, 0.1);
    padding: 8px 10px;
    border-radius: 5px;
    margin-bottom: 10px;
}


/* Mobile-specific reserve button */

.mobile-reserve {
    margin-top: auto;
    display: block;
}


/* Desktop-specific reserve button (hidden on mobile) */

.desktop-reserve {
    display: none;
    position: absolute;
    bottom: 10px;
    left: 0;
    right: 0;
    text-align: center;
}

.reserve-btn {
    display: inline-block;
    background-color: #0cb800;
    color: white;
    padding: 8px 15px;
    border-radius: 5px;
    font-weight: bold;
    text-decoration: none;
    text-align: center;
    width: 100%;
    box-sizing: border-box;
    transition: background-color 0.3s;
}

.reserve-btn:hover,
.reserve-btn:active {
    background-color: #09a100;
}

.reserve-btn.disabled {
    background-color: #666;
    cursor: not-allowed;
    opacity: 0.7;
}

.ended-label {
    display: inline-block;
    background-color: #555;
    color: #ccc;
    padding: 8px 15px;
    border-radius: 5px;
    font-weight: bold;
    text-align: center;
    width: 100%;
    box-sizing: border-box;
}


/* Stavy film≈Ø */

.movie-card.upcoming .movie-image img,
.movie-card.past .movie-image img {
    filter: grayscale(0.5);
}

.movie-card.past {
    opacity: 0.7;
}


/* Str√°nkov√°n√≠ */

.pagination {
    display: flex;
    justify-content: center;
    align-items: center;
    margin: 25px 0;
    gap: 5px;
}

.pagination-btn {
    width: 40px;
    height: 40px;
    display: flex;
    justify-content: center;
    align-items: center;
    border: none;
    background-color: rgba(255, 255, 255, 0.1);
    color: #fff;
    border-radius: 5px;
    cursor: pointer;
    transition: all 0.3s;
}

.pagination-btn:hover,
.pagination-btn.active {
    background-color: #0cb800;
}

.pagination-next {
    width: 40px;
    height: 40px;
    display: flex;
    justify-content: center;
    align-items: center;
    border: none;
    background-color: rgba(255, 255, 255, 0.1);
    color: #fff;
    border-radius: 5px;
    cursor: pointer;
    transition: all 0.3s;
    font-size: 1.2rem;
}

.pagination-next:hover {
    background-color: #0cb800;
}

.pagination-dots {
    color: #ccc;
    margin: 0 5px;
}


/* Zpr√°va o ≈æ√°dn√Ωch v√Ωsledc√≠ch */

.no-results {
    padding: 25px 15px;
    text-align: center;
    background-color: rgba(0, 0, 0, 0.2);
    border-radius: 8px;
    margin: 20px 0;
}

.no-results-icon {
    font-size: 2rem;
    margin-bottom: 15px;
    color: #666;
}

.no-results h3 {
    font-size: 1.3rem;
    margin-bottom: 10px;
}

.no-results p {
    color: #aaa;
}


/* Responzivn√≠ √∫pravy pro tablety */

@media (min-width: 600px) {
    .filter-controls {
        flex-direction: row;
        justify-content: space-between;
    }
    .search-box {
        width: auto;
        max-width: 60%;
    }
    .filter-box select {
        width: auto;
        min-width: 160px;
    }
    .movie-image {
        width: 120px;
        min-width: 120px;
    }
    .movie-time {
        flex-direction: row;
        justify-content: space-between;
    }
}


/* P≈ôechod na dla≈ædice pro desktop */

@media (min-width: 768px) {
    /* Kontejner s filmy se zmƒõn√≠ na grid */
    .movies-wrapper {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(220px, 1fr));
        gap: 20px;
    }
    /* Karta filmu se zmƒõn√≠ na vertik√°ln√≠ */
    .movie-card {
        flex-direction: column;
        height: 100%;
    }
    /* Obr√°zek filmu zaujme v√≠ce m√≠sta */
    .movie-image {
        width: 100%;
        min-width: auto;
        height: 0;
        padding-top: 130%;
        /* Pomƒõr stran pro n√°hled */
    }
    /* Zmƒõna pozice obr√°zku */
    .movie-image img {
        position: absolute;
        top: 0;
        left: 0;
        transition: transform 0.5s ease;
    }
    .movie-card:hover .movie-image img {
        transform: scale(1.05);
    }
    /* P≈ôepnut√≠ tlaƒç√≠tek rezervace */
    .mobile-reserve {
        display: none;
    }
    .desktop-reserve {
        display: block;
        opacity: 0;
        transition: opacity 0.3s ease;
    }
    .movie-card:hover .desktop-reserve {
        opacity: 1;
    }
    /* Mal√© √∫pravy styl≈Ø pro desktop */
    .movie-title {
        font-size: 1rem;
    }
    .movie-time {
        flex-direction: column;
    }
    .reserve-btn,
    .ended-label {
        width: 80%;
        margin: 0 auto;
    }
}


/* Vƒõt≈°√≠ poƒç√≠taƒçe */

@media (min-width: 992px) {
    .movies-wrapper {
        grid-template-columns: repeat(auto-fill, minmax(240px, 1fr));
    }
    .movie-title {
        font-size: 1.1rem;
    }
}


/* Velk√© obrazovky */

@media (min-width: 1200px) {
    .movies-wrapper {
        grid-template-columns: repeat(auto-fill, minmax(260px, 1fr));
    }
}


/* Loading stav */

.loading-state {
    text-align: center;
    padding: 40px 20px;
    background-color: rgba(0, 0, 0, 0.2);
    border-radius: 8px;
    margin: 20px 0;
}

.loading-spinner {
    width: 40px;
    height: 40px;
    border: 4px solid rgba(255, 255, 255, 0.1);
    border-left-color: #0cb800;
    border-radius: 50%;
    margin: 0 auto 15px;
    animation: spin 1s linear infinite;
}

@keyframes spin {
    to {
        transform: rotate(360deg);
    }
}


/* Stav bez v√Ωsledk≈Ø - roz≈°√≠≈ôen√≠ existuj√≠c√≠ho stylu */

.no-results {
    display: none;
    text-align: center;
    padding: 40px 20px;
    background-color: rgba(0, 0, 0, 0.2);
    border-radius: 8px;
    margin: 20px 0;
}

.no-results.visible {
    display: block;
    animation: fadeIn 0.3s ease;
}

@keyframes fadeIn {
    from {
        opacity: 0;
    }
    to {
        opacity: 1;
    }
}
// File: ./css/my-reservations.css
/* Styles for My Reservations page */


/* Opravy responzivity */


/* Kontejner pro obr√°zek - lep≈°√≠ kontrola na mobiln√≠ch za≈ô√≠zen√≠ch */

.movie-thumbnail-container {
    width: 80px;
    min-width: 80px;
    height: 120px;
    margin-right: 15px;
    position: relative;
    overflow: hidden;
}

@media (max-width: 600px) {
    /* Z√°hlav√≠ karty rezervace na mobilech */
    .reservation-header {
        flex-direction: row;
        /* Zachov√°me ≈ô√°dkov√© zobrazen√≠ i na mobilech */
        align-items: flex-start;
        gap: 10px;
    }
    /* Men≈°√≠, ale st√°le p≈ôimƒõ≈ôen√Ω n√°hled */
    .movie-thumbnail-container {
        width: 60px;
        min-width: 60px;
        height: 90px;
    }
    /* Oprav√≠me styl obr√°zku */
    .movie-thumbnail {
        width: 100%;
        height: 100%;
        margin: 0;
        border-radius: 5px;
        object-fit: cover;
    }
    /* Men≈°√≠ nadpis na mobilech */
    .movie-title {
        font-size: 1.1rem;
    }
    /* Lep≈°√≠ rozlo≈æen√≠ tlaƒç√≠tek na mal√Ωch obrazovk√°ch */
    .reservation-actions {
        flex-direction: row;
        /* St√°le v ≈ô√°dku, i na mobilech */
        justify-content: space-between;
        flex-wrap: wrap;
    }
    .view-btn,
    .cancel-btn {
        flex: 1;
        text-align: center;
        padding: 8px 5px;
        font-size: 0.85rem;
        min-width: 100px;
    }
    /* Sedadla p≈ôeuspo≈ô√°dat */
    .seats-grid {
        justify-content: center;
    }
    .seat {
        min-width: 70px;
        padding: 8px;
    }
    /* Responzivn√≠ z√°lo≈æky */
    .tabs {
        flex-wrap: wrap;
    }
    .tab-btn {
        flex: 1;
        min-width: 120px;
        text-align: center;
    }
    /* Pr√°zdn√Ω stav na mal√Ωch obrazovk√°ch */
    .empty-state {
        padding: 25px 15px;
    }
    .empty-state h3 {
        font-size: 1.2rem;
    }
    .empty-icon {
        font-size: 2.5rem;
    }
}


/* Extra mal√© obrazovky */

@media (max-width: 400px) {
    .reservation-header {
        padding: 10px;
    }
    .reservation-seats,
    .reservation-actions {
        padding: 10px;
    }
    .movie-thumbnail-container {
        width: 50px;
        min-width: 50px;
        height: 75px;
    }
    .movie-title {
        font-size: 1rem;
    }
    .movie-details,
    .reservation-date {
        font-size: 0.8rem;
    }
    .view-btn,
    .cancel-btn {
        font-size: 0.8rem;
        padding: 7px 5px;
    }
}


/* Odstranƒõn√≠ zbyteƒçn√©ho marker≈Ø na pr√°zdn√©m stavu */

.empty-state {
    margin-top: 0;
}


/* Vylep≈°en√≠ designu pr√°zdn√©ho stavu */

.reservation-list .empty-state {
    margin: 10px 0;
    width: 100%;
}


/* Opraven√≠ responzivity tlaƒç√≠tka pro prohl√≠≈æen√≠ programu */

.browse-btn {
    padding: 8px 16px;
    font-size: 0.9rem;
    display: inline-block;
}

.reservations-container {
    max-width: 900px;
    width: 100%;
    margin: 20px auto;
    padding: 0 15px;
}

.page-title {
    margin-bottom: 25px;
    font-size: 1.8rem;
    text-align: center;
}


/* Tabs */

.tabs {
    display: flex;
    justify-content: center;
    gap: 10px;
    margin-bottom: 25px;
}

.tab-btn {
    background-color: rgba(255, 255, 255, 0.1);
    border: none;
    color: #fff;
    padding: 10px 20px;
    border-radius: 5px;
    cursor: pointer;
    font-size: 0.9rem;
    transition: all 0.3s ease;
}

.tab-btn.active {
    background-color: #0cb800;
}

.tab-content {
    display: block;
}

.tab-content.hidden {
    display: none;
}


/* Reservation cards */

.reservation-list {
    display: flex;
    flex-direction: column;
    gap: 20px;
    margin-bottom: 30px;
}

.reservation-card {
    background-color: rgba(0, 0, 0, 0.2);
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 3px 10px rgba(0, 0, 0, 0.2);
}

.reservation-card.past {
    opacity: 0.7;
}

.reservation-header {
    display: flex;
    padding: 15px;
    border-bottom: 1px solid rgba(255, 255, 255, 0.05);
}

.movie-thumbnail {
    width: 80px;
    height: 120px;
    object-fit: cover;
    border-radius: 5px;
    margin-right: 15px;
}

.reservation-info {
    flex: 1;
}

.movie-title {
    font-size: 1.3rem;
    margin-bottom: 5px;
}

.movie-details {
    color: #ccc;
    font-size: 0.9rem;
    margin-bottom: 10px;
}

.movie-genre {
    margin-right: 15px;
}

.reservation-date {
    font-size: 0.9rem;
    background-color: rgba(255, 255, 255, 0.05);
    padding: 8px;
    border-radius: 5px;
    display: flex;
    align-items: center;
    flex-wrap: wrap;
    margin-top: 10px;
}

.date-icon,
.time-icon {
    margin-right: 5px;
}

.time-icon {
    margin-left: 15px;
}

.reservation-seats {
    padding: 15px;
    border-bottom: 1px solid rgba(255, 255, 255, 0.05);
}

.reservation-seats h4 {
    font-size: 1rem;
    margin-bottom: 10px;
    color: #ccc;
}

.seats-grid {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
}

.seat {
    background-color: rgba(255, 255, 255, 0.05);
    border-radius: 5px;
    padding: 10px;
    display: flex;
    flex-direction: column;
    align-items: center;
    min-width: 100px;
}

.seat-number {
    font-size: 1.5rem;
    font-weight: bold;
    color: #0cb800;
    margin-bottom: 5px;
}

.seat-label {
    font-size: 0.8rem;
    color: #ccc;
}

.reservation-actions {
    padding: 15px;
    display: flex;
    justify-content: space-between;
    align-items: center;
    flex-wrap: wrap;
    gap: 15px;
}

.view-btn {
    padding: 8px 15px;
    border: none;
    border-radius: 5px;
    font-size: 0.9rem;
    cursor: pointer;
    background-color: #2196F3;
    color: white;
    text-decoration: none;
    display: inline-block;
}

.view-btn:hover {
    background-color: #0b7dda;
}

.cancel-btn {
    padding: 8px 15px;
    border: none;
    border-radius: 5px;
    font-size: 0.9rem;
    cursor: pointer;
    background-color: #f44336;
    color: white;
}


/* Empty state */

.empty-state {
    text-align: center;
    padding: 40px 20px;
    background-color: rgba(0, 0, 0, 0.2);
    border-radius: 8px;
    margin-top: 20px;
}

.empty-state.hidden {
    display: none;
}

.empty-icon {
    font-size: 3rem;
    margin-bottom: 15px;
    opacity: 0.5;
}

.empty-state h3 {
    font-size: 1.5rem;
    margin-bottom: 10px;
}

.empty-state p {
    color: #ccc;
    margin-bottom: 20px;
}

.browse-btn {
    display: inline-block;
    background-color: #0cb800;
    color: white;
    padding: 10px 20px;
    border-radius: 5px;
    text-decoration: none;
    transition: background-color 0.3s ease;
}

.browse-btn:hover {
    background-color: #09a100;
}


/* Modal */

.modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(0, 0, 0, 0.8);
    z-index: 1000;
    overflow-y: auto;
}

.modal.active {
    display: block;
}

.modal-content {
    background-color: #333;
    border-radius: 8px;
    width: 90%;
    max-width: 500px;
    margin: 80px auto 20px;
}

.modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 15px 20px;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
}

.modal-title {
    font-size: 1.3rem;
    margin: 0;
}

.close-btn {
    background: none;
    border: none;
    color: #ccc;
    font-size: 1.5rem;
    cursor: pointer;
}

.modal-body {
    padding: 20px;
}

.modal-actions {
    display: flex;
    justify-content: flex-end;
    gap: 10px;
    margin-top: 20px;
}

.primary-btn,
.secondary-btn {
    padding: 10px 20px;
    border: none;
    border-radius: 5px;
    font-size: 0.9rem;
    cursor: pointer;
}

.primary-btn {
    background-color: #0cb800;
    color: white;
}

.secondary-btn {
    background-color: rgba(255, 255, 255, 0.1);
    color: #fff;
}

.primary-btn.confirm-cancel {
    background-color: #f44336;
}


/* Responsive adjustments */

@media (max-width: 600px) {
    .reservation-header {
        flex-direction: column;
    }
    .movie-thumbnail {
        width: 100%;
        height: 150px;
        margin-bottom: 15px;
        margin-right: 0;
    }
    .reservation-actions {
        flex-direction: column;
        align-items: flex-start;
    }
    .reservation-code {
        margin-bottom: 10px;
    }
    .cancel-btn,
    .rate-btn {
        width: 100%;
        padding: 10px;
    }
    .seat {
        min-width: 80px;
    }
}
// File: ./css/toast.css
.toast-container {
    position: fixed;
    top: 20px;
    right: 20px;
    z-index: 9999;
    display: flex;
    flex-direction: column;
    gap: 10px;
}

.toast {
    min-width: 250px;
    padding: 15px 20px;
    border-radius: 5px;
    color: white;
    font-size: 0.9rem;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
    display: flex;
    justify-content: space-between;
    align-items: center;
    transform: translateX(120%);
    transition: transform 0.4s ease;
    animation: slideIn 0.4s forwards, fadeOut 0.4s 2.6s forwards;
}

.toast-success {
    background-color: #0cb800;
}

.toast-error {
    background-color: #f44336;
}

.toast-info {
    background-color: #2196F3;
}

.toast-close {
    cursor: pointer;
    background: none;
    border: none;
    color: white;
    margin-left: 15px;
    font-size: 16px;
}

@keyframes slideIn {
    to {
        transform: translateX(0);
    }
}

@keyframes fadeOut {
    to {
        opacity: 0;
        transform: translateX(120%);
    }
}
// File: ./css/vestylu.css
/* Include all CSS from the responsive-css artifact here */

* {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
    font-family: "Lato", sans-serif;
}


/* Toto p≈ôidejte do vestylu.css, pokud tam je≈°tƒõ nen√≠ */

.seat.user-reserved {
    background-color: #4caf50;
    /* Zelen√° barva pro vlastn√≠ rezervaci */
}


/* Speci√°ln√≠ styl pro "VA≈†E M√çSTO" label */

.username-label.user-label {
    background-color: #4caf50;
    /* Zelen√° i pro jmenovku */
}


/* Username label styl - opraveno pro spr√°vn√© um√≠stƒõn√≠ nad ka≈æd√Ωm sedadlem */

.username-label {
    position: absolute;
    top: -20px;
    left: 50%;
    transform: translateX(-50%);
    background-color: rgb(93 93 93 / 70%);
    color: white;
    border-radius: 3px;
    padding: 2px 4px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    text-align: center;
    z-index: 10;
    line-height: 1;
}


/* Pro mobily - upraven√Ω styl */

@media (max-width: 480px) {
    .username-label {
        font-size: 8px;
        padding: 1px 3px;
        top: -16px;
    }
}


/* Upravit nad≈ôazen√© kontejnery, aby umo≈ænily absolutn√≠ pozicov√°n√≠ */

.seat {
    position: relative;
}


/* Jednotn√Ω loading spinner pro celou aplikaci */

.loading-state {
    text-align: center;
    padding: 40px 20px;
    background-color: rgba(0, 0, 0, 0.2);
    border-radius: 8px;
    margin: 20px 0;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
}

.loading-spinner {
    width: 40px;
    height: 40px;
    border: 4px solid rgba(255, 255, 255, 0.1);
    border-left-color: #0cb800;
    /* Zelen√° barva CineBukay */
    border-radius: 50%;
    margin: 0 auto 15px;
    animation: spin 1s linear infinite;
}

@keyframes spin {
    to {
        transform: rotate(360deg);
    }
}

body {
    background-color: #242333;
    color: #fff;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    min-height: 100vh;
    padding: 10px;
    margin: 0;
    overflow-x: hidden;
}

.showcase {
    background: rgba(0, 0, 0, 0.3);
    padding: 15px 20px;
    border-radius: 5px;
    color: #fff;
    list-style-type: none;
    display: flex;
    justify-content: space-between;
    margin-bottom: 30px;
    width: 100%;
    max-width: 400px;
}

.showcase li {
    display: flex;
    align-items: center;
    justify-content: center;
    margin: 0 10px;
}

.showcase li .seat {
    margin-right: 10px;
    width: 20px;
    height: 20px;
}

.screen {
    position: absolute;
    left: 64px;
    right: 0;
    background-color: #fff;
    height: 120px;
    width: 100%;
    max-width: 380px;
    margin: 15px 0 40px;
    transform: rotateX(-45deg);
    box-shadow: 0 3px 20px rgba(255, 255, 255, 0.7);
}

.room-container {
    width: min(500px, 96vw);
    height: min(500px, 96vw);
    position: relative;
    perspective: 1000px;
    margin: 0 auto 20px;
    transform-origin: center;
    box-sizing: border-box;
    overflow: visible;
}

.seat {
    background-color: #444451;
    height: 26px;
    width: 32px;
    margin: 3px;
    border-top-left-radius: 10px;
    border-top-right-radius: 10px;
    display: flex;
    justify-content: center;
    align-items: center;
    transition: all 0.3s ease-in-out;
    cursor: pointer;
    font-size: 12px;
}

.not-allowed {
    cursor: not-allowed;
}

.seat.selected {
    background-color: #0cb800;
}

.seat.sold {
    background-color: #fff;
    color: #242333;
    cursor: not-allowed;
}

.seat:not(.sold):hover {
    cursor: pointer;
    transform: scale(1.2);
}

.showcase .seat:not(.sold):hover {
    cursor: default;
    transform: scale(1);
}


/* Fixed position containers with percentage-based positioning */


/* Chair top right */

.chair-top-right {
    position: absolute;
    top: 42.6%;
    right: 9.2%;
    width: 16%;
    height: 16%;
    background-color: #666;
    border-radius: 10px;
    display: flex;
    justify-content: center;
    align-items: center;
}


/* Chair middle left */

.chair-middle-left {
    position: absolute;
    top: 63.8%;
    left: 9.2%;
    width: 16%;
    height: 16%;
    background-color: #666;
    border-radius: 10px;
    display: flex;
    justify-content: center;
    align-items: center;
}


/* Chair left top */

.chair-middle-top {
    position: absolute;
    top: 42.6%;
    left: 9.2%;
    width: 16%;
    height: 16%;
    background-color: #666;
    border-radius: 10px;
    display: flex;
    justify-content: center;
    align-items: center;
}


/* Couch horizontal */

.couch-horizontal {
    position: absolute;
    bottom: -6%;
    left: 9.5%;
    width: 68%;
    height: 20%;
    background-color: #666;
    border-radius: 10px;
    display: flex;
    justify-content: space-around;
    align-items: center;
}


/* Couch vertical */

.couch-vertical {
    position: absolute;
    bottom: -6%;
    right: 9.2%;
    width: 16%;
    height: 36%;
    background-color: #666;
    border-radius: 10px;
    display: flex;
    flex-direction: column;
    justify-content: space-around;
    align-items: center;
}

.button-container {
    width: 100%;
    display: flex;
    justify-content: center;
    margin-top: 30px;
}

.reserve-btn {
    padding: 12px 30px;
    background-color: #0cb800;
    color: white;
    border: none;
    border-radius: 5px;
    font-size: 1rem;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

.reserve-btn:hover {
    background-color: #09a100;
}

.reserve-btn:disabled {
    background-color: #333;
    cursor: not-allowed;
    color: #666;
}

.selection-info {
    margin-top: 20px;
    text-align: center;
}

.price {
    color: #0cb800;
    font-weight: bold;
}

.name-label {
    position: absolute;
    font-size: 10px;
    bottom: -15px;
    width: 50px;
    text-align: center;
    left: 50%;
    transform: translateX(-50%);
    color: #aaa;
}


/* Mobile responsive design */

@media (max-width: 768px) {
    .showcase {
        display: flex;
        flex-direction: row;
        justify-content: space-between;
        width: min(96vw, 500px);
        padding: 10px;
    }
    .showcase li {
        margin: 0 5px;
    }
    /* Make container fill the screen width */
    .room-container {
        width: min(96vw, 500px);
        height: min(96vw, 500px);
    }
    /* Adjust seats for aspect ratio */
    .seat {
        width: min(28px, 5.5vw);
        height: min(22px, 4.5vw);
        margin: min(3px, 0.6vw);
    }
    /* Ensure screen is centered */
    .screen {
        left: 0;
        width: 90%;
        margin: 15px auto 40px;
    }
}

@media (max-width: 480px) {
    /* Even smaller screens */
    .room-container {
        width: 98vw;
        height: 98vw;
        padding: 0 5px;
    }
    .screen {
        width: 85%;
    }
    .showcase {
        padding: 8px 10px;
    }
}

@media (max-width: 360px) {
    /* Very small screens */
    .seat {
        width: min(24px, 6vw);
        height: min(20px, 5vw);
        margin: min(2px, 0.5vw);
    }
    .showcase li .seat {
        width: 18px;
        height: 18px;
    }
}


/* Header styles */

.site-header {
    background-color: rgba(0, 0, 0, 0.5);
    padding: 15px 20px;
    display: flex;
    justify-content: space-between;
    align-items: center;
    width: 100%;
    position: fixed;
    top: 0;
    left: 0;
    z-index: 1000;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
}

.back-button a {
    color: #fff;
    text-decoration: none;
    display: flex;
    align-items: center;
    transition: all 0.3s ease;
}

.back-button a:hover {
    transform: translateX(-5px);
}

.back-arrow {
    font-size: 1.5rem;
    margin-right: 8px;
}

.user-menu-container {
    position: relative;
}

.user-icon {
    /* width: 40px; */
    /* Remove fixed width */
    /* height: 40px; */
    /* Remove fixed height */
    padding: 5px 10px;
    /* Add padding */
    background-color: #444451;
    border-radius: 8px;
    /* Slightly rounded rectangle */
    display: flex;
    flex-direction: column;
    /* Stack icon and name vertically */
    justify-content: center;
    align-items: center;
    cursor: pointer;
    transition: background-color 0.3s ease;
    min-width: 60px;
    /* Ensure minimum width */
    text-align: center;
}

.user-icon:hover {
    background-color: #555562;
}

.user-icon-symbol {
    font-size: 1.5rem;
    /* Slightly larger icon */
    color: #fff;
    line-height: 1;
    /* Adjust line height */
}


/* Style for the username */

.user-name {
    font-size: 0.7rem;
    /* Smaller font size for name */
    color: #ccc;
    margin-top: 4px;
    /* Space between icon and name */
    display: block;
    /* Ensure it takes its own line */
    max-width: 80px;
    /* Prevent long names from breaking layout */
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

.dropdown-menu {
    position: absolute;
    top: 100%;
    /* Position below the user icon */
    margin-top: 5px;
    /* Add some space */
    right: 0;
    background-color: #333;
    border-radius: 5px;
    width: 150px;
    box-shadow: 0 3px 10px rgba(0, 0, 0, 0.3);
    display: none;
    overflow: hidden;
}

.dropdown-menu.active {
    display: block;
    animation: fade-in 0.3s ease;
}

.dropdown-menu ul {
    list-style: none;
    padding: 0;
    margin: 0;
}

.dropdown-menu ul li {
    width: 100%;
}

.dropdown-menu ul li a {
    color: #fff;
    text-decoration: none;
    display: block;
    padding: 12px 15px;
    transition: background-color 0.3s ease;
}

.dropdown-menu ul li a:hover {
    background-color: #444451;
}

@keyframes fade-in {
    from {
        opacity: 0;
        transform: translateY(-10px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}


/* √öprava pro mobiln√≠ za≈ô√≠zen√≠ */

@media (max-width: 768px) {
    .back-text {
        display: none;
    }
    .back-arrow {
        font-size: 1.8rem;
    }
    .user-icon {
        width: 35px;
        height: 35px;
    }
}


/* Jednotn√Ω loading spinner pro celou aplikaci */

.loading-state {
    text-align: center;
    padding: 40px 20px;
    background-color: rgba(0, 0, 0, 0.2);
    border-radius: 8px;
    margin: 20px 0;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
}

.loading-spinner {
    width: 40px;
    height: 40px;
    border: 4px solid rgba(255, 255, 255, 0.1);
    border-left-color: #0cb800;
    /* Zelen√° barva CineBukay */
    border-radius: 50%;
    margin: 0 auto 15px;
    animation: spin 1s linear infinite;
}

@keyframes spin {
    to {
        transform: rotate(360deg);
    }
}


/* √öprava odsazen√≠ obsahu str√°nky */

body {
    padding-top: 70px;
}


/* Login & Registration Styles */

.auth-container {
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 20px;
    width: 100%;
}

.auth-box {
    background-color: rgba(0, 0, 0, 0.4);
    border-radius: 10px;
    box-shadow: 0 5px 20px rgba(0, 0, 0, 0.3);
    width: 100%;
    max-width: 450px;
    overflow: hidden;
}

.auth-header {
    padding: 25px 30px 15px;
    text-align: center;
}

.auth-header h1 {
    margin-bottom: 20px;
    font-size: 1.8rem;
    color: #fff;
}

.auth-tabs {
    display: flex;
    justify-content: center;
    margin-bottom: 20px;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
}

.auth-tab {
    background: none;
    border: none;
    color: #aaa;
    font-size: 1rem;
    padding: 10px 20px;
    margin: 0 5px;
    cursor: pointer;
    transition: all 0.3s ease;
    border-bottom: 2px solid transparent;
}

.auth-tab:hover {
    color: #fff;
}

.auth-tab.active {
    color: #0cb800;
    border-bottom: 2px solid #0cb800;
}

.auth-form-container {
    padding: 0 30px 30px;
}

.auth-form {
    display: none;
}

.auth-form.active {
    display: block;
    animation: fadeIn 0.5s ease;
}

@keyframes fadeIn {
    from {
        opacity: 0;
        transform: translateY(10px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

.form-group {
    margin-bottom: 20px;
}


/* Styl pro oznaƒçen√≠ vlastn√≠ rezervace */

.seat.user-reserved {
    background-color: #4caf50;
    /* Zelen√° barva pro vlastn√≠ rezervaci */
}


/* Speci√°ln√≠ styl pro "VA≈†E M√çSTO" label */

.username-label.user-label {
    background-color: #4caf50;
    /* Zelen√° i pro jmenovku */
}


/* Oprava um√≠stƒõn√≠ jmenovek nad sedadly */

.username-label {
    position: absolute;
    top: -20px;
    left: 50%;
    transform: translateX(-50%);
    background-color: rgba(109, 109, 109, 0.7);
    color: white;
    border-radius: 3px;
    padding: 2px 4px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    text-align: center;
    z-index: 10;
    line-height: 1;
}

.form-group label {
    display: block;
    margin-bottom: 8px;
    color: #ccc;
    font-size: 0.9rem;
}

.form-group input[type="text"],
.form-group input[type="email"],
.form-group input[type="password"] {
    width: 100%;
    padding: 12px 15px;
    background-color: rgba(255, 255, 255, 0.08);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 5px;
    color: #fff;
    font-size: 1rem;
    transition: all 0.3s ease;
}

.form-group input:focus {
    outline: none;
    background-color: rgba(255, 255, 255, 0.12);
    border-color: rgba(255, 255, 255, 0.2);
}

.checkbox {
    display: flex;
    align-items: center;
}

.checkbox input {
    margin-right: 10px;
    width: 18px;
    height: 18px;
    cursor: pointer;
}

.checkbox label {
    margin-bottom: 0;
    cursor: pointer;
}

.submit-btn {
    width: 100%;
    padding: 12px;
    background-color: #0cb800;
    color: white;
    border: none;
    border-radius: 5px;
    font-size: 1rem;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

.submit-btn:hover {
    background-color: #09a100;
}

.forgot-password {
    text-align: center;
    margin-top: 15px;
}

.forgot-password a,
.checkbox a {
    color: #0cb800;
    text-decoration: none;
    transition: color 0.3s ease;
}

.forgot-password a:hover,
.checkbox a:hover {
    color: #09a100;
    text-decoration: underline;
}


/* Error message styling */

.error-message {
    color: #ff6b6b;
    font-size: 0.85rem;
    margin-top: 5px;
    display: none;
}

.error-message.visible {
    display: block;
}


/* Responsive adjustments */

@media (max-width: 480px) {
    .auth-box {
        max-width: 100%;
    }
    .auth-header {
        padding: 20px 20px 10px;
    }
    .auth-form-container {
        padding: 0 20px 20px;
    }
    .auth-tab {
        padding: 8px 15px;
        font-size: 0.9rem;
    }
}

.seat-label {
    color: #343434;
    position: absolute;
    bottom: 3px;
    font-size: 10px;
    font-weight: bolder;
}
// File: ./db_config.php
<?php
// File: db_config.php
// Returns the database connection parameters array.

return [ // Use return instead of defining a global variable
    'host' => '10.40.20.201',
    'port' => '5432',
    'db_name' => 'cb',
    'user' => 'cb_user',
    'password' => 'mEga_cbA_pAsS*3289'
];

// Funkce getDbConnection() byla p≈ôesunuta do t≈ô√≠dy Database (src/Database.php)
// Tento soubor nyn√≠ pouze vrac√≠ konfiguraƒçn√≠ pole.
// Extra ']' removed below
?>

// File: ./index.php
<!DOCTYPE html>
<html lang="cs">
<head>
    <link rel="stylesheet" href="./css/toast.css">
    <script src="./js/toast.js"></script>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CineBukay | Programy film≈Ø</title>
    <link href="https://fonts.googleapis.com/css?family=Lato&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="./css/vestylu.css">
    <link rel="stylesheet" href="./css/movies.css">
</head>
<body>
    <?php
    require_once 'session_check.php';
    $userMenu = getUserMenuHTML(); // Z√≠sk√° HTML pro menu podle stavu p≈ôihl√°≈°en√≠
    ?>

    <header class="site-header">
        <div class="logo">
            <h1>CineBukay</h1>
        </div>
        <?php echo $userMenu; ?>
    </header>

    <main class="movies-container">
        <div class="filter-controls">
            <div class="search-box">
                <input type="text" id="search-input" placeholder="Hledat film...">
                <button id="search-btn">
                    <span>&#128269;</span>
                </button>
            </div>
            <div class="filter-box">
                <select id="filter-select">
                    <option value="all">V≈°echny filmy</option>
                    <option value="upcoming">P≈ôipravovan√©</option>
                    <option value="now">Nyn√≠ prom√≠t√°me</option>
                    <option value="past">Archiv</option>
                </select>
            </div>
        </div>

        <!-- Loading indik√°tor -->
        <div id="loading" class="loading-state">
            <div class="loading-spinner"></div>
            <p>Naƒç√≠t√°m filmy...</p>
        </div>

        <!-- Kontejner pro filmy -->
        <div class="movies-wrapper" id="movies-wrapper">
            <!-- Sem budou dynamicky vlo≈æeny karty film≈Ø -->
        </div>

        <!-- Stav bez v√Ωsledk≈Ø -->
        <div id="no-results" class="no-results">
            <div class="no-results-icon">&#128269;</div>
            <h3>≈Ω√°dn√© filmy nenalezeny</h3>
            <p>Zkuste upravit va≈°e hled√°n√≠ nebo filtr.</p>
        </div>

        <!-- Str√°nkov√°n√≠ -->
        <div class="pagination">
            <button class="pagination-btn active">1</button>
            <button class="pagination-btn">2</button>
            <button class="pagination-btn">3</button>
            <span class="pagination-dots">...</span>
            <button class="pagination-btn">10</button>
            <button class="pagination-next">
                <span>&#8594;</span>
            </button>
        </div>
    </main>

    <script src="./js/main.js"></script>
    <script src="./js/common.js"></script>
<?php
// Kontrola toast zpr√°vy ze session
$toastMessage = getToastMessage();
if ($toastMessage): 
?>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        showToast('<?php echo addslashes($toastMessage['message']); ?>', '<?php echo $toastMessage['type']; ?>');
    });
</script>
<?php endif; ?>
</body>
</html>

// File: ./js/admin.js
document.addEventListener('DOMContentLoaded', function() {
            // Z√°kladn√≠ reference na elementy
            const movieModal = document.getElementById('movie-modal');
            const deleteModal = document.getElementById('delete-modal');
            const addMovieBtn = document.getElementById('add-movie-btn');
            const movieForm = document.getElementById('movie-form');
            const genreInput = document.getElementById('movie-genre');
            const genreTags = document.getElementById('genre-tags');
            const imageUpload = document.getElementById('image-upload');
            const movieImage = document.getElementById('movie-image');
            const movieIdInput = document.getElementById('movie-id'); // Skryt√© pole pro ID
            const modalTitle = movieModal.querySelector('.modal-title'); // Nadpis modalu

            // Add pagination state variables
            let allMoviesData = []; // Pole pro ulo≈æen√≠ naƒçten√Ωch dat film≈Ø
            let currentPage = 1;
            const moviesPerPage = 10; // Number of movies per page

            // Naƒçten√≠ film≈Ø p≈ôi startu
            loadMovies();

            // P≈ôid√°n√≠ nov√©ho filmu - otev≈ôen√≠ modalu
            addMovieBtn.addEventListener('click', function() {
                resetForm();
                movieModal.classList.add('active');
                document.body.style.overflow = 'hidden';
            });

            // Zav≈ôen√≠ mod√°l≈Ø
            document.querySelectorAll('.close-btn, .cancel-btn').forEach(btn => {
                btn.addEventListener('click', closeModals);
            });

            // Odesl√°n√≠ formul√°≈ôe (Add / Update)
            movieForm.addEventListener('submit', async function(e) {
                e.preventDefault();

                const formData = new FormData();
                const movieId = movieIdInput.value;
                const formAction = movieId ? 'update' : 'add'; // Rozli≈°en√≠ akce

                formData.append('action', formAction);
                if (movieId) {
                    formData.append('id', movieId); // P≈ôidat ID pro update
                }

                // Z√°kladn√≠ √∫daje
                const title = document.getElementById('movie-title').value;
                const duration = document.getElementById('movie-duration').value;
                const screeningDateTime = document.getElementById('movie-datetime').value;
                const description = document.getElementById('movie-description').value;
                const genreInputVal = document.getElementById('movie-genre').value.trim(); // Z√≠skat i hodnotu z inputu, pokud nebyl p≈ôid√°n tag

                // Povinn√° pole
                if (!title || !duration || !screeningDateTime) {
                    alert('Vypl≈àte pros√≠m v≈°echna povinn√° pole (n√°zev, d√©lka, datum a ƒças)');
                    return;
                }

                // Rozdƒõlen√≠ data a ƒçasu a validace
                const parts = screeningDateTime.split('T');
                if (parts.length !== 2 || !parts[0] || !parts[1]) {
                    alert('Datum a ƒças prom√≠t√°n√≠ nen√≠ ve spr√°vn√©m form√°tu (oƒçek√°v√°no YYYY-MM-DDTHH:MM).');
                    return; // Zastavit odes√≠l√°n√≠, pokud form√°t nen√≠ spr√°vn√Ω
                }
                const datePart = parts[0];
                const timePart = parts[1];

                formData.append('title', title);
                formData.append('duration', duration);
                formData.append('screening_date', datePart); // Odeslat pouze datum
                formData.append('screening_time', JSON.stringify([timePart])); // Odeslat ƒças jako JSON pole s jednou hodnotou
                formData.append('description', description);

                // ≈Ω√°nry - sbƒõr z tag≈Ø
                let genres = Array.from(genreTags.querySelectorAll('.genre-tag'))
                    .map(tag => tag.textContent.replace('√ó', '').trim())
                    .filter(genre => genre);

                // Pokud je nƒõco v inputu a nen√≠ to u≈æ v taz√≠ch, p≈ôidej to
                if (genreInputVal && !genres.map(g => g.toLowerCase()).includes(genreInputVal.toLowerCase())) {
                    genres.push(genreInputVal);
                }

                if (!genres.length) {
                    alert('P≈ôidejte pros√≠m alespo≈à jeden ≈æ√°nr.');
                    return; // ≈Ω√°nr je nyn√≠ povinn√Ω
                }
                formData.append('genre', genres.join(', ')); // Odeslat jako string oddƒõlen√Ω ƒç√°rkou

                // P≈ôid√°n√≠ obr√°zku do FormData, pokud byl vybr√°n
                const imageInput = document.getElementById('movie-image');
                const imagePreview = imageUpload.querySelector('img');
                if (imageInput.files[0]) {
                    // Pokud je soubor, ƒçteme ho jako base64
                    const reader = new FileReader();
                    reader.readAsDataURL(imageInput.files[0]);
                    await new Promise((resolve, reject) => {
                        reader.onload = () => {
                            formData.append('image', reader.result); // Odeslat jako base64 data URI
                            resolve();
                        };
                        reader.onerror = reject;
                    });
                } else if (imagePreview && imagePreview.src.startsWith('data:image')) {
                    // Pokud nen√≠ nov√Ω soubor, ale je n√°hled (p≈ôi √∫pravƒõ), po≈°li st√°vaj√≠c√≠ base64
                    formData.append('image', imagePreview.src);
                }

                try {
                    // Pou≈æ√≠t api_endpoint.php
                    const response = await fetch('api_endpoint.php', {
                        method: 'POST',
                        body: formData
                    });

                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }

                    const result = await response.json();
                    console.log('Server response:', result);

                    if (result.status === 'success') {
                        showToast(result.message, 'success');
                        closeModals();
                        loadMovies(); // Znovu naƒç√≠st po √∫spƒõ≈°n√© akci
                    } else {
                        showToast(result.message, 'error');
                    }
                } catch (error) {
                    console.error('Error:', error);
                    showToast(`Chyba p≈ôi ${formAction === 'add' ? 'p≈ôid√°v√°n√≠' : 'aktualizaci'} filmu: ${error.message}`, 'error');
                }
            });

            // Spr√°va ≈æ√°nr≈Ø
            genreInput.addEventListener('keydown', function(e) {
                if (e.key === 'Enter' || e.key === ',') {
                    e.preventDefault();
                    addGenreTag(this.value);
                    this.value = '';
                }
            });

            function addGenreTag(genre) {
                genre = genre.trim();
                if (!genre) return;

                // Kontrola duplicity
                const existingTags = Array.from(genreTags.querySelectorAll('.genre-tag'))
                    .map(tag => tag.textContent.replace('√ó', '').trim().toLowerCase());

                if (existingTags.includes(genre.toLowerCase())) return;

                const tag = document.createElement('div');
                tag.className = 'genre-tag';
                tag.innerHTML = `
            ${genre}
            <button type="button" class="remove-tag">&times;</button>
        `;

                tag.querySelector('.remove-tag').addEventListener('click', () => tag.remove());
                genreTags.appendChild(tag);
            }

            // Spr√°va obr√°zku
            imageUpload.addEventListener('click', () => movieImage.click());

            movieImage.addEventListener('change', function(e) {
                const file = e.target.files[0];
                if (file) {
                    if (!file.type.startsWith('image/')) {
                        showToast('Pros√≠m vyberte pouze obr√°zky', 'error');
                        return;
                    }

                    const reader = new FileReader();
                    reader.onload = function(e) {
                        imageUpload.innerHTML = `<img src="${e.target.result}" alt="N√°hled" style="max-width: 100%; max-height: 100%;">`;
                    };
                    reader.readAsDataURL(file);
                }
            });

            // Naƒçten√≠ film≈Ø z API (api_endpoint.php)
            async function loadMovies() {
                // Zobrazit loading indik√°tor
                const loadingIndicator = document.getElementById('movies-loading');
                const tableBody = document.querySelector('.admin-table tbody');
                const cardsContainer = document.querySelector('.movies-cards');
                if (loadingIndicator) loadingIndicator.style.display = 'block';
                if (tableBody) tableBody.innerHTML = ''; // Vyƒçistit p≈ôed naƒç√≠t√°n√≠m
                if (cardsContainer) cardsContainer.innerHTML = ''; // Vyƒçistit p≈ôed naƒç√≠t√°n√≠m

                try {
                    const response = await fetch('api_endpoint.php'); // Pou≈æ√≠t spr√°vn√Ω endpoint
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    const movies = await response.json();
                    allMoviesData = movies; // Ulo≈æit data pro pozdƒõj≈°√≠ pou≈æit√≠ (edit)

                    if (loadingIndicator) loadingIndicator.style.display = 'none'; // Skr√Ωt loading

                    // Zpracov√°n√≠ odpovƒõdi - m≈Ø≈æe obsahovat 'status' => 'error'
                    if (movies.status === 'error') {
                        console.error('Chyba p≈ôi naƒç√≠t√°n√≠ film≈Ø:', movies.message);
                        showToast('Nepoda≈ôilo se naƒç√≠st filmy: ' + movies.message, 'error');
                        return;
                    }

                    if (Array.isArray(movies)) {
                        // Setup pagination
                        setupPagination();
                        // Display first page
                        displayMoviesPage(currentPage);
                    } else {
                        console.error('Neplatn√° odpovƒõƒè ze serveru:', movies);
                        showToast('Obdr≈æena neplatn√° odpovƒõƒè ze serveru.', 'error');
                    }
                } catch (error) {
                    console.error('Chyba p≈ôi naƒç√≠t√°n√≠ film≈Ø:', error);
                    showToast('Chyba p≈ôi komunikaci se serverem p≈ôi naƒç√≠t√°n√≠ film≈Ø.', 'error');
                    if (loadingIndicator) loadingIndicator.style.display = 'none'; // Skr√Ωt loading i p≈ôi chybƒõ
                }
            }

            // Function to display a specific page of movies
            function displayMoviesPage(page) {
                const startIndex = (page - 1) * moviesPerPage;
                const endIndex = Math.min(startIndex + moviesPerPage, allMoviesData.length);
                const moviesToShow = allMoviesData.slice(startIndex, endIndex);

                updateMoviesUI(moviesToShow);
                updateActivePaginationButton();
            }

            // Setup pagination based on total movies
            function setupPagination() {
                const totalPages = Math.ceil(allMoviesData.length / moviesPerPage);
                const paginationContainer = document.querySelector('.pagination');

                // Clear pagination container
                paginationContainer.innerHTML = '';

                // Add page buttons
                for (let i = 1; i <= totalPages; i++) {
                    if (i === 1 || i === totalPages || (i >= currentPage - 1 && i <= currentPage + 1)) {
                        const btn = document.createElement('button');
                        btn.className = 'page-btn';
                        if (i === currentPage) btn.classList.add('active');
                        btn.textContent = i;
                        btn.addEventListener('click', function() {
                            currentPage = i;
                            displayMoviesPage(currentPage);
                        });
                        paginationContainer.appendChild(btn);
                    } else if ((i === 2 && currentPage > 3) || (i === totalPages - 1 && currentPage < totalPages - 2)) {
                        // Add dots for pagination
                        const dots = document.createElement('span');
                        dots.className = 'pagination-dots';
                        dots.textContent = '...';
                        paginationContainer.appendChild(dots);
                    }
                }

                // Add next button if there are pages
                if (totalPages > 0) {
                    const nextBtn = document.createElement('button');
                    nextBtn.className = 'next-btn';
                    nextBtn.innerHTML = '‚Üí';
                    nextBtn.addEventListener('click', function() {
                        if (currentPage < totalPages) {
                            currentPage++;
                            displayMoviesPage(currentPage);
                        }
                    });
                    paginationContainer.appendChild(nextBtn);
                }
            }

            // Update the active pagination button
            function updateActivePaginationButton() {
                const buttons = document.querySelectorAll('.page-btn');
                buttons.forEach(btn => {
                    if (parseInt(btn.textContent) === currentPage) {
                        btn.classList.add('active');
                    } else {
                        btn.classList.remove('active');
                    }
                });
            }

            // Aktualizace UI s filmy
            function updateMoviesUI(movies) {
                const tableBody = document.querySelector('.admin-table tbody');
                const cardsContainer = document.querySelector('.movies-cards');

                tableBody.innerHTML = '';
                cardsContainer.innerHTML = '';

                movies.forEach(movie => {
                            // ≈ò√°dek pro desktop tabulku
                            const row = document.createElement('tr');
                            row.innerHTML = `
                <td>
                    <div class="movie-name-with-image">
                        ${movie.image ? 
                            `<img src="data:image/jpeg;base64,${movie.image}" alt="${movie.title}">` :
                            '<div class="no-image">No image</div>'
                        }
                        <span>${movie.title}</span>
                    </div>
                </td>
                <td>${movie.genre || 'N/A'}</td>
                <td>${movie.duration} min</td>
                <td>${formatDateTime(movie.screening_date, movie.screening_time)}</td>
                <td>
                    <div class="action-buttons">
                        <button class="edit-btn" data-id="${movie.id_screening}">Upravit</button>
                        <button class="delete-btn" data-id="${movie.id_screening}">Smazat</button>
                    </div>
                </td>
            `;
            tableBody.appendChild(row);

            // Karta pro mobiln√≠ zobrazen√≠
            const card = document.createElement('div');
            card.className = 'movie-card';
            card.innerHTML = `
                <div class="movie-header">
                    ${movie.image ? 
                        `<img src="data:image/jpeg;base64,${movie.image}" alt="${movie.title}" class="movie-image">` :
                        '<div class="no-image">No image</div>'
                    }
                    <div>
                        <div class="movie-title">${movie.title}</div>
                        <div class="movie-meta">${movie.genre} ‚Ä¢ ${movie.duration} min</div>
                    </div>
                </div>
                <div class="movie-details">
                    <div class="movie-datetime">
                        <span class="datetime-label">Prom√≠t√°n√≠:</span> ${formatDateTime(movie.screening_date, movie.screening_time)}
                    </div>
                </div>
                <div class="movie-actions">
                    <button class="action-btn edit-btn" data-id="${movie.id_screening}">Upravit</button>
                    <button class="action-btn delete-btn" data-id="${movie.id_screening}">Smazat</button>
                </div>
            `;
            cardsContainer.appendChild(card);
        });

        // P≈ôid√°n√≠ event listener≈Ø pro akƒçn√≠ tlaƒç√≠tka
        setupActionButtons();
    }

    // Nastaven√≠ event listener≈Ø pro tlaƒç√≠tka
    function setupActionButtons() {
        // Edit tlaƒç√≠tka
        document.querySelectorAll('.edit-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                const id = this.getAttribute('data-id');
                // Naj√≠t data filmu v ulo≈æen√©m poli
                const movieData = allMoviesData.find(movie => movie.id_screening == id);
                if (movieData) {
                    editMovie(movieData);
                } else {
                    showToast('Data filmu pro √∫pravu nebyla nalezena.', 'error');
                    // Alternativnƒõ: Zavolat API pro naƒçten√≠ detailu filmu podle ID
                }
            });
        });

        // Delete tlaƒç√≠tka
        document.querySelectorAll('.delete-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                const id = this.getAttribute('data-id');
                // Naj√≠t n√°zev filmu bezpeƒçnƒõji
                const cardOrRow = this.closest('tr') || this.closest('.movie-card');
                let title = 'tento film';
                if (cardOrRow) {
                     const titleElement = cardOrRow.querySelector('.movie-title') || cardOrRow.querySelector('.movie-name-with-image span');
                     if (titleElement) {
                         title = titleElement.textContent.trim();
                     }
                }
                showDeleteConfirmation(id, title);
            });
        });
    }

    // Zobrazen√≠ potvrzen√≠ smaz√°n√≠
    function showDeleteConfirmation(id, title) {
        const deleteModal = document.getElementById('delete-modal');
        const movieNameSpan = document.getElementById('delete-movie-name');
        const confirmBtn = deleteModal.querySelector('.confirm-btn');
        const cancelBtn = deleteModal.querySelector('.cancel-btn'); // P≈ôid√°no pro odpojen√≠ listeneru
        const closeBtn = deleteModal.querySelector('.close-btn'); // P≈ôid√°no pro odpojen√≠ listeneru

        if (!deleteModal || !movieNameSpan || !confirmBtn || !cancelBtn || !closeBtn) {
            console.error('Chyb√≠ elementy v delete modalu!');
            showToast('Chyb√≠ elementy v delete modalu!', 'error');
            return;
        }

        movieNameSpan.textContent = title;

        // Odstranit star√Ω listener, aby se neduplikoval
        const newConfirmBtn = confirmBtn.cloneNode(true);
        confirmBtn.parentNode.replaceChild(newConfirmBtn, confirmBtn);
        
        // P≈ôidat nov√Ω listener
        newConfirmBtn.addEventListener('click', () => deleteMovie(id));

        // Zajistit zav≈ôen√≠ modalu
        cancelBtn.onclick = closeModals;
        closeBtn.onclick = closeModals;

        deleteModal.classList.add('active');
        document.body.style.overflow = 'hidden';
    }

    // Funkce pro smaz√°n√≠ filmu
    async function deleteMovie(id) {
        try {
            const formData = new FormData();
            formData.append('action', 'delete');
            formData.append('id', id);

            const response = await fetch('api_endpoint.php', {
                method: 'POST',
                body: formData
            });

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const result = await response.json();

            if (result.status === 'success') {
                showToast(result.message, 'success');
                closeModals();
                loadMovies(); // Znovu naƒç√≠st seznam film≈Ø
            } else {
                showToast(result.message, 'error');
            }
        } catch (error) {
            console.error('Chyba p≈ôi maz√°n√≠ filmu:', error);
            showToast(`Chyba p≈ôi maz√°n√≠ filmu: ${error.message}`, 'error');
            closeModals(); // Zav≈ô√≠t modal i p≈ôi chybƒõ
        }
    }

    // Helper funkce
    function closeModals() {
        movieModal.classList.remove('active');
        deleteModal.classList.remove('active');
        document.body.style.overflow = '';
    }

    function resetForm() {
        movieForm.reset();
        movieIdInput.value = ''; // Vyƒçistit ID
        modalTitle.textContent = 'P≈ôidat nov√Ω film'; // Resetovat nadpis
        genreTags.innerHTML = '';
        imageUpload.innerHTML = `
            <div class="upload-icon">üì∑</div>
            <div>Nahr√°t obr√°zek</div>
        `;
        document.getElementById('movie-datetime').value = ''; // Reset datetime pole
    }

    // Pomocn√° funkce pro form√°tov√°n√≠ data a ƒçasu
    function formatDateTime(dateStr, timeStr) {
        if (!dateStr) return 'N/A';
        
        try {
            const date = new Date(dateStr);
            
            // Pokud m√°me i ƒças, p≈ôid√°me ho
            let timeFormatted = '';
            if (timeStr) {
                // Pokud je time JSON string, zpracujeme ho
                try {
                    const parsedTime = JSON.parse(timeStr);
                    if (Array.isArray(parsedTime) && parsedTime.length > 0) {
                        timeFormatted = ' ' + parsedTime[0].substring(0, 5); // HH:MM
                    } else {
                        timeFormatted = ' ' + timeStr.substring(0, 5); // HH:MM
                    }
                } catch (e) {
                    // Pokud nejde o JSON, pou≈æijeme p≈ô√≠mo
                    timeFormatted = ' ' + timeStr.substring(0, 5); // HH:MM
                }
            }
            
            // Pou≈æit√≠ Intl pro lokalizovan√Ω form√°t data
            const options = { year: 'numeric', month: 'numeric', day: 'numeric' };
            return new Intl.DateTimeFormat('cs-CZ', options).format(date) + timeFormatted;
        } catch (e) {
            console.error("Chyba form√°tov√°n√≠ data:", e);
            return dateStr; // Vra≈• p≈Øvodn√≠ string v p≈ô√≠padƒõ chyby
        }
    }

    // Helper funkce
    function closeModals() {
        movieModal.classList.remove('active');
        deleteModal.classList.remove('active');
        document.body.style.overflow = '';
    }

    function resetForm() {
        movieForm.reset();
        movieIdInput.value = ''; // Vyƒçistit ID
        modalTitle.textContent = 'P≈ôidat nov√Ω film'; // Resetovat nadpis
        genreTags.innerHTML = '';
        imageUpload.innerHTML = `
            <div class="upload-icon">üì∑</div>
            <div>Nahr√°t obr√°zek</div>
        `;
        document.getElementById('movie-datetime').value = ''; // Reset datetime pole
    }
    
    function showToast(message, type = 'success', duration = 3000) {
        window.showToast(message, type, duration);
    }

    // --- Funkce pro √∫pravu filmu ---
    function editMovie(movieData) {
        resetForm(); // Nejprve resetovat formul√°≈ô

        // Nastavit hodnoty formul√°≈ôe
        movieIdInput.value = movieData.id_screening;
        modalTitle.textContent = 'Upravit film'; // Zmƒõnit nadpis modalu
        document.getElementById('movie-title').value = movieData.title || '';
        document.getElementById('movie-duration').value = movieData.duration || '';
        document.getElementById('movie-description').value = movieData.description || '';
        
        // Vyplnit datum a ƒças - pot≈ôebujeme form√°t YYYY-MM-DDTHH:MM
        if (movieData.screening_date) {
            try {
                let timeStr = movieData.screening_time || '00:00:00';
                // Pokud je ƒças JSON string s polem, extrahujeme prvn√≠ ƒças
                try {
                    const parsedTime = JSON.parse(timeStr);
                    if (Array.isArray(parsedTime) && parsedTime.length > 0) {
                        timeStr = parsedTime[0];
                    }
                } catch (e) {
                    // Pokud nejde o JSON, pou≈æijeme p≈ô√≠mo
                }
                
                // Form√°tov√°n√≠ pro datetime-local input (YYYY-MM-DDTHH:MM)
                const dateTimeStr = `${movieData.screening_date}T${timeStr.substring(0, 5)}`;
                document.getElementById('movie-datetime').value = dateTimeStr;
            } catch (e) {
                console.error("Chyba p≈ôi nastavov√°n√≠ data a ƒçasu pro √∫pravu:", e);
                document.getElementById('movie-datetime').value = '';
            }
        } else {
            document.getElementById('movie-datetime').value = '';
        }

        // Vyplnit ≈æ√°nry
        genreTags.innerHTML = ''; // Nejprve vyƒçistit tagy
        if (movieData.genre && movieData.genre !== 'Neza≈ôazeno') {
            movieData.genre.split(',').forEach(g => addGenreTag(g.trim()));
        }
        document.getElementById('movie-genre').value = ''; // Vyƒçistit input pro ≈æ√°nr

        // Zobrazit n√°hled obr√°zku, pokud existuje
        if (movieData.image) {
            imageUpload.innerHTML = `<img src="data:image/jpeg;base64,${movieData.image}" alt="N√°hled" style="max-width: 100%; max-height: 100%;">`;
        }

        // Otev≈ô√≠t modal
        movieModal.classList.add('active');
        document.body.style.overflow = 'hidden';
    }
});
// File: ./js/common.js
document.addEventListener('DOMContentLoaded', function() {
    // User menu dropdown
    const userIcon = document.getElementById('user-icon');
    const dropdownMenu = document.getElementById('dropdown-menu');

    if (userIcon && dropdownMenu) {
        userIcon.addEventListener('click', function(e) {
            e.stopPropagation();
            dropdownMenu.classList.toggle('active');
        });

        document.addEventListener('click', function() {
            if (dropdownMenu.classList.contains('active')) {
                dropdownMenu.classList.remove('active');
            }
        });

        dropdownMenu.addEventListener('click', function(e) {
            e.stopPropagation();
        });
    }
});
// File: ./js/login.js
document.addEventListener('DOMContentLoaded', function() {
    // Tab switching functionality
    const tabs = document.querySelectorAll('.auth-tab');
    const forms = document.querySelectorAll('.auth-form');

    tabs.forEach(tab => {
        tab.addEventListener('click', function() {
            // Remove active class from all tabs and forms
            tabs.forEach(t => t.classList.remove('active'));
            forms.forEach(f => f.classList.remove('active'));

            // Add active class to clicked tab and corresponding form
            this.classList.add('active');
            const formId = `${this.dataset.tab}-form`;
            document.getElementById(formId).classList.add('active');
        });
    });

    // Login form submission handling
    const loginForm = document.getElementById('login-form');
    loginForm.addEventListener('submit', function(e) {
        e.preventDefault();

        // Get form values
        const username = document.getElementById('login-username').value;
        const password = document.getElementById('login-password').value;
        const rememberMe = document.getElementById('remember-me').checked;

        // Basic validation
        if (!username || !password) {
            showError(loginForm, 'Vypl≈àte pros√≠m v≈°echna povinn√° pole.');
            return;
        }

        // Send AJAX request
        const formData = new FormData();
        formData.append('action', 'login');
        formData.append('username', username);
        formData.append('password', password);
        formData.append('remember', rememberMe);

        fetch('auth_handlers.php', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.status === 'success') {
                    showSuccess(loginForm, data.message);

                    // Redirect after a short delay
                    setTimeout(() => {
                        window.location.href = data.redirect || 'index.php';
                    }, 1000);
                } else {
                    showError(loginForm, data.message);
                }
            })
            .catch(error => {
                showError(loginForm, 'Do≈°lo k chybƒõ p≈ôi p≈ôihla≈°ov√°n√≠. Zkuste to pros√≠m znovu.');
                console.error('Error:', error);
            });
    });

    // Registration form submission handling
    const registerForm = document.getElementById('register-form');
    registerForm.addEventListener('submit', function(e) {
        e.preventDefault();

        // Get form values
        const username = document.getElementById('register-username').value;
        const password = document.getElementById('register-password').value;
        const passwordConfirm = document.getElementById('register-password-confirm').value;
        const agreeTerms = document.getElementById('agree-terms').checked;

        // Basic validation
        if (!username || !password || !passwordConfirm) {
            showError(registerForm, 'Vypl≈àte pros√≠m v≈°echna povinn√° pole.');
            return;
        }

        if (password !== passwordConfirm) {
            showError(registerForm, 'Hesla se neshoduj√≠.');
            return;
        }

        if (!agreeTerms) {
            showError(registerForm, 'Pro registraci mus√≠te souhlasit s obchodn√≠mi podm√≠nkami.');
            return;
        }

        // Password strength validation
        if (password.length < 8) {
            showError(registerForm, 'Heslo mus√≠ m√≠t alespo≈à 8 znak≈Ø.');
            return;
        }

        // Send AJAX request
        const formData = new FormData();
        formData.append('action', 'register');
        formData.append('username', username);
        formData.append('password', password);

        fetch('auth_handlers.php', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.status === 'success') {
                    showSuccess(registerForm, data.message);

                    // Switch to login tab after successful registration
                    setTimeout(() => {
                        tabs[0].click();
                        document.getElementById('login-username').value = username;
                    }, 1500);
                } else {
                    showError(registerForm, data.message);
                }
            })
            .catch(error => {
                showError(registerForm, 'Do≈°lo k chybƒõ p≈ôi registraci. Zkuste to pros√≠m znovu.');
                console.error('Error:', error);
            });
    });

    // Error message helper function
    function showError(form, message) {
        showToast(message, 'error');
    }

    // Success message helper function
    function showSuccess(form, message) {
        showToast(message, 'success');
    }

});
// File: ./js/main.js
document.addEventListener('DOMContentLoaded', function() {
            // Add pagination state variables
            let allMovies = []; // Store all movies for pagination
            let currentPage = 1;
            const moviesPerPage = 8; // Adjust based on your design preference

            // Naƒçten√≠ film≈Ø p≈ôi startu
            loadMovies();

            // Elementy pro vyhled√°v√°n√≠ a filtrov√°n√≠
            const searchInput = document.getElementById('search-input');
            const searchBtn = document.getElementById('search-btn'); // Fixed selector
            const filterSelect = document.getElementById('filter-select');
            const moviesWrapper = document.getElementById('movies-wrapper');
            const paginationContainer = document.querySelector('.pagination');

            // Event listeners pro vyhled√°v√°n√≠ a filtrov√°n√≠
            searchBtn.addEventListener('click', filterMovies);
            searchInput.addEventListener('keyup', e => {
                if (e.key === 'Enter') filterMovies();
            });
            filterSelect.addEventListener('change', filterMovies);

            // Naƒçten√≠ film≈Ø
            async function loadMovies() {
                // Zobrazit loading indik√°tor
                const loadingIndicator = document.getElementById('loading');
                const moviesWrapper = document.getElementById('movies-wrapper');
                const noResultsDiv = document.getElementById('no-results');
                loadingIndicator.style.display = 'flex';
                moviesWrapper.style.display = 'none';
                noResultsDiv.style.display = 'none';

                try {
                    // Pou≈æ√≠t api_endpoint.php
                    const response = await fetch('api_endpoint.php');
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    const movies = await response.json();

                    // Skr√Ωt loading indik√°tor
                    loadingIndicator.style.display = 'none';
                    moviesWrapper.style.display = ''; // Zobrazit wrapper (bude grid nebo flex podle CSS)

                    // Zpracov√°n√≠ odpovƒõdi - m≈Ø≈æe obsahovat 'status' => 'error'
                    if (movies.status === 'error') {
                        console.error('Chyba p≈ôi naƒç√≠t√°n√≠ film≈Ø:', movies.message);
                        showError('Nepoda≈ôilo se naƒç√≠st filmy: ' + movies.message);
                        handleNoResults(0); // Zobrazit "≈æ√°dn√© v√Ωsledky"
                        return;
                    }

                    if (Array.isArray(movies)) {
                        // Store all movies for pagination
                        allMovies = movies;
                        // Update pagination UI
                        setupPagination();
                        // Display first page of movies
                        displayMoviesPage(currentPage);
                    }
                } catch (error) {
                    console.error('Chyba p≈ôi naƒç√≠t√°n√≠ film≈Ø:', error);
                    showError('Nepoda≈ôilo se naƒç√≠st filmy. Zkuste to pros√≠m znovu.');
                }
            }

            // Function to display a specific page of movies
            function displayMoviesPage(page) {
                // Calculate start and end indices
                const startIndex = (page - 1) * moviesPerPage;
                const endIndex = Math.min(startIndex + moviesPerPage, allMovies.length);

                // Get movies for current page
                const moviesToShow = allMovies.slice(startIndex, endIndex);

                // Display these movies
                updateMoviesUI(moviesToShow);

                // Update active page button
                updateActivePaginationButton();
            }

            // Setup pagination based on total movies
            function setupPagination() {
                // Calculate total pages
                const totalPages = Math.ceil(allMovies.length / moviesPerPage);

                // Clear pagination container
                paginationContainer.innerHTML = '';

                // Add page buttons
                if (totalPages <= 5) {
                    // Show all pages
                    for (let i = 1; i <= totalPages; i++) {
                        addPaginationButton(i);
                    }
                } else {
                    // Show first page
                    addPaginationButton(1);

                    // Show dots or surrounding pages
                    if (currentPage <= 3) {
                        // Close to the beginning
                        for (let i = 2; i <= 4; i++) {
                            if (i <= totalPages) addPaginationButton(i);
                        }
                        if (totalPages > 4) {
                            addPaginationDots();
                            addPaginationButton(totalPages);
                        }
                    } else if (currentPage >= totalPages - 2) {
                        // Close to the end
                        addPaginationDots();
                        for (let i = totalPages - 3; i <= totalPages; i++) {
                            if (i > 1) addPaginationButton(i);
                        }
                    } else {
                        // Middle pages
                        addPaginationDots();
                        addPaginationButton(currentPage - 1);
                        addPaginationButton(currentPage);
                        addPaginationButton(currentPage + 1);
                        addPaginationDots();
                        addPaginationButton(totalPages);
                    }
                }

                // Add next button
                const nextBtn = document.createElement('button');
                nextBtn.className = 'pagination-next';
                nextBtn.innerHTML = '<span>&#8594;</span>';
                nextBtn.addEventListener('click', goToNextPage);
                paginationContainer.appendChild(nextBtn);
            }

            // Helper function to add a pagination button
            function addPaginationButton(pageNum) {
                const btn = document.createElement('button');
                btn.className = 'pagination-btn';
                if (pageNum === currentPage) {
                    btn.classList.add('active');
                }
                btn.textContent = pageNum;
                btn.addEventListener('click', function() {
                    currentPage = pageNum;
                    displayMoviesPage(currentPage);
                    window.scrollTo({ top: 0, behavior: 'smooth' });
                });
                paginationContainer.appendChild(btn);
            }

            // Helper function to add pagination dots
            function addPaginationDots() {
                const dots = document.createElement('span');
                dots.className = 'pagination-dots';
                dots.textContent = '...';
                paginationContainer.appendChild(dots);
            }

            // Update the active pagination button
            function updateActivePaginationButton() {
                const buttons = paginationContainer.querySelectorAll('.pagination-btn');
                buttons.forEach(btn => {
                    if (parseInt(btn.textContent) === currentPage) {
                        btn.classList.add('active');
                    } else {
                        btn.classList.remove('active');
                    }
                });
            }

            // Go to next page
            function goToNextPage() {
                const totalPages = Math.ceil(allMovies.length / moviesPerPage);
                if (currentPage < totalPages) {
                    currentPage++;
                    displayMoviesPage(currentPage);
                    window.scrollTo({ top: 0, behavior: 'smooth' });
                }
            }

            // Aktualizace UI
            function updateMoviesUI(movies) {
                moviesWrapper.innerHTML = '';

                const now = new Date();
                movies.forEach(movie => {
                    // Z√≠sk√°n√≠ data a ƒçasu projekce
                    const screeningDateStr = movie.screening_date; // nap≈ô. "2025-04-28"
                    let screeningTimeStr = movie.screening_time; // nap≈ô. "10:10:00"

                    // Vytvo≈ôen√≠ √∫pln√©ho data a ƒçasu prom√≠t√°n√≠
                    const screeningDateTime = new Date(screeningDateStr + 'T' + screeningTimeStr);

                    // Jednoduch√° kontrola - film je minul√Ω, pokud datum a ƒças prom√≠t√°n√≠ u≈æ uplynuly
                    const isPast = screeningDateTime < now;

                    // Kontrola, zda je film "nadch√°zej√≠c√≠" (zaƒç√≠n√° za v√≠ce ne≈æ 7 dn√≠)
                    const sevenDaysFromNow = new Date(now.getTime() + 7 * 24 * 60 * 60 * 1000);
                    const isUpcoming = screeningDateTime > sevenDaysFromNow;

                    const card = createMovieCard(movie, isPast, isUpcoming);
                    moviesWrapper.appendChild(card);
                });

                setupMobileCardClicks();
                setupTooltips();
            }

            // Filtrov√°n√≠ film≈Ø
            function filterMovies() {
                const searchTerm = searchInput.value.toLowerCase();
                const filterValue = filterSelect.value;

                // Filter the allMovies array
                const filteredMovies = allMovies.filter(movie => {
                    const title = movie.title.toLowerCase();
                    const genre = movie.genre.toLowerCase();

                    // Convert screening_date and screening_time to Date object
                    const screeningDateTime = new Date(movie.screening_date + 'T' + movie.screening_time);
                    const now = new Date();
                    const sevenDaysFromNow = new Date(now.getTime() + 7 * 24 * 60 * 60 * 1000);

                    const isPast = screeningDateTime < now;
                    const isUpcoming = screeningDateTime > sevenDaysFromNow;

                    let matchesFilter = true;
                    switch (filterValue) {
                        case 'upcoming':
                            matchesFilter = isUpcoming;
                            break;
                        case 'now':
                            matchesFilter = !isPast && !isUpcoming;
                            break;
                        case 'past':
                            matchesFilter = isPast;
                            break;
                    }

                    const matchesSearch = title.includes(searchTerm) || genre.includes(searchTerm);
                    return matchesSearch && matchesFilter;
                });

                // Update the UI with filtered results
                if (filteredMovies.length === 0) {
                    handleNoResults(0);
                } else {
                    // Reset to first page whenever filters change
                    currentPage = 1;
                    // Update pagination based on new filtered array
                    allMovies = filteredMovies;
                    setupPagination();
                    // Display first page
                    displayMoviesPage(currentPage);
                }
            }

            // Zobrazen√≠/skryt√≠ zpr√°vy o nenalezen√Ωch filmech
            function handleNoResults(visibleCount) {
                const noResultsDiv = document.getElementById('no-results');
                if (visibleCount === 0) {
                    noResultsDiv.style.display = 'flex'; // Pou≈æ√≠t existuj√≠c√≠ div
                    moviesWrapper.style.display = 'none'; // Skr√Ωt wrapper, pokud nejsou v√Ωsledky
                } else {
                    noResultsDiv.style.display = 'none';
                    moviesWrapper.style.display = ''; // Zobrazit wrapper (bude grid nebo flex podle CSS)
                }
            }

            // Helper function to show error
            function showError(message) {
                alert(message); // Simple error display, you could enhance this
            }

            // Vytvo≈ôen√≠ karty filmu
            function createMovieCard(movie, isPast, isUpcoming) {
                const card = document.createElement('div');
                card.className = `movie-card${isPast ? " past" : ""}${isUpcoming ? " upcoming" : ""}`;

                const times = formatTimes(movie.screening_time);
                // P≈ôed√°v√°me isPast do formatDateRange
                const dateRange = formatDateRange(movie.screening_date, movie, isPast);

                // Pou≈æit√≠ base64 obr√°zku z api_endpoint.php
                const imgSrc = movie.image ? `data:image/jpeg;base64,${movie.image}` : 'https://via.placeholder.com/260x390?text=No+Image';

                card.innerHTML = `
            <div class="movie-image">
                <img src="${imgSrc}" alt="${movie.title}">
                <div class="desktop-reserve">
                    ${isPast ?
                        "<span class='ended-label'>Projekce skonƒçila</span>" :
                        `<a href="reserve.php?id=${movie.id_screening}" class="reserve-btn">Rezervovat</a>`
                    }
                </div>
            </div>
            <div class="movie-content">
                <h3 class="movie-title">${movie.title}</h3>
                <div class="movie-details">
                    <div class="movie-meta">
                        <span class="movie-duration">${movie.duration} min</span>
                        <span class="movie-genre">${movie.genre}</span>
                    </div>
                    <div class="movie-time">
                        <span class="date">${dateRange}</span>
                        ${!isUpcoming && !isPast ? `<span class="time">${times}</span>` : ''}
                    </div>
                </div>
                <div class="mobile-reserve">
                     ${isPast ?
                        "<span class='ended-label'>Projekce skonƒçila</span>" :
                        `<a href="reserve.php?id=${movie.id_screening}" class="reserve-btn">Rezervovat</a>`
                    }
                </div>
            </div>
        `;

        return card;
    }

    // Nastaven√≠ klik√°n√≠ na karty na mobiln√≠ch za≈ô√≠zen√≠ch
    function setupMobileCardClicks() {
        if (window.innerWidth < 768) {
            const movieCards = document.querySelectorAll('.movie-card:not(.past):not(.upcoming)');
            
            movieCards.forEach(card => {
                const reserveBtn = card.querySelector('.mobile-reserve .reserve-btn');
                if (!reserveBtn || reserveBtn.classList.contains('disabled')) return;

                const reserveLink = reserveBtn.getAttribute('href');
                
                card.addEventListener('click', function(e) {
                    if (e.target === reserveBtn || reserveBtn.contains(e.target)) return;
                    window.location.href = reserveLink;
                });
            });
        }
    }

    // Tooltip pro dlouh√© n√°zvy
    function setupTooltips() {
        const movieTitles = document.querySelectorAll('.movie-title');
        movieTitles.forEach(title => {
            if (title.scrollHeight > title.clientHeight) {
                title.setAttribute('title', title.textContent);
            }
        });
    }

    // Helper functions from original code
    function formatTimes(timeStr) {
        try {
            const times = JSON.parse(timeStr);
            return times.join(', ');
        } catch {
            return timeStr;
        }
    }

    function formatDateRange(dateStr, movie, isPastFilm) {
        const date = new Date(dateStr);
        const now = new Date();
        
        // Pou≈æit√≠ isPastFilm parametru nam√≠sto prost√© kontroly date < now
        if (isPastFilm) {
            return `Skonƒçilo ${date.toLocaleDateString('cs-CZ')}`;
        }
        
        if (date > new Date(now.getTime() + 7 * 24 * 60 * 60 * 1000)) {
            return `Od ${date.toLocaleDateString('cs-CZ')}`;
        }

        const endDate = new Date(date);
        endDate.setDate(endDate.getDate() + 14);
        
        return `${date.toLocaleDateString('cs-CZ')} - ${endDate.toLocaleDateString('cs-CZ')}`;
    }

    // Event listener pro zmƒõnu velikosti okna
    window.addEventListener('resize', function() {
        setupMobileCardClicks();
        setupTooltips();
    });
});
// File: ./js/my-reservations.js
document.addEventListener('DOMContentLoaded', function() {
            // Naƒçten√≠ rezervac√≠ p≈ôi startu
            loadReservations();

            // P≈ôep√≠n√°n√≠ z√°lo≈æek
            const tabBtns = document.querySelectorAll('.tab-btn');
            const tabContents = document.querySelectorAll('.tab-content');

            tabBtns.forEach(btn => {
                btn.addEventListener('click', function() {
                    const tabId = this.getAttribute('data-tab');
                    switchTab(tabId);
                });
            });

            function switchTab(tabId) {
                // Aktualizace tlaƒç√≠tek
                tabBtns.forEach(b => b.classList.remove('active'));
                document.querySelector(`[data-tab="${tabId}"]`).classList.add('active');

                // Aktualizace obsahu
                tabContents.forEach(c => c.classList.add('hidden'));
                const activeTab = document.getElementById(`${tabId}-tab`);
                activeTab.classList.remove('hidden');

                // Kontrola pr√°zdn√©ho stavu
                checkEmptyState(activeTab);
            }

            // Naƒçten√≠ rezervac√≠
            async function loadReservations() {
                // Zobrazit loading indik√°tor
                const loadingIndicator = document.getElementById('loading');
                const tabContents = document.querySelectorAll('.tab-content');
                loadingIndicator.style.display = 'flex';
                tabContents.forEach(c => c.classList.add('hidden')); // Skr√Ωt z√°lo≈æky bƒõhem naƒç√≠t√°n√≠

                try {
                    const response = await fetch('reservation_handlers.php');
                    const result = await response.json();

                    if (response.ok && Array.isArray(result)) {
                        updateReservationsUI(result);
                        // Aktivujeme z√°lo≈æku "aktu√°ln√≠"
                        document.querySelector('[data-tab="upcoming"]').click();
                    } else {
                        console.error('Chyba p≈ôi naƒç√≠t√°n√≠ rezervac√≠:', result);
                        const errorMessage = result && result.message ? result.message : 'Nepoda≈ôilo se naƒç√≠st rezervace. Zkuste to pros√≠m znovu.';
                        alert(errorMessage);
                        updateReservationsUI([]);
                    }
                } catch (error) {
                    console.error('Chyba p≈ôi zpracov√°n√≠ odpovƒõdi rezervac√≠:', error);
                    alert('Do≈°lo k chybƒõ p≈ôi komunikaci se serverem. Zkuste to pros√≠m znovu.');
                } finally {
                    // Skr√Ωt loading indik√°tor po naƒçten√≠
                    const loadingIndicator = document.getElementById('loading');
                    if (loadingIndicator) loadingIndicator.style.display = 'none';
                    const tabContents = document.querySelectorAll('.tab-content');
                    tabContents.forEach(c => c.classList.remove('hidden')); // Zobrazit z√°lo≈æky po naƒç√≠t√°n√≠
                }
            }

            // Aktualizace UI rezervac√≠
            function updateReservationsUI(reservations) {
                const upcomingTab = document.getElementById('upcoming-tab');
                const pastTab = document.getElementById('past-tab');

                // Vyƒçist√≠me kontejnery
                upcomingTab.querySelector('.reservation-list').innerHTML = '';
                pastTab.querySelector('.reservation-list').innerHTML = '';

                const now = new Date();
                let upcomingCount = 0;
                let pastCount = 0;

                reservations.forEach(reservation => {
                    try {
                        // Vytvo≈ôen√≠ kompletn√≠ho datetime z datumu a ƒçasu projekce
                        let screeningDate = reservation.screening_date;
                        let screeningTime = reservation.screening_time;

                        // Zpracov√°n√≠ ƒçasu prom√≠t√°n√≠
                        try {
                            const parsedTime = JSON.parse(screeningTime);
                            if (Array.isArray(parsedTime) && parsedTime.length > 0) {
                                screeningTime = parsedTime[0];
                            }
                        } catch (e) {
                            // Pokud nen√≠ JSON, pou≈æij tak jak je
                        }

                        // Vytvo≈ô√≠me datum prom√≠t√°n√≠
                        const screeningDateTime = new Date(`${screeningDate}T${screeningTime}`);

                        // JEDNODUCH√Å LOGIKA: Pokud datum prom√≠t√°n√≠ je v minulosti, je to historie
                        const isPast = screeningDateTime < now;

                        // Vytvo≈ô√≠me kartu rezervace
                        const card = createReservationCard(reservation, isPast);

                        // Vlo≈æ√≠me do spr√°vn√© z√°lo≈æky
                        if (isPast) {
                            pastTab.querySelector('.reservation-list').appendChild(card);
                            pastCount++;
                        } else {
                            upcomingTab.querySelector('.reservation-list').appendChild(card);
                            upcomingCount++;
                        }
                    } catch (e) {
                        console.error("Chyba p≈ôi zpracov√°n√≠ rezervace:", e);
                    }
                });

                console.log(`Aktu√°ln√≠: ${upcomingCount}, Historie: ${pastCount}`);

                // Zkontrolujeme pr√°zdn√© stavy pro obƒõ z√°lo≈æky
                if (upcomingCount === 0) {
                    showEmptyState(upcomingTab);
                }

                if (pastCount === 0) {
                    showEmptyState(pastTab);
                }
            }

            // Zobrazen√≠ pr√°zdn√©ho stavu
            function showEmptyState(tab) {
                const emptyState = document.createElement('div');
                emptyState.className = 'empty-state';
                emptyState.innerHTML = `
            <div class="empty-icon">&#128465;</div>
            <h3>≈Ω√°dn√© rezervace</h3>
            <p>Zat√≠m nem√°te ≈æ√°dn√© rezervace v t√©to kategorii.</p>
            <a href="index.php" class="browse-btn">Prohl√©dnout program</a>
        `;

                const reservationList = tab.querySelector('.reservation-list');
                reservationList.innerHTML = '';
                reservationList.appendChild(emptyState);
            }

            // Kontrola pr√°zdn√©ho stavu
            function checkEmptyState(tab) {
                const cards = tab.querySelectorAll('.reservation-card');
                if (cards.length === 0) {
                    showEmptyState(tab);
                }
            }

            // Vytvo≈ôen√≠ karty rezervace s lep≈°√≠ podporou responzivity
            function createReservationCard(reservation, isPast) {
                const card = document.createElement('div');
                card.className = `reservation-card${isPast ? ' past' : ''}`;
                card.id = `reservation-${reservation.id_reservation}`;

                const screeningDate = new Date(reservation.screening_date);
                const formattedDate = screeningDate.toLocaleDateString('cs-CZ', {
                    weekday: 'long',
                    day: 'numeric',
                    month: 'numeric',
                    year: 'numeric'
                });

                card.innerHTML = `
        <div class="reservation-header">
            <div class="movie-thumbnail-container">
                <img src="data:image/jpeg;base64,${reservation.image}" alt="${reservation.movie_title || reservation.title}" class="movie-thumbnail">
            </div>
            <div class="reservation-info">
                <h3 class="movie-title">${reservation.movie_title || reservation.title}</h3>
                <div class="movie-details">
                    <span class="movie-genre">${reservation.genre}</span>
                    <span class="movie-duration">${reservation.duration} min</span>
                </div>
                <div class="reservation-date">
                    <span class="date-icon">&#128197;</span>
                    <span>${formattedDate}</span>
                    <span class="time-icon">&#128336;</span>
                    <span>${formatTime(reservation.screening_time)}</span>
                </div>
            </div>
        </div>
        <div class="reservation-seats">
            <h4>Rezervovan√° m√≠sta</h4>
            <div class="seats-grid">
                <div class="seat">
                    <span class="seat-number">${reservation.seat_number}</span>
                    <span class="seat-label">Sedadlo</span>
                </div>
            </div>
        </div>
        <div class="reservation-actions">
            <a href="reserve.php?id=${reservation.id_screening}" class="view-btn">Zobrazit rezervaci</a>
            ${!isPast ? `<button class="cancel-btn" data-id="${reservation.id_reservation}">Zru≈°it rezervaci</button>` : ''}
        </div>
    `;

        // P≈ôid√°n√≠ event listeneru pro zru≈°en√≠ rezervace
        const cancelBtn = card.querySelector('.cancel-btn');
        if (cancelBtn) {
            cancelBtn.addEventListener('click', function() {
                showCancelConfirmation(reservation.id_reservation, reservation.movie_title || reservation.title); 
            });
        }

        return card;
    }

    // Zobrazen√≠ potvrzen√≠ zru≈°en√≠
    function showCancelConfirmation(reservationId, movieTitle) {
        const cancelModal = document.getElementById('cancel-modal');
        document.getElementById('cancel-movie-name').textContent = movieTitle || 'tento film';
        
        const confirmBtn = cancelModal.querySelector('.confirm-cancel');
        confirmBtn.onclick = () => cancelReservation(reservationId);

        cancelModal.classList.add('active');
        document.body.style.overflow = 'hidden';
    }

    // Zru≈°en√≠ rezervace
    async function cancelReservation(reservationId) {
        try {
            const formData = new FormData();
            formData.append('action', 'cancel');
            formData.append('reservation_id', reservationId);

            const response = await fetch('reservation_handlers.php', {
                method: 'POST',
                body: formData
            });

            const result = await response.json();

            if (result.status === 'success') {
                // Odstranƒõn√≠ karty rezervace
                const card = document.getElementById(`reservation-${reservationId}`);
                if (card) {
                    const parentTab = card.closest('.tab-content');
                    card.remove();
                    
                    // Kontrola pr√°zdn√©ho stavu
                    checkEmptyState(parentTab);
                }
                
                // Zav≈ôen√≠ mod√°lu
                closeModals();
                
                alert('Rezervace byla √∫spƒõ≈°nƒõ zru≈°ena.');
            } else {
                throw new Error(result.message || 'Nepoda≈ôilo se zru≈°it rezervaci.');
            }
        } catch (error) {
            console.error('Chyba p≈ôi ru≈°en√≠ rezervace:', error);
            alert(error.message || 'Do≈°lo k chybƒõ p≈ôi ru≈°en√≠ rezervace.');
            closeModals();
        }
    }

    // Helper funkce
    function formatTime(timeStr) {
        try {
            const times = JSON.parse(timeStr);
            return times.join(', ');
        } catch {
            return timeStr;
        }
    }

    // Zav√≠r√°n√≠ mod√°l≈Ø
    const closeBtns = document.querySelectorAll('.close-btn');
    const secondaryBtns = document.querySelectorAll('.secondary-btn');

    closeBtns.forEach(btn => {
        btn.addEventListener('click', closeModals);
    });

    secondaryBtns.forEach(btn => {
        btn.addEventListener('click', closeModals);
    });

    function closeModals() {
        const cancelModal = document.getElementById('cancel-modal');
        if (cancelModal) {
            cancelModal.classList.remove('active');
            document.body.style.overflow = '';
        }
    }

    // Zav≈ôen√≠ mod√°l≈Ø p≈ôi kliknut√≠ mimo
    window.addEventListener('click', function(e) {
        const cancelModal = document.getElementById('cancel-modal');
        if (e.target === cancelModal) {
            closeModals();
        }
    });
});
// File: ./js/reserve.js
document.addEventListener('DOMContentLoaded', function() {
    const seats = document.querySelectorAll('.room-container .seat');
    const reserveBtn = document.getElementById('reserve-btn');
    const screeningId = new URLSearchParams(window.location.search).get('id');

    // Odstranƒõn√≠ nebo upraven√≠ info textu
    const selectionInfo = document.querySelector('.selection-info');
    if (selectionInfo) {
        selectionInfo.innerHTML = '<p>Vyberte m√≠sto, kter√© si p≈ôejete rezervovat.</p>';
    }

    let selectedSeat = null;
    let userHasReservation = false;
    let userReservationSeatId = null;

    // Naƒçten√≠ dat p≈ôi naƒçten√≠ str√°nky
    init();

    async function init() {
        try {
            // Nejd≈ô√≠ve zkontrolujeme, zda u≈æivatel ji≈æ nem√° rezervaci
            await checkExistingReservation();
            // Pot√© naƒçteme obsazen√° m√≠sta
            await loadOccupiedSeats();
        } catch (error) {
            console.error('Chyba p≈ôi inicializaci:', error);
            alert('Do≈°lo k chybƒõ p≈ôi naƒç√≠t√°n√≠. Pros√≠m, obnovte str√°nku.');
        }
    }

    // Kontrola, zda u≈æivatel ji≈æ m√° rezervaci na toto prom√≠t√°n√≠
    async function checkExistingReservation() {
        try {
            const formData = new FormData();
            formData.append('action', 'get_user_reservation');
            formData.append('screening_id', screeningId);

            const response = await fetch('reservation_handlers.php', {
                method: 'POST',
                body: formData
            });

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const result = await response.json();
            console.log("Kontrola existuj√≠c√≠ rezervace:", result);

            // Opraven√° kontrola
            if (result && result.found === true && result.id_seat && result.seat_number) {
                userHasReservation = true;
                userReservationSeatId = result.id_seat;

                // Aktualizujeme text a tlaƒç√≠tko
                if (selectionInfo) {
                    selectionInfo.innerHTML = `<p>M√°te rezervovan√© sedadlo ƒç. <strong>${result.seat_number}</strong>. Vyberte jin√© m√≠sto pro p≈ôesun rezervace.</p>`;
                }
                if (reserveBtn) {
                    reserveBtn.textContent = "P≈ôesunout rezervaci";
                }
            } else {
                userHasReservation = false;
                userReservationSeatId = null;

                // Aktualizujeme text a tlaƒç√≠tko
                if (selectionInfo) {
                    selectionInfo.innerHTML = '<p>Vyberte m√≠sto, kter√© si p≈ôejete rezervovat.</p>';
                }
                if (reserveBtn) {
                    reserveBtn.textContent = "Rezervovat m√≠sto";
                }
            }
        } catch (error) {
            console.error('Chyba p≈ôi kontrole existuj√≠c√≠ rezervace:', error);
            userHasReservation = false;
            userReservationSeatId = null;

            // V p≈ô√≠padƒõ chyby nastav√≠me text pro vytvo≈ôen√≠ nov√© rezervace
            if (selectionInfo) {
                selectionInfo.innerHTML = '<p>Vyberte m√≠sto, kter√© si p≈ôejete rezervovat.</p>';
            }
            if (reserveBtn) {
                reserveBtn.textContent = "Rezervovat m√≠sto";
            }
            throw error;
        }
    }

    // Funkce pro naƒçten√≠ obsazen√Ωch m√≠st
    async function loadOccupiedSeats() {
        console.log("Naƒç√≠t√°m obsazen√° m√≠sta pro screening ID:", screeningId);
        if (!screeningId) {
            console.error("Chyb√≠ screening ID v URL!");
            alert("Chyba: Chyb√≠ identifik√°tor prom√≠t√°n√≠.");
            seats.forEach(seat => {
                seat.classList.add('sold');
                seat.style.cursor = 'not-allowed';
            });
            return;
        }

        try {
            const formData = new FormData();
            formData.append('action', 'get_available_seats');
            formData.append('screening_id', screeningId);

            const response = await fetch('reservation_handlers.php', {
                method: 'POST',
                body: formData
            });

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const result = await response.json();
            console.log("Obdr≈æen√° data o sedadlech:", result);

            // Kontrola chybov√© zpr√°vy
            if (typeof result === 'object' && result !== null && result.status === 'error') {
                console.error('Chyba z backendu:', result.message);

                if (result.message.includes("Prom√≠t√°n√≠ ji≈æ zaƒçalo")) {
                    document.querySelector('.room-container').innerHTML =
                        '<div style="text-align: center; padding: 50px; background: rgba(0,0,0,0.3); border-radius: 10px;">' +
                        '<h2>Projekce skonƒçila</h2>' +
                        '<p>Rezervace ji≈æ nen√≠ mo≈æn√°.</p>' +
                        '</div>';
                    if (selectionInfo) selectionInfo.style.display = 'none';
                    if (reserveBtn) reserveBtn.style.display = 'none';
                } else {
                    alert('Chyba: ' + result.message);
                }

                disableAllSeats();
                return;
            }

            // Reset v≈°ech sedadel
            seats.forEach(seat => {
                // Odstran√≠me v≈°echny t≈ô√≠dy a labely
                seat.classList.remove('sold', 'selected', 'user-reserved');
                const usernameLabel = seat.querySelector('.username-label');
                if (usernameLabel) usernameLabel.remove();

                // V√Ωchoz√≠ styl pro v≈°echna sedadla
                seat.style.cursor = 'pointer';
            });

            // Oznaƒçen√≠ obsazen√Ωch sedadel a p≈ôid√°n√≠ jmen
            if (result.occupied && Array.isArray(result.occupied)) {
                result.occupied.forEach(occupiedSeat => {
                    const seat = document.getElementById('seat' + occupiedSeat.id_seat);
                    if (seat) {
                        // Zkontrolujeme, zda toto sedadlo pat≈ô√≠ aktu√°ln√≠mu u≈æivateli
                        const isUserSeat = userHasReservation && occupiedSeat.id_seat == userReservationSeatId;

                        if (isUserSeat) {
                            // Sedadlo pat≈ô√≠ aktu√°ln√≠mu u≈æivateli
                            seat.classList.add('user-reserved');
                            seat.classList.remove('sold');
                            seat.style.cursor = 'default';

                            // P≈ôid√°n√≠ speci√°ln√≠ jmenovky pro vlastn√≠ rezervaci
                            const usernameLabel = document.createElement('div');
                            usernameLabel.className = 'username-label user-label';
                            usernameLabel.textContent = occupiedSeat.username;
                            seat.insertBefore(usernameLabel, seat.firstChild);
                        } else {
                            // Obsazen√© m√≠sto jin√Ωm u≈æivatelem
                            seat.classList.add('sold');
                            seat.style.cursor = 'not-allowed';

                            // P≈ôid√°n√≠ jmenovky s u≈æivatelsk√Ωm jm√©nem
                            if (occupiedSeat.username) {
                                const usernameLabel = document.createElement('div');
                                usernameLabel.className = 'username-label';
                                usernameLabel.textContent = occupiedSeat.username;
                                seat.insertBefore(usernameLabel, seat.firstChild);
                            }
                        }
                    }
                });
            }

            updateUI();

        } catch (error) {
            console.error('Chyba p≈ôi fetchov√°n√≠/zpracov√°n√≠ obsazen√Ωch m√≠st:', error);
            alert('Do≈°lo k chybƒõ p≈ôi naƒç√≠t√°n√≠ dostupnosti m√≠st. Zkuste obnovit str√°nku.');
            disableAllSeats();
        }
    }

    // Pomocn√° funkce pro zak√°z√°n√≠ v≈°ech sedadel
    function disableAllSeats() {
        seats.forEach(seat => {
            seat.classList.add("sold");
            seat.style.cursor = "not-allowed";
        });
        if (reserveBtn) reserveBtn.disabled = true;
    }

    // Event listenery pro sedadla
    seats.forEach(seat => {
        seat.addEventListener("click", function() {
            // Ignorujeme kliknut√≠ na prodan√° m√≠sta a na vlastn√≠ rezervaci
            if (this.classList.contains("sold") || this.classList.contains("user-reserved")) {
                return;
            }

            // Odznaƒç√≠me p≈ôedchoz√≠ vybran√© sedadlo
            if (selectedSeat) {
                document.getElementById(selectedSeat).classList.remove('selected');
            }

            // Oznaƒç√≠me nov√© sedadlo
            this.classList.add("selected");
            selectedSeat = this.id;

            updateUI();
        });
    });

    // Aktualizace UI
    function updateUI() {
        // Aktivace/deaktivace tlaƒç√≠tka rezervace
        if (reserveBtn) {
            reserveBtn.disabled = !selectedSeat;

            // Aktualizace textu tlaƒç√≠tka podle toho, zda jde o novou rezervaci nebo p≈ôesun
            if (userHasReservation) {
                reserveBtn.textContent = "P≈ôesunout rezervaci";
            } else {
                reserveBtn.textContent = "Rezervovat m√≠sto";
            }
        }
    }

    // Vytvo≈ôen√≠ rezervace nebo p≈ôesun existuj√≠c√≠
    if (reserveBtn) {
        reserveBtn.addEventListener('click', async function() {
            if (!selectedSeat) {
                alert('Pros√≠m vyberte m√≠sto.');
                return;
            }

            const originalBtnText = this.textContent;
            this.disabled = true;
            this.textContent = userHasReservation ? "P≈ôesouv√°m..." : "Rezervuji...";

            try {
                const seatId = selectedSeat.replace('seat', '');

                const formData = new FormData();
                formData.append('action', 'create');
                formData.append('screening_id', screeningId);
                formData.append('seat_ids[]', seatId);

                const response = await fetch('reservation_handlers.php', {
                    method: 'POST',
                    body: formData
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                const result = await response.json();

                if (result.status === 'error') {
                    throw new Error(result.message);
                }

                // Oznamujeme √∫spƒõch
                alert(result.message || 'Rezervace byla √∫spƒõ≈°nƒõ vytvo≈ôena!');

                // Resetujeme a znovu naƒçteme data
                selectedSeat = null;

                // Znovu inicializujeme str√°nku
                await init();

            } catch (error) {
                console.error('Chyba p≈ôi vytv√°≈ôen√≠/p≈ôesouv√°n√≠ rezervace:', error);
                alert(error.message || 'Do≈°lo k chybƒõ p≈ôi zpracov√°n√≠ rezervace.');
                this.disabled = false;
                this.textContent = originalBtnText;
            }
        });
    }
});
// File: ./js/toast.js
document.addEventListener('DOMContentLoaded', function() {
    // Vytvo≈ôen√≠ kontejneru pro toast notifikace
    const toastContainer = document.createElement('div');
    toastContainer.className = 'toast-container';
    document.body.appendChild(toastContainer);

    // Glob√°ln√≠ funkce pro zobrazen√≠ toast notifikace
    window.showToast = function(message, type = 'success', duration = 3000) {
        // Vytvo≈ôen√≠ toast prvku
        const toast = document.createElement('div');
        toast.className = `toast toast-${type}`;

        // P≈ôid√°n√≠ obsahu toast notifikace
        toast.innerHTML = `
            ${message}
            <button class="toast-close">&times;</button>
        `;

        // P≈ôid√°n√≠ toast notifikace do kontejneru
        toastContainer.appendChild(toast);

        // P≈ôid√°n√≠ event listeneru pro zav√≠rac√≠ tlaƒç√≠tko
        const closeBtn = toast.querySelector('.toast-close');
        closeBtn.addEventListener('click', function() {
            removeToast(toast);
        });

        // Automatick√© odstranƒõn√≠ toast notifikace po urƒçit√© dobƒõ
        setTimeout(() => {
            if (document.body.contains(toast)) {
                removeToast(toast);
            }
        }, duration);
    };

    // Funkce pro odstranƒõn√≠ toast notifikace
    function removeToast(toast) {
        toast.style.opacity = '0';
        toast.style.transform = 'translateX(120%)';

        // Smazat DOM element po dokonƒçen√≠ animace
        setTimeout(() => {
            if (document.body.contains(toast)) {
                toastContainer.removeChild(toast);
            }
        }, 400);
    }

    // Kontrola URL parametr≈Ø pro zobrazen√≠ toast notifikace
    function checkUrlForMessages() {
        const urlParams = new URLSearchParams(window.location.search);

        if (urlParams.has('toast_success')) {
            showToast(decodeURIComponent(urlParams.get('toast_success')), 'success');
            // Odstranƒõn√≠ parametru z URL bez p≈ôesmƒõrov√°n√≠
            removeParam('toast_success');
        }

        if (urlParams.has('toast_error')) {
            showToast(decodeURIComponent(urlParams.get('toast_error')), 'error');
            // Odstranƒõn√≠ parametru z URL bez p≈ôesmƒõrov√°n√≠
            removeParam('toast_error');
        }

        if (urlParams.has('toast_info')) {
            showToast(decodeURIComponent(urlParams.get('toast_info')), 'info');
            // Odstranƒõn√≠ parametru z URL bez p≈ôesmƒõrov√°n√≠
            removeParam('toast_info');
        }
    }

    // Funkce pro odstranƒõn√≠ parametru z URL
    function removeParam(param) {
        const url = new URL(window.location.href);
        url.searchParams.delete(param);
        window.history.replaceState({}, '', url);
    }

    // Kontrola URL p≈ôi naƒçten√≠ str√°nky
    checkUrlForMessages();
});
// File: ./login.php
<?php
// File: login.php
require_once 'session_check.php'; // Zmƒõna na session_check, kter√Ω inicializuje $auth
global $auth; // Zp≈ô√≠stupnƒõn√≠ glob√°ln√≠ instance $auth

// Redirect if already logged in
if ($auth->isLoggedIn()) {
    header("Location: " . ($auth->isAdmin() ? 'admin.php' : 'index.php'));
    exit;
}

// Check for error/success messages
?>
<!DOCTYPE html>
<html lang="cs">
<head>
    <link rel="stylesheet" href="./css/toast.css">
    <script src="./js/toast.js"></script>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>P≈ôihl√°≈°en√≠ | CineBukay</title>
    <link href="https://fonts.googleapis.com/css?family=Lato&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="./css/vestylu.css">
    <!-- Link na login.css odstranƒõn, styly jsou v vestylu.css -->
</head>
<body>
    <header class="site-header">
      <h1>CineBukay</h1>
    </header>

    <div class="auth-container">
        <div class="auth-box">
            <div class="auth-header">
                <h1>Rezervaƒçn√≠ Syst√©m</h1>
                <div class="auth-tabs">
                    <button class="auth-tab active" data-tab="login">P≈ôihl√°≈°en√≠</button>
                    <button class="auth-tab" data-tab="register">Registrace</button>
                </div>
            </div>

            <div class="auth-form-container">
                <!-- Login Form -->
                <form id="login-form" class="auth-form active">
                    <div class="form-group">
                        <label for="login-username">P≈ôezd√≠vka</label>
                        <input type="text" id="login-username" name="username" required>
                    </div>
                    
                    <div class="form-group">
                        <label for="login-password">Heslo</label>
                        <input type="password" id="login-password" name="password" required>
                    </div>
                    
                    <div class="form-group checkbox">
                        <input type="checkbox" id="remember-me" name="remember">
                        <label for="remember-me">Zapamatovat si mƒõ</label>
                    </div>
                    
                    <div class="form-group">
                        <button type="submit" class="submit-btn">P≈ôihl√°sit se</button>
                    </div>
                </form>

                <!-- Register Form -->
                <form id="register-form" class="auth-form">
                    <div class="form-group">
                        <label for="register-username">P≈ôezd√≠vka</label>
                        <input type="text" id="register-username" name="username" required>
                    </div>
                    
                    <div class="form-group">
                        <label for="register-password">Heslo</label>
                        <input type="password" id="register-password" name="password" required>
                    </div>
                    
                    <div class="form-group">
                        <label for="register-password-confirm">Potvrzen√≠ hesla</label>
                        <input type="password" id="register-password-confirm" name="password_confirm" required>
                    </div>
                    
                    <div class="form-group checkbox">
                        <input type="checkbox" id="agree-terms" name="agree_terms" required>
                        <label for="agree-terms">Souhlas√≠m s <a href="#"> podm√≠nkami</a></label>
                    </div>
                    
                    <div class="form-group">
                        <button type="submit" class="submit-btn">Registrovat se</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
    
    <script src="./js/login.js"></script>
    <script src="./js/common.js"></script>
<?php
// Kontrola toast zpr√°vy ze session
$toastMessage = getToastMessage();
if ($toastMessage): 
?>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        showToast('<?php echo addslashes($toastMessage['message']); ?>', '<?php echo $toastMessage['type']; ?>');
    });
</script>
<?php endif; ?>
</body>
</html>

// File: ./my-reservations.php
<?php
require_once __DIR__ . '/db_config.php'; // Needed for Database class auto-loading config
require_once __DIR__ . '/src/Auth.php';

$auth = new Auth();
$auth->requireLogin(); // Ensure user is logged in to access this page

// Optionally, get user data if needed for the page header/menu later
$currentUser = $auth->getCurrentUser(); 
?>
<!DOCTYPE html>
<html lang="cs">
<head>
    <link rel="stylesheet" href="./css/toast.css">
    <script src="./js/toast.js"></script>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Moje rezervace | CineBukay</title>
    <link href="https://fonts.googleapis.com/css?family=Lato&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="./css/vestylu.css">
    <link rel="stylesheet" href="./css/my-reservations.css">
</head>
<body>
    <header class="site-header">
        <div class="back-button">
            <a href="index.php" id="back-link">
                <span class="back-arrow">&#8592;</span>
                <span class="back-text">Zpƒõt na program</span>
            </a>
        </div>
        <?php
        require_once 'session_check.php';
        $userMenu = getUserMenuHTML();
        echo $userMenu;
        ?>
    </header>

    <main class="reservations-container">
        <h1 class="page-title">Moje rezervace</h1>
        
        <div class="tabs">
            <button class="tab-btn active" data-tab="upcoming">Aktu√°ln√≠</button>
            <button class="tab-btn" data-tab="past">Historie</button>
        </div>
        
<!-- Loading indik√°tor -->
<div id="loading" class="loading-state">
    <div class="loading-spinner"></div>
    <p>Naƒç√≠t√°m rezervace...</p>
</div>
<div class="tab-content" id="upcoming-tab">
            <!-- Aktu√°ln√≠ rezervace budou naƒçteny pomoc√≠ JS -->
            <div class="reservation-list">
                <!-- Obsah bude dynamicky vlo≈æen -->
            </div>
        </div>
        
        <div class="tab-content hidden" id="past-tab">
            <!-- Historie rezervac√≠ bude naƒçtena pomoc√≠ JS -->
            <div class="reservation-list">
                <!-- Obsah bude dynamicky vlo≈æen -->
            </div>
        </div>
        
        <!-- Pr√°zdn√Ω stav -->
        <div class="empty-state hidden">
            <div class="empty-icon">&#128465;</div>
            <h3>≈Ω√°dn√© rezervace</h3>
            <p>Zat√≠m nem√°te ≈æ√°dn√© rezervace v t√©to kategorii.</p>
            <a href="index.php" class="browse-btn">Prohl√©dnout program</a>
        </div>
    </main>

    <!-- Modal pro potvrzen√≠ zru≈°en√≠ rezervace -->
    <div class="modal" id="cancel-modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">Zru≈°en√≠ rezervace</h3>
                <button class="close-btn">&times;</button>
            </div>
            <div class="modal-body">
                <p>Opravdu chcete zru≈°it rezervaci na film <span id="cancel-movie-name">Deadpool a Wolverine</span>?</p>
                <div class="modal-actions">
                    <button class="secondary-btn">Zpƒõt</button>
                    <button class="primary-btn confirm-cancel">Zru≈°it rezervaci</button>
                </div>
            </div>
        </div>
    </div>



    <script src="./js/my-reservations.js"></script>
    <script src="./js/common.js"></script>
<?php
// Kontrola toast zpr√°vy ze session
$toastMessage = getToastMessage();
if ($toastMessage): 
?>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        showToast('<?php echo addslashes($toastMessage['message']); ?>', '<?php echo $toastMessage['type']; ?>');
    });
</script>
<?php endif; ?>
</body>
</html>

// File: ./reservation_handlers.php
<?php
// File: reservation_handlers.php
// Handles reservation related requests. Delegates logic to Reservation class.

require_once __DIR__ . '/src/Reservation.php'; // Include Reservation class
require_once __DIR__ . '/src/Auth.php';        // Auth is needed by Reservation constructor
require_once __DIR__ . '/db_config.php';      // Needed for Database class auto-loading config

// Instantiate Auth first (starts session)
$auth = new Auth();
// Instantiate Reservation, passing the Auth instance
$reservationService = new Reservation($auth);

// --- Request Handling ---
header('Content-Type: application/json');

// Handle POST requests
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    // All POST actions require login (checked within Reservation methods or requireLogin below)
    // requireLogin(); // Can be called here, or rely on checks within methods

    $action = $_POST['action'] ?? '';
    $response = ['status' => 'error', 'message' => 'Neplatn√° akce.'];

    try {
        switch ($action) {
            case 'create':
                // Use the new method for multiple reservations
                if (isset($_POST['screening_id']) && isset($_POST['seat_ids']) && is_array($_POST['seat_ids'])) {
                     // Basic validation: ensure seat_ids are integers
                    $seatIds = array_map('intval', $_POST['seat_ids']);
                    $seatIds = array_filter($seatIds, function($id) { return $id > 0; }); // Remove non-positive IDs
                    
                    if (!empty($seatIds)) {
                        $response = $reservationService->createMultipleReservations($_POST['screening_id'], $seatIds);
                    } else {
                        $response = ['status' => 'error', 'message' => 'Nebyla vybr√°na platn√° m√≠sta.'];
                    }
                } else {
                    $response = ['status' => 'error', 'message' => 'Chyb√≠ ID prom√≠t√°n√≠ nebo pole ID m√≠st (seat_ids).'];
                }
                break;

            case 'cancel':
                if (isset($_POST['reservation_id'])) {
                    $response = $reservationService->cancelReservation($_POST['reservation_id']);
                } else {
                     $response = ['status' => 'error', 'message' => 'Chyb√≠ ID rezervace pro zru≈°en√≠.'];
                }
                break;

            case 'get_available_seats':
                if (isset($_POST['screening_id'])) {
                    $screeningId = $_POST['screening_id'];
                    $availableSeats = $reservationService->getAvailableSeats($screeningId);

                    // Check if it's an error object with a specific message
                    if (is_object($availableSeats) && isset($availableSeats->status) && $availableSeats->status === 'error' && strpos($availableSeats->message, 'Prom√≠t√°n√≠ ji≈æ zaƒçalo') !== false) {
                        // Propagate the error message
                        $response = (array) $availableSeats; // Cast object to array
                    } else {
                        $response = $availableSeats; // Return the array of available seats
                    }
                } else {
                    $response = ['status' => 'error', 'message' => 'Chyb√≠ ID prom√≠t√°n√≠ pro naƒçten√≠ m√≠st.'];
                }
                break;
            case 'get_user_reservation':
                if (isset($_POST['screening_id'])) {
                    $screeningId = $_POST['screening_id'];
        $screeningId = $_POST['screening_id'];
        $reservationData = $reservationService->getUserReservationForScreening($screeningId);
        
        // D≈Økladnƒõj≈°√≠ kontrola v√Ωsledku
        if ($reservationData && isset($reservationData['id_reservation']) && 
            isset($reservationData['id_seat']) && isset($reservationData['seat_number'])) {
            
            $response = $reservationData;
            $response['found'] = true;
        } else {
            $response = ['found' => false];
        }
    } else {
        $response = ['status' => 'error', 'message' => 'Chyb√≠ ID prom√≠t√°n√≠.'];
    }
    break;
            default:
                $response = ['status' => 'error', 'message' => 'Nezn√°m√° akce.'];
                break;
        }
    } catch (Exception $e) {
        error_log("Reservation Handler Error: " . $e->getMessage());
        $response = ['status' => 'error', 'message' => 'Do≈°lo k syst√©mov√© chybƒõ.'];
    }

    echo json_encode($response);
    exit;
}

// Handle GET requests (for fetching user's reservations)
if ($_SERVER['REQUEST_METHOD'] === 'GET') {
    // requireLogin(); // Checked within getReservations method
    try {
        $response = $reservationService->getReservations();
    } catch (Exception $e) {
         error_log("Reservation Handler Error (GET): " . $e->getMessage());
         $response = ['status' => 'error', 'message' => 'Do≈°lo k syst√©mov√© chybƒõ p≈ôi naƒç√≠t√°n√≠ rezervac√≠.'];
    }
    echo json_encode($response);
    exit;
}

// If no valid action/method
http_response_code(400); // Bad Request
echo json_encode(['status' => 'error', 'message' => 'Neplatn√Ω po≈æadavek nebo metoda.']);
exit;

/* --- Old procedural functions removed ---

function getReservations($userId = null) {
    try {
        $pdo = Database::getConnection(); // Use Database class
        $sql = "
            SELECT r.id_reservation, r.id_user, r.id_screening, r.id_seat, r.status, r.reservation_time,
                   s.title, s.screening_date, s.screening_time, s.genre, s.duration, encode(s.image, 'base64') as image,
                   seat.seat_number
            FROM reservations r
            JOIN screenings s ON r.id_screening = s.id_screening
            JOIN seats seat ON r.id_seat = seat.id_seat
        ";
        
        if ($userId) {
            $sql .= " WHERE r.id_user = :userId";
            $stmt = $pdo->prepare($sql);
            $stmt->execute(['userId' => $userId]);
        } else {
*/
?>

// File: ./reserve.php
<!DOCTYPE html>
<html lang="cs">

<head>
    <link rel="stylesheet" href="./css/toast.css">
    <script src="./js/toast.js"></script>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Rezervaƒçn√≠ Syst√©m</title>
    <link href="https://fonts.googleapis.com/css?family=Lato&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="./css/vestylu.css">
    <style>
        /* Zaji≈°tƒõn√≠ spr√°vn√©ho um√≠stƒõn√≠ jmenovek v r√°mci kontejner≈Ø */
        .couch-horizontal .seat,
        .couch-vertical .seat,
        .chair-top-right .seat,
        .chair-middle-left .seat,
        .chair-middle-top .seat {
            position: relative;
            overflow: visible; /* D≈Øle≈æit√© pro zobrazen√≠ jmenovky, kter√° vystupuje mimo */
        }
        
        /* Zaji≈°tƒõn√≠, ≈æe kontejnery nep≈ôekr√Ωvaj√≠ jmenovky */
        .couch-horizontal,
        .couch-vertical,
        .chair-top-right,
        .chair-middle-left,
        .chair-middle-top {
            overflow: visible;
        }
    </style>
</head>

<body>

<?php
    require_once 'session_check.php';
    $userMenu = getUserMenuHTML(); // Z√≠sk√° HTML pro menu podle stavu p≈ôihl√°≈°en√≠
    ?>

    <header class="site-header">
        <div class="logo">
            <h1>CineBukay</h1>
        </div>
        <?php echo $userMenu; ?>
    </header>

    <ul class="showcase">
        <li>
            <div class="seat"></div>
            <small>Voln√©</small>
        </li>
        <li>
            <div class="seat selected"></div>
            <small>Vybran√©</small>
        </li>
        <li>
            <div class="seat sold"></div>
            <small>Obsazen√©</small>
        </li>
    </ul>

    <div class="room-container">
        <!-- TV Screen -->
        <div class="screen"></div>

        <!-- Chair top right -->
        <div class="chair-top-right">
            <div class="seat" id="seat1" data-price="250"></div>
            <div class="seat-label">BOBIG</div>
        </div>

        <!-- Chair middle left -->
        <div class="chair-middle-top">
            <div class="seat" id="seat2" data-price="250"></div>
            <div class="seat-label">≈ΩIDLE</div>
        </div>

        <div class="chair-middle-left">
            <div class="seat" id="seat9" data-price="250"></div>
            <div class="seat-label">K≈òESLO</div>
        </div>

        <!-- Couch horizontal part -->
        <div class="couch-horizontal">
            <div class="seat" id="seat3" data-price="250"></div>
            <div class="seat" id="seat4" data-price="250"></div>
            <div class="seat" id="seat5" data-price="250"></div>
            <div class="seat" id="seat6" data-price="250"></div>
            <div class="seat-label" style="margin-left: 97px;">GAUƒå</div>
        </div>

        <!-- Couch vertical part -->
        <div class="couch-vertical">
            <div class="seat" id="seat7" data-price="250"></div>
            <div class="seat" id="seat8" style="margin-bottom: 10px;" data-price="250"></div>

        </div>
    </div>

<div class="selection-info">
    <p>Vyberte m√≠sto, kter√© si p≈ôejete rezervovat.</p>
</div>

    <div class="button-container">
        <button class="reserve-btn" id="reserve-btn" disabled>Rezervovat m√≠sta</button>
    </div>

    <script src="./js/reserve.js"></script>
    <script src="./js/common.js"></script>
<?php
// Kontrola toast zpr√°vy ze session
$toastMessage = getToastMessage();
if ($toastMessage): 
?>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        showToast('<?php echo addslashes($toastMessage['message']); ?>', '<?php echo $toastMessage['type']; ?>');
    });
</script>
<?php endif; ?>
</body>

</html>

// File: ./session_check.php
<?php
// Do souboru session_check.php p≈ôidejte n√°sleduj√≠c√≠ funkce
function setToastMessage($message, $type = 'success') {
    if (session_status() === PHP_SESSION_NONE) {
        session_start();
    }
    $_SESSION['toast_message'] = $message;
    $_SESSION['toast_type'] = $type;
}

function getToastMessage() {
    if (session_status() === PHP_SESSION_NONE) {
        session_start();
    }
    
    if (isset($_SESSION['toast_message']) && isset($_SESSION['toast_type'])) {
        $message = $_SESSION['toast_message'];
        $type = $_SESSION['toast_type'];
        
        // Odstran√≠me zpr√°vu ze session
        unset($_SESSION['toast_message']);
        unset($_SESSION['toast_type']);
        
        return ['message' => $message, 'type' => $type];
    }
    
    return null;
}
?>
<?php
// File: session_check.php
// Provides helper functions related to authentication state using the Auth class.

require_once __DIR__ . '/src/Auth.php'; // Include the Auth class
require_once __DIR__ . '/db_config.php'; // Needed for Database class auto-loading config

// Global instance of Auth for convenience in procedural files
// This also ensures session is started.
$auth = new Auth();

/**
 * Checks if user is logged in, redirects to login page if not.
 * Optionally checks for admin privileges.
 * Delegates to Auth class.
 * @param bool $adminRequired Whether admin privileges are required.
 */
function requireLogin($adminRequired = false) {
    global $auth; // Use the global instance
    $auth->requireLogin($adminRequired);
}

/**
 * Generate user menu HTML based on login status.
 * Delegates to Auth class.
 * @return string HTML for user menu.
 */
function getUserMenuHTML() {
    global $auth; // Use the global instance
    return $auth->getUserMenuHTML();
}

// Functions isLoggedIn(), isAdmin(), getCurrentUser() are now methods of the Auth class.
// Use $auth->isLoggedIn(), $auth->isAdmin(), $auth->getCurrentUser() directly if needed.

?>

// File: ./src/Auth.php
<?php

require_once __DIR__ . '/Database.php';

class Auth {
    private $pdo;

    public function __construct() {
        // Ensure session is started whenever Auth class is used
        if (session_status() === PHP_SESSION_NONE) {
            session_start();
        }
        $this->pdo = Database::getConnection();
    }

    /**
     * Register a new user.
     * @param string $username
     * @param string $password
     * @return array Result status and message.
     */
    public function registerUser($username, $password) {
        try {
            // Check if username already exists
            $stmt = $this->pdo->prepare("SELECT id_user FROM users WHERE username = :username");
            $stmt->bindParam(':username', $username);
            $stmt->execute();

            if ($stmt->rowCount() > 0) {
                return ['status' => 'error', 'message' => 'U≈æivatelsk√© jm√©no ji≈æ existuje.'];
            }

            // Hash password
            $hashedPassword = password_hash($password, PASSWORD_DEFAULT);

            // Insert new user (assuming is_admin defaults to false in DB)
            $stmt = $this->pdo->prepare("INSERT INTO users (username, password) VALUES (:username, :password)");
            $stmt->bindParam(':username', $username);
            $stmt->bindParam(':password', $hashedPassword);
            $stmt->execute();

            return ['status' => 'success', 'message' => 'Registrace probƒõhla √∫spƒõ≈°nƒõ.'];
        } catch (PDOException $e) {
            error_log("Auth Error (registerUser): " . $e->getMessage());
            return ['status' => 'error', 'message' => 'Chyba p≈ôi registraci.'];
        }
    }

    /**
     * Authenticate user login.
     * @param string $username
     * @param string $password
     * @param bool $remember Remember user flag (basic implementation)
     * @return array Result status, message, and redirect URL.
     */
    public function loginUser($username, $password, $remember = false) {
        try {
            // Get user by username
            $stmt = $this->pdo->prepare("SELECT id_user, username, password, is_admin FROM users WHERE username = :username");
            $stmt->bindParam(':username', $username);
            $stmt->execute();

            if ($stmt->rowCount() === 0) {
                return ['status' => 'error', 'message' => 'Nespr√°vn√© u≈æivatelsk√© jm√©no nebo heslo.'];
            }

            $user = $stmt->fetch(PDO::FETCH_ASSOC);

            // Verify password
            if (!password_verify($password, $user['password'])) {
                return ['status' => 'error', 'message' => 'Nespr√°vn√© u≈æivatelsk√© jm√©no nebo heslo.'];
            }

            // Regenerate session ID upon login for security
            session_regenerate_id(true);

            // Set session variables
            $_SESSION['user_id'] = $user['id_user'];
            $_SESSION['username'] = $user['username'];
            $_SESSION['is_admin'] = (bool) $user['is_admin']; // Ensure boolean type

            // Basic remember me cookie (consider more secure token implementation for production)
            if ($remember) {
                $token = bin2hex(random_bytes(16)); // Simple token
                setcookie('remember_token', $user['id_user'] . ':' . $token, time() + (86400 * 30), "/", "", false, true); // httponly
                // In a real app, store hash($token) in DB associated with user ID
            }

            return [
                'status' => 'success',
                'message' => 'P≈ôihl√°≈°en√≠ √∫spƒõ≈°n√©.',
                  'redirect' => 'index.php' 
            ];
        } catch (PDOException $e) {
            error_log("Auth Error (loginUser): " . $e->getMessage());
            return ['status' => 'error', 'message' => 'Chyba p≈ôi p≈ôihl√°≈°en√≠.'];
        }
    }

    /**
     * Logout current user.
     */
    public function logoutUser() {
        // Clear session data
        $_SESSION = array();

        // Delete session cookie
        if (ini_get("session.use_cookies")) {
            $params = session_get_cookie_params();
            setcookie(session_name(), '', time() - 42000,
                $params["path"], $params["domain"],
                $params["secure"], $params["httponly"]
            );
        }

        // Destroy the session
        session_destroy();

        // Clear remember me cookie
        if (isset($_COOKIE['remember_token'])) {
            setcookie('remember_token', '', time() - 3600, '/');
        }
    }

    /**
     * Check if user is currently logged in via session.
     * @return bool True if logged in, false otherwise.
     */
    public function isLoggedIn() {
        return isset($_SESSION['user_id']);
    }

    /**
     * Check if the logged-in user is an administrator.
     * @return bool True if admin, false otherwise.
     */
    public function isAdmin() {
        return $this->isLoggedIn() && isset($_SESSION['is_admin']) && $_SESSION['is_admin'] === true;
    }

    /**
     * Get data for the currently logged-in user.
     * @return array|null User data array or null if not logged in/error.
     */
    public function getCurrentUser() {
        if (!$this->isLoggedIn()) {
            return null;
        }

        try {
            $stmt = $this->pdo->prepare("SELECT id_user, username, is_admin FROM users WHERE id_user = :id");
            $stmt->bindParam(':id', $_SESSION['user_id'], PDO::PARAM_INT);
            $stmt->execute();

            $user = $stmt->fetch(PDO::FETCH_ASSOC);

            if (!$user) {
                // Invalid session, force logout
                $this->logoutUser();
                return null;
            }
            // Ensure boolean type for is_admin
            $user['is_admin'] = (bool) $user['is_admin'];
            return $user;

        } catch (PDOException $e) {
            error_log("Auth Error (getCurrentUser): " . $e->getMessage());
            return null;
        }
    }

     /**
     * Checks if user is logged in, redirects to login page if not.
     * Optionally checks for admin privileges.
     * @param bool $adminRequired Whether admin privileges are required.
     */
    public function requireLogin($adminRequired = false) {
        if (!$this->isLoggedIn()) {
            // Store the requested URL in session to redirect back after login (optional)
            // $_SESSION['redirect_url'] = $_SERVER['REQUEST_URI'];
            header("Location: login.php?error=Pro p≈ô√≠stup k t√©to str√°nce je nutn√© se p≈ôihl√°sit.");
            exit;
        }

        if ($adminRequired && !$this->isAdmin()) {
            // Redirect non-admins trying to access admin pages
            header("Location: index.php?error=K t√©to str√°nce nem√°te p≈ô√≠stup.");
            exit;
        }
    }

    /**
     * Generate user menu HTML based on login status.
     * @return string HTML for user menu.
     */
    public function getUserMenuHTML() {
        $currentUser = $this->getCurrentUser();

        if ($currentUser) {
            $isAdmin = $currentUser['is_admin'];
            $username = htmlspecialchars($currentUser['username']);

            $html = '<div class="user-menu-container">';
            $html .= '<div class="user-icon" id="user-icon">';
            $html .= '<span class="user-icon-symbol">üíÄ</span>';
            $html .= '<span class="user-name">' . $username . '</span>';
            $html .= '</div>';
            $html .= '<div class="dropdown-menu" id="dropdown-menu">';
            $html .= '<ul>';

            if ($isAdmin) {
                $html .= '<li><a href="admin.php">Administrace</a></li>';
            }

            $html .= '<li><a href="my-reservations.php">Moje rezervace</a></li>';
            $html .= '<li><a href="auth_handlers.php?action=logout">Odhl√°sit se</a></li>';
            $html .= '</ul>';
            $html .= '</div>';
            $html .= '</div>';
        } else {
            $html = '<div class="user-menu-container">';
            $html .= '<a href="login.php" class="login-btn">P≈ôihl√°sit se</a>';
            $html .= '</div>';
        }

        return $html;
    }
}

// File: ./src/Database.php
<?php

class Database {
    private static $pdo = null;
    private static $config = null;

    /**
     * Private constructor to prevent direct instantiation.
     */
    private function __construct() {}

    /**
     * Loads database configuration.
     * Should be called once before the first getConnection call.
     * @param array $dbConfig Associative array with 'host', 'port', 'db_name', 'user', 'password'.
     */
    public static function loadConfig(array $dbConfig) {
        self::$config = $dbConfig;
    }

    /**
     * Gets the PDO database connection instance (Singleton pattern).
     * @return PDO The PDO connection object.
     * @throws Exception If configuration is not loaded or connection fails.
     */
    public static function getConnection() {
        if (self::$pdo === null) {
            if (self::$config === null) {
                // Attempt to load config from default location if not loaded explicitly
                $configFile = __DIR__ . '/../db_config.php';
                if (file_exists($configFile)) {
                    // Load the config array returned by db_config.php
                    $config = require $configFile; 
                    if (is_array($config)) {
                        self::loadConfig($config);
                    } else {
                         throw new Exception("db_config.php did not return a valid configuration array.");
                    }
                } else {
                    throw new Exception("Database configuration not loaded and db_config.php not found at: " . $configFile);
                }
            }

            try {
                $dsn = sprintf(
                    "pgsql:host=%s;port=%s;dbname=%s",
                    self::$config['host'],
                    self::$config['port'],
                    self::$config['db_name']
                );
                self::$pdo = new PDO($dsn, self::$config['user'], self::$config['password']);
                self::$pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
                self::$pdo->setAttribute(PDO::ATTR_DEFAULT_FETCH_MODE, PDO::FETCH_ASSOC); // Optional: Set default fetch mode
            } catch (PDOException $e) {
                // Log error instead of dying directly in a class context
                error_log("Database connection failed: " . $e->getMessage());
                throw new Exception("Database connection failed."); // Re-throw generic exception
            }
        }
        return self::$pdo;
    }

    /**
     * Closes the database connection.
     */
    public static function closeConnection() {
        self::$pdo = null;
    }
}

// File: ./src/Reservation.php
<?php

require_once __DIR__ . '/Database.php';
require_once __DIR__ . '/Auth.php'; // Pot≈ôebujeme pro kontrolu u≈æivatele

class Reservation {
    private $pdo;
    private $auth;

    public function __construct(Auth $auth) {
        $this->pdo = Database::getConnection();
        $this->auth = $auth; // Ulo≈æ√≠me instanci Auth pro pou≈æit√≠ v metod√°ch
    }

    /**
     * Get reservations, optionally filtered by user ID.
     * If user is not admin, automatically filters by logged-in user.
     * @return array List of reservations or error message.
     */
    public function getReservations() {
        if (!$this->auth->isLoggedIn()) {
             return ['status' => 'error', 'message' => 'Pro zobrazen√≠ rezervac√≠ mus√≠te b√Ωt p≈ôihl√°≈°eni.'];
        }

        $userId = !$this->auth->isAdmin() ? $_SESSION['user_id'] : null;

        try {
            $sql = "
                SELECT r.id_reservation, r.id_user, r.id_screening, r.id_seat, r.status, r.created_at, 
                       s.title, s.screening_date, s.screening_time, s.genre, s.duration, encode(s.image, 'base64') as image,
                       seat.seat_number
                FROM reservations r
                JOIN screenings s ON r.id_screening = s.id_screening
                JOIN seats seat ON r.id_seat = seat.id_seat
            ";

            if ($userId) {
                $sql .= " WHERE r.id_user = :userId ORDER BY r.created_at DESC"; // Oprava ORDER BY
                $stmt = $this->pdo->prepare($sql);
                $stmt->execute(['userId' => $userId]);
            } else {
                // Admin gets all reservations
                $sql .= " ORDER BY r.created_at DESC"; // Oprava ORDER BY
                $stmt = $this->pdo->query($sql);
            }

            return $stmt->fetchAll(PDO::FETCH_ASSOC);
        } catch (PDOException $e) {
            error_log("Reservation Error (getReservations): " . $e->getMessage());
            // Doƒçasnƒõ vrac√≠me konkr√©tn√≠ PDOException message pro ladƒõn√≠
            return ['status' => 'error', 'message' => 'Chyba DB: ' . $e->getMessage()];
        }
    }

    /**
     * Get available seats for a specific screening.
     * @param int $screeningId
     * @return array List of available seats or error message.
     */
    public function getAvailableSeats($screeningId) {
        try {
            $this->auth->requireLogin(); // Require login for this action

            $pdo = Database::getConnection();

            // Check if the screening exists and has not yet started
            $screeningCheckSql = "
                SELECT screening_date, screening_time FROM screenings WHERE id_screening = :screening_id
            ";
            $screeningCheckStmt = $pdo->prepare($screeningCheckSql);
            $screeningCheckStmt->execute(['screening_id' => $screeningId]);
            $screening = $screeningCheckStmt->fetch(PDO::FETCH_ASSOC);

            if (!$screening) {
                return (object) ['status' => 'error', 'message' => 'Neplatn√© ID prom√≠t√°n√≠.'];
            }

            $screeningDateTimeStr = $screening['screening_date'] . ' ' . $screening['screening_time'];
            $screeningDateTime = new DateTime($screeningDateTimeStr);
            $now = new DateTime();

            if ($screeningDateTime <= $now) {
                return (object) ['status' => 'error', 'message' => 'Prom√≠t√°n√≠ ji≈æ zaƒçalo.'];
            }

            // Z√≠sk√°me data o v≈°ech sedadlech, vƒçetnƒõ informac√≠ o rezervac√≠ch a u≈æivatel√≠ch
            $sql = "
                SELECT s.id_seat, s.seat_number, r.id_reservation, u.username
                FROM seats s
                LEFT JOIN reservations r ON s.id_seat = r.id_seat AND r.id_screening = :screening_id AND r.status = 'active'
                LEFT JOIN users u ON r.id_user = u.id_user
                ORDER BY s.id_seat ASC
            ";
            $stmt = $pdo->prepare($sql);
            $stmt->execute(['screening_id' => $screeningId]);
            $allSeats = $stmt->fetchAll(PDO::FETCH_ASSOC);
            
            // Rozdƒõl√≠me sedadla na dostupn√° a obsazen√°
            $availableSeats = [];
            $occupiedSeats = [];
            
            foreach ($allSeats as $seat) {
                if ($seat['id_reservation'] === null) {
                    $availableSeats[] = ['id_seat' => $seat['id_seat'], 'seat_number' => $seat['seat_number']];
                } else {
                    $occupiedSeats[] = [
                        'id_seat' => $seat['id_seat'], 
                        'seat_number' => $seat['seat_number'],
                        'username' => $seat['username']
                    ];
                }
            }
            
            return [
                'available' => $availableSeats,
                'occupied' => $occupiedSeats
            ];

        } catch (PDOException $e) {
            error_log("Reservation::getAvailableSeats - DB error: " . $e->getMessage());
            return (object) ['status' => 'error', 'message' => 'Chyba p≈ôi naƒç√≠t√°n√≠ dostupn√Ωch m√≠st.'];
        } catch (Exception $e) {
            error_log("Reservation::getAvailableSeats - General error: " . $e->getMessage());
            return (object) ['status' => 'error', 'message' => 'Do≈°lo k syst√©mov√© chybƒõ.'];
        }
    }

    /**
     * Create a new reservation for the logged-in user.
     * @param int $screeningId
     * @param int $seatId
     * @return array Result status and message.
     */
    public function createReservation($screeningId, $seatId) {
        if (!$this->auth->isLoggedIn()) {
            return ['status' => 'error', 'message' => 'Pro vytvo≈ôen√≠ rezervace mus√≠te b√Ωt p≈ôihl√°≈°eni.'];
        }
        $userId = $_SESSION['user_id'];

        try {
            // Start transaction
            $this->pdo->beginTransaction();

            // Check if seat is still available (lock for update might be better in high concurrency)
            $stmt = $this->pdo->prepare("
                SELECT COUNT(*) 
                FROM reservations 
                WHERE id_screening = :screeningId 
                AND id_seat = :seatId 
                AND status = 'active'
            ");
            $stmt->execute(['screeningId' => $screeningId, 'seatId' => $seatId]);

            if ($stmt->fetchColumn() > 0) {
                 $this->pdo->rollBack(); // Rollback transaction
                return ['status' => 'error', 'message' => 'Vybran√© m√≠sto (' . $seatId . ') je ji≈æ obsazen√©.'];
            }

            // Create reservation
            $stmt = $this->pdo->prepare("
                INSERT INTO reservations (id_user, id_screening, id_seat, status)
                VALUES (:userId, :screeningId, :seatId, 'active')
            ");
            $stmt->execute([
                'userId' => $userId,
                'screeningId' => $screeningId,
                'seatId' => $seatId
            ]);

            // Commit transaction
            $this->pdo->commit();

            return ['status' => 'success', 'message' => 'Rezervace byla √∫spƒõ≈°nƒõ vytvo≈ôena.'];
        } catch (PDOException $e) {
             $this->pdo->rollBack(); // Rollback on error
            error_log("Reservation Error (createReservation): " . $e->getMessage());
            return ['status' => 'error', 'message' => 'Chyba p≈ôi vytv√°≈ôen√≠ rezervace.'];
        }
    }

    // √öprava metody createMultipleReservations - p≈ôid√°n√≠ podpory pro p≈ôesouv√°n√≠ rezervace

    /**
     * Create multiple reservations for the logged-in user in a single transaction.
     * @param int $screeningId
     * @param array $seatIds Array of seat IDs to reserve.
     * @return array Result status and message.
     */
    public function createMultipleReservations($screeningId, array $seatIds) {
        if (!$this->auth->isLoggedIn()) {
            return ['status' => 'error', 'message' => 'Pro vytvo≈ôen√≠ rezervace mus√≠te b√Ωt p≈ôihl√°≈°eni.'];
        }
        if (empty($seatIds)) {
            return ['status' => 'error', 'message' => 'Nebylo vybr√°no ≈æ√°dn√© m√≠sto k rezervaci.'];
        }
        
        // Omez√≠me poƒçet m√≠st na 1
        if (count($seatIds) > 1) {
            return ['status' => 'error', 'message' => 'M≈Ø≈æete rezervovat pouze jedno m√≠sto najednou.'];
        }
        
        $userId = $_SESSION['user_id'];
        $seatId = $seatIds[0]; // Bereme pouze prvn√≠ (a jedin√©) sedadlo

        try {
            $this->pdo->beginTransaction();
            
            // Nejd≈ô√≠ve zkontrolujeme, zda u≈æivatel ji≈æ nem√° rezervaci na toto prom√≠t√°n√≠
            $existingReservation = $this->getUserReservationForScreening($screeningId);
            
            // Kontrola dostupnosti sedadla
            $stmtCheck = $this->pdo->prepare("
                SELECT id_seat 
                FROM reservations 
                WHERE id_screening = ? 
                AND id_seat = ?
                AND status = 'active'
            ");
            $stmtCheck->execute([$screeningId, $seatId]);
            
            if ($stmtCheck->rowCount() > 0) {
                $this->pdo->rollBack();
                return ['status' => 'error', 'message' => 'Vybran√© m√≠sto je ji≈æ obsazen√©.'];
            }

            // Pokud existuje p≈ôedchoz√≠ rezervace, zru≈°√≠me ji
            if ($existingReservation) {
                $stmtCancel = $this->pdo->prepare("
                    UPDATE reservations 
                    SET status = 'canceled' 
                    WHERE id_reservation = ?
                ");
                if (!$stmtCancel->execute([$existingReservation['id_reservation']])) {
                    $this->pdo->rollBack();
                    return ['status' => 'error', 'message' => 'Nepoda≈ôilo se aktualizovat p≈ôedchoz√≠ rezervaci.'];
                }
            }

            // Vytvo≈ôen√≠ nov√© rezervace
            $stmtInsert = $this->pdo->prepare("
                INSERT INTO reservations (id_user, id_screening, id_seat, status)
                VALUES (?, ?, ?, 'active')
            ");

            if (!$stmtInsert->execute([$userId, $screeningId, $seatId])) {
                $this->pdo->rollBack();
                return ['status' => 'error', 'message' => 'Chyba p≈ôi vytv√°≈ôen√≠ rezervace.'];
            }

            $this->pdo->commit();
            
            // Zpr√°va se li≈°√≠ podle toho, zda jde o novou rezervaci nebo p≈ôesun
            if ($existingReservation) {
                return [
                    'status' => 'success', 
                    'message' => 'Va≈°e rezervace byla p≈ôesunuta na nov√© m√≠sto.',
                    'moved' => true,
                    'previousSeat' => $existingReservation['seat_number'],
                    'newSeat' => $seatId
                ];
            } else {
                return [
                    'status' => 'success', 
                    'message' => 'M√≠sto bylo √∫spƒõ≈°nƒõ rezervov√°no.',
                    'newSeat' => $seatId
                ];
            }

        } catch (PDOException $e) {
            $this->pdo->rollBack();
            error_log("Reservation Error (createMultipleReservations): " . $e->getMessage());
            return ['status' => 'error', 'message' => 'Chyba p≈ôi vytv√°≈ôen√≠ rezervace.'];
        }
    }


    /**
     * Cancel a reservation.
     * @param int $reservationId
     * @return array Result status and message.
     */
    public function cancelReservation($reservationId) {
        if (!$this->auth->isLoggedIn()) {
            return ['status' => 'error', 'message' => 'Pro zru≈°en√≠ rezervace mus√≠te b√Ωt p≈ôihl√°≈°eni.'];
        }
        $currentUserId = $_SESSION['user_id'];

        try {
            // Get reservation owner
            $stmt = $this->pdo->prepare("SELECT id_user FROM reservations WHERE id_reservation = :id AND status = 'active'");
            $stmt->execute(['id' => $reservationId]);
            $reservation = $stmt->fetch(PDO::FETCH_ASSOC);

            if (!$reservation) {
                return ['status' => 'error', 'message' => 'Rezervace neexistuje nebo ji≈æ byla zru≈°ena.'];
            }

            // Check permissions
            if ($reservation['id_user'] !== $currentUserId && !$this->auth->isAdmin()) {
                return ['status' => 'error', 'message' => 'Nem√°te opr√°vnƒõn√≠ zru≈°it tuto rezervaci.'];
            }

            // Cancel reservation
            $stmt = $this->pdo->prepare("UPDATE reservations SET status = 'canceled' WHERE id_reservation = :id");
            $stmt->execute(['id' => $reservationId]);

            if ($stmt->rowCount() > 0) {
                 return ['status' => 'success', 'message' => 'Rezervace byla √∫spƒõ≈°nƒõ zru≈°ena.'];
            } else {
                 // Should not happen if fetch worked, but good to handle
                 return ['status' => 'error', 'message' => 'Rezervaci se nepoda≈ôilo zru≈°it.'];
            }
        } catch (PDOException $e) {
            error_log("Reservation Error (cancelReservation): " . $e->getMessage());
            return ['status' => 'error', 'message' => 'Chyba p≈ôi ru≈°en√≠ rezervace.'];
        }
    }

    public function getUserReservationForScreening($screeningId) {
        if (!$this->auth->isLoggedIn()) {
            return null;
        }
        
        $userId = $_SESSION['user_id'];
        
        try {
            $stmt = $this->pdo->prepare("
                SELECT r.id_reservation, r.id_seat, s.seat_number 
                FROM reservations r
                JOIN seats s ON r.id_seat = s.id_seat
                WHERE r.id_screening = :screeningId 
                AND r.id_user = :userId 
                AND r.status = 'active'
            ");
            $stmt->execute([
                'screeningId' => $screeningId,
                'userId' => $userId
            ]);
            
            return $stmt->fetch(PDO::FETCH_ASSOC);
        } catch (PDOException $e) {
            error_log("Reservation Error (getUserReservationForScreening): " . $e->getMessage());
            return null;
        }
    }
}

