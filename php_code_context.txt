// File: ./admin.php
<?php
require_once 'session_check.php';
requireLogin(true); // Vy≈æaduje admin pr√°va
?>
<!DOCTYPE html>
<html lang="cs">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin | CineBukay</title>
    <link href="https://fonts.googleapis.com/css?family=Lato&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="./css/vestylu.css">
    <link rel="stylesheet" href="./css/admin.css">
</head>
<body>
    <header class="site-header">
        <h1 class="site-title">CineBukay | Admin</h1>
        <?php echo getUserMenuHTML(); ?>
    </header>
    
    <!-- Navigace pro mobil -->
    <nav class="mobile-nav">
        <a href="#" class="nav-item active" data-section="movies">Filmy</a>
        <a href="#" class="nav-item" data-section="reservations">Rezervace</a>
        <a href="#" class="nav-item" data-section="users">U≈æivatel√©</a>
        <a href="#" class="nav-item" data-section="settings">Nastaven√≠</a>
    </nav>
    
    <!-- Navigace pro desktop -->
    <nav class="sidebar">
        <a href="#" class="nav-item active" data-section="movies">Filmy</a>
        <a href="#" class="nav-item" data-section="reservations">Rezervace</a>
        <a href="#" class="nav-item" data-section="users">U≈æivatel√©</a>
        <a href="#" class="nav-item" data-section="settings">Nastaven√≠</a>
    </nav>
    
    <main class="main-content">
        <!-- Sekce Filmy -->
        <div id="movies-section" class="content-section active">
            <div class="section-header">
                <h2>Spr√°va film≈Ø</h2>
                <button class="add-btn" id="add-movie-btn">+ P≈ôidat nov√Ω film</button>
            </div>
            
            <div class="search-container">
                <div class="search-box">
                    <input type="text" class="search-input" placeholder="Hledat film...">
                    <button class="search-btn">üîç</button>
                </div>
                <select class="filter-select">
                    <option value="all">V≈°echny filmy</option>
                    <option value="active">Aktu√°ln√≠</option>
                    <option value="archive">Archiv</option>
                </select>
            </div>

            <!-- Loading stav -->
            <div id="movies-loading" class="loading-state">
                <div class="loading-spinner"></div>
                <p>Naƒç√≠t√°m filmy...</p>
            </div>
            
            <!-- Mobile zobrazen√≠ -->
            <div class="movies-cards">
                <!-- Sem budou dynamicky vlo≈æeny karty film≈Ø pro mobiln√≠ zobrazen√≠ -->
            </div>
            
            <!-- Desktop zobrazen√≠ -->
            <div class="movies-table">
                <table class="admin-table">
                    <thead>
                        <tr>
                            <th>N√°zev</th>
                            <th>≈Ω√°nr</th>
                            <th>D√©lka</th>
                            <th>Datum prom√≠t√°n√≠</th>
                            <th>ƒåasy</th>
                            <th>Akce</th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- Sem budou dynamicky vlo≈æeny ≈ô√°dky film≈Ø pro desktop zobrazen√≠ -->
                    </tbody>
                </table>
            </div>
            
            <div class="pagination">
                <button class="page-btn active">1</button>
                <button class="page-btn">2</button>
                <button class="next-btn">‚Üí</button>
            </div>
        </div>

        <!-- Sekce Rezervace -->
        <div id="reservations-section" class="content-section">
            <h2>Spr√°va rezervac√≠</h2>
            <!-- Sem p≈ôijde obsah pro spr√°vu rezervac√≠ -->
        </div>

        <!-- Sekce U≈æivatel√© -->
        <div id="users-section" class="content-section">
            <h2>Spr√°va u≈æivatel≈Ø</h2>
            <!-- Sem p≈ôijde obsah pro spr√°vu u≈æivatel≈Ø -->
        </div>

        <!-- Sekce Nastaven√≠ -->
        <div id="settings-section" class="content-section">
            <h2>Nastaven√≠</h2>
            <!-- Sem p≈ôijde obsah pro nastaven√≠ -->
        </div>
    </main>
    
    <!-- Modal pro p≈ôid√°n√≠/√∫pravu filmu -->
    <div class="modal" id="movie-modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">P≈ôidat nov√Ω film</h3>
                <button class="close-btn">&times;</button>
            </div>
            <div class="modal-body">
                <form id="movie-form">
                    <input type="hidden" id="movie-id">
                    
                    <div class="form-group">
                        <label class="form-label">N√°zev filmu *</label>
                        <input type="text" class="form-input" id="movie-title" required>
                    </div>
                    
                    <div class="form-row">
                        <div class="form-col">
                            <label class="form-label">D√©lka (min) *</label>
                            <input type="number" class="form-input" id="movie-duration" min="1" required>
                        </div>
                        <div class="form-col">
                            <label class="form-label">≈Ω√°nr *</label>
                            <input type="text" class="form-input" id="movie-genre" list="genres" placeholder="P≈ôidat ≈æ√°nr" required>
                            <datalist id="genres">
                                <option value="Akƒçn√≠">
                                <option value="Animovan√Ω">
                                <option value="Dobrodru≈æn√Ω">
                                <option value="Drama">
                                <option value="Fantasy">
                                <option value="Horor">
                                <option value="Komedie">
                                <option value="Thriller">
                                <option value="Sci-fi">
                                <option value="≈Ωivotopisn√Ω">
                            </datalist>
                        </div>
                    </div>
                    
                    <div class="genre-tags" id="genre-tags">
                        <!-- Tagy budou p≈ôid√°ny JavaScriptem -->
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">Obr√°zek filmu</label>
                        <div class="image-upload" id="image-upload">
                            <div class="upload-icon">üì∑</div>
                            <div>Nahr√°t obr√°zek</div>
                        </div>
                        <input type="file" id="movie-image" style="display:none" accept="image/*">
                    </div>
                    
                    <div class="form-row">
                        <div class="form-col">
                            <label class="form-label">Datum od *</label>
                            <input type="date" class="form-input" id="date-from" required>
                        </div>
                        <div class="form-col">
                            <label class="form-label">Datum do *</label>
                            <input type="date" class="form-input" id="date-to" required>
                        </div>
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">ƒåasy prom√≠t√°n√≠</label>
                        <div class="times-container" id="times-container">
                            <div class="time-group">
                                <input type="time" class="form-input time-input">
                                <button type="button" class="remove-time">&times;</button>
                            </div>
                            <button type="button" class="add-time" id="add-time">+ P≈ôidat ƒças</button>
                        </div>
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">Popis filmu</label>
                        <textarea class="form-input" id="movie-description" rows="3"></textarea>
                    </div>
                    
                    <div class="form-actions">
                        <button type="button" class="cancel-btn">Zru≈°it</button>
                        <button type="submit" class="save-btn">Ulo≈æit</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
    
    <!-- Modal pro potvrzen√≠ smaz√°n√≠ -->
    <div class="modal" id="delete-modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">Smazat film</h3>
                <button class="close-btn">&times;</button>
            </div>
            <div class="modal-body">
                <p>Opravdu chcete smazat film <span id="delete-movie-name"></span>?</p>
                <div class="form-actions">
                    <button class="cancel-btn">Zru≈°it</button>
                    <button class="confirm-btn">Smazat</button>
                </div>
            </div>
        </div>
    </div>
    
    <script src="./js/admin.js"></script>
</body>
</html>
// File: ./api_endpoint.php
<?php
require_once 'db_config.php';
require_once 'session_check.php';

function getAllMovies() {
    try {
        $pdo = getDbConnection();
        $stmt = $pdo->query("
            SELECT * FROM screenings 
            ORDER BY screening_date DESC, screening_time ASC
        ");
        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
        return ['status' => 'error', 'message' => 'Chyba p≈ôi naƒç√≠t√°n√≠ film≈Ø: ' . $e->getMessage()];
    }
}

function addMovie($data) {
    try {
        $pdo = getDbConnection();
        
        $stmt = $pdo->prepare("
            INSERT INTO screenings (title, duration, genre, description, image, screening_date, screening_time)
            VALUES (:title, :duration, :genre, :description, :image, :screening_date, :screening_time)
        ");
        
        // P≈ôevod base64 obr√°zku na BYTEA
        $imageData = null;
        if (!empty($data['image'])) {
            $imageData = base64_decode(preg_replace('#^data:image/\w+;base64,#i', '', $data['image']));
        }
        
        $stmt->execute([
            'title' => $data['title'],
            'duration' => $data['duration'],
            'genre' => $data['genre'],
            'description' => $data['description'],
            'image' => $imageData,
            'screening_date' => $data['screening_date'],
            'screening_time' => $data['screening_time']
        ]);
        
        return ['status' => 'success', 'message' => 'Film byl √∫spƒõ≈°nƒõ p≈ôid√°n.'];
    } catch (PDOException $e) {
        return ['status' => 'error', 'message' => 'Chyba p≈ôi p≈ôid√°v√°n√≠ filmu: ' . $e->getMessage()];
    }
}

function updateMovie($id, $data) {
    try {
        $pdo = getDbConnection();
        
        $sql = "UPDATE screenings SET 
                title = :title,
                duration = :duration,
                genre = :genre,
                description = :description,
                screening_date = :screening_date,
                screening_time = :screening_time";
        
        // P≈ôidat image pouze pokud je poskytnut nov√Ω
        if (!empty($data['image'])) {
            $sql .= ", image = :image";
        }
        
        $sql .= " WHERE id_screening = :id";
        
        $stmt = $pdo->prepare($sql);
        
        $params = [
            'id' => $id,
            'title' => $data['title'],
            'duration' => $data['duration'],
            'genre' => $data['genre'],
            'description' => $data['description'],
            'screening_date' => $data['screening_date'],
            'screening_time' => $data['screening_time']
        ];
        
        if (!empty($data['image'])) {
            $params['image'] = base64_decode(preg_replace('#^data:image/\w+;base64,#i', '', $data['image']));
        }
        
        $stmt->execute($params);
        
        return ['status' => 'success', 'message' => 'Film byl √∫spƒõ≈°nƒõ aktualizov√°n.'];
    } catch (PDOException $e) {
        return ['status' => 'error', 'message' => 'Chyba p≈ôi aktualizaci filmu: ' . $e->getMessage()];
    }
}

function deleteMovie($id) {
    try {
        $pdo = getDbConnection();
        
        // Nejprve zkontrolujeme, zda neexistuj√≠ souvisej√≠c√≠ rezervace
        $stmt = $pdo->prepare("SELECT COUNT(*) FROM reservations WHERE id_screening = :id");
        $stmt->execute(['id' => $id]);
        
        if ($stmt->fetchColumn() > 0) {
            return ['status' => 'error', 'message' => 'Film nelze smazat, proto≈æe k nƒõmu existuj√≠ rezervace.'];
        }
        
        // Pokud nejsou rezervace, sma≈æeme film
        $stmt = $pdo->prepare("DELETE FROM screenings WHERE id_screening = :id");
        $stmt->execute(['id' => $id]);
        
        return ['status' => 'success', 'message' => 'Film byl √∫spƒõ≈°nƒõ smaz√°n.'];
    } catch (PDOException $e) {
        return ['status' => 'error', 'message' => 'Chyba p≈ôi maz√°n√≠ filmu: ' . $e->getMessage()];
    }
}

// Zpracov√°n√≠ API po≈æadavk≈Ø
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    requireLogin(true); // Vy≈æadovat admin pr√°va
    
    $action = $_POST['action'] ?? '';
    $response = ['status' => 'error', 'message' => 'Neplatn√Ω po≈æadavek'];
    
    switch ($action) {
        case 'add':
            $response = addMovie($_POST);
            break;
            
        case 'update':
            if (isset($_POST['id'])) {
                $response = updateMovie($_POST['id'], $_POST);
            }
            break;
            
        case 'delete':
            if (isset($_POST['id'])) {
                $response = deleteMovie($_POST['id']);
            }
            break;
    }
    
    header('Content-Type: application/json');
    echo json_encode($response);
    exit;
}

// Pro GET po≈æadavky vr√°t√≠me seznam film≈Ø
if ($_SERVER['REQUEST_METHOD'] === 'GET') {
    header('Content-Type: application/json');
    echo json_encode(getAllMovies());
    exit;
}
?>
// File: ./auth_handlers.php
<?php
// File: auth_handlers.php
require_once 'db_config.php';

session_start();

/**
 * Register a new user
 * @param string $username Username
 * @param string $password Password
 * @return array Result with status and message
 */
function registerUser($username, $password) {
    try {
        $pdo = getDbConnection();
        
        // Check if username already exists
        $stmt = $pdo->prepare("SELECT id_user FROM users WHERE username = :username");
        $stmt->bindParam(':username', $username);
        $stmt->execute();
        
        if ($stmt->rowCount() > 0) {
            return ['status' => 'error', 'message' => 'U≈æivatelsk√© jm√©no ji≈æ existuje.'];
        }
        
        // Hash password
        $hashedPassword = password_hash($password, PASSWORD_DEFAULT);
        
        // Insert new user
        $stmt = $pdo->prepare("INSERT INTO users (username, password) VALUES (:username, :password)");
        $stmt->bindParam(':username', $username);
        $stmt->bindParam(':password', $hashedPassword);
        $stmt->execute();
        
        return ['status' => 'success', 'message' => 'Registrace probƒõhla √∫spƒõ≈°nƒõ.'];
    } catch (PDOException $e) {
        return ['status' => 'error', 'message' => 'Chyba p≈ôi registraci: ' . $e->getMessage()];
    }
}

/**
 * Authenticate user login
 * @param string $username Username
 * @param string $password Password
 * @param bool $remember Remember user flag
 * @return array Result with status and message
 */
function loginUser($username, $password, $remember = false) {
    try {
        $pdo = getDbConnection();
        
        // Get user by username
        $stmt = $pdo->prepare("SELECT id_user, username, password, is_admin FROM users WHERE username = :username");
        $stmt->bindParam(':username', $username);
        $stmt->execute();
        
        if ($stmt->rowCount() === 0) {
            return ['status' => 'error', 'message' => 'Nespr√°vn√© u≈æivatelsk√© jm√©no nebo heslo.'];
        }
        
        $user = $stmt->fetch(PDO::FETCH_ASSOC);
        
        // Verify password
        if (!password_verify($password, $user['password'])) {
            return ['status' => 'error', 'message' => 'Nespr√°vn√© u≈æivatelsk√© jm√©no nebo heslo.'];
        }
        
        // Set session variables
        $_SESSION['user_id'] = $user['id_user'];
        $_SESSION['username'] = $user['username'];
        $_SESSION['is_admin'] = $user['is_admin'];
        
        // If remember is checked, set cookie
        if ($remember) {
            $token = bin2hex(random_bytes(32));
            setcookie('remember_token', $token, time() + (86400 * 30), "/"); // 30 days
            
            // Save token in database for verification later
            // Note: In a real-world app, you would store this token securely
            // This is a simplified version
        }
        
        return [
            'status' => 'success', 
            'message' => 'P≈ôihl√°≈°en√≠ √∫spƒõ≈°n√©.', 
            'redirect' => $user['is_admin'] ? 'admin.php' : 'index.php'
        ];
    } catch (PDOException $e) {
        return ['status' => 'error', 'message' => 'Chyba p≈ôi p≈ôihl√°≈°en√≠: ' . $e->getMessage()];
    }
}

/**
 * Logout current user
 */
function logoutUser() {
    // Clear session
    $_SESSION = array();
    
    // Clear session cookie
    if (ini_get("session.use_cookies")) {
        $params = session_get_cookie_params();
        setcookie(session_name(), '', time() - 42000,
            $params["path"], $params["domain"],
            $params["secure"], $params["httponly"]
        );
    }
    
    // Destroy session
    session_destroy();
    
    // Clear remember cookie if set
    if (isset($_COOKIE['remember_token'])) {
        setcookie('remember_token', '', time() - 3600, '/');
    }
    
    // Redirect to login page
    header("Location: login.php");
    exit;
}

/**
 * Check if user is logged in
 * @return bool True if logged in, false otherwise
 */
function isLoggedIn() {
    return isset($_SESSION['user_id']);
}

/**
 * Check if logged in user is admin
 * @return bool True if admin, false otherwise
 */
function isAdmin() {
    return isset($_SESSION['is_admin']) && $_SESSION['is_admin'] === true;
}

// Handle AJAX requests for login and registration
if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['action'])) {
    $action = $_POST['action'];
    $response = ['status' => 'error', 'message' => 'Neplatn√Ω po≈æadavek.'];
    
    if ($action === 'login' && isset($_POST['username']) && isset($_POST['password'])) {
        $remember = isset($_POST['remember']) && $_POST['remember'] === 'true';
        $response = loginUser($_POST['username'], $_POST['password'], $remember);
    } elseif ($action === 'register' && isset($_POST['username']) && isset($_POST['password'])) {
        $response = registerUser($_POST['username'], $_POST['password']);
    } elseif ($action === 'logout') {
        logoutUser();
        $response = ['status' => 'success', 'message' => 'Odhl√°≈°en√≠ probƒõhlo √∫spƒõ≈°nƒõ.'];
    }
    
    // Return JSON response for AJAX requests
    header('Content-Type: application/json');
    echo json_encode($response);
    exit;
}

// Handle GET logout request
if ($_SERVER['REQUEST_METHOD'] === 'GET' && isset($_GET['action']) && $_GET['action'] === 'logout') {
    logoutUser();
    // If we get here, redirect to login page with success message
    header("Location: login.php?success=√öspƒõ≈°nƒõ jste se odhl√°sili.");
    exit;
}
?>
// File: ./css/admin.css
/* Z√°kladn√≠ resetov√°n√≠ a nastaven√≠ */

* {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
    font-family: "Lato", sans-serif;
}

body {
    background-color: #242333;
    color: #fff;
    padding-top: 70px;
}


/* Header */

.site-header {
    background-color: #1a1a2e;
    padding: 15px;
    display: flex;
    justify-content: space-between;
    align-items: center;
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    z-index: 100;
}

.site-title {
    font-size: 18px;
    margin: 0;
}

.user-icon {
    width: 36px;
    height: 36px;
    background-color: #6649b8;
    border-radius: 50%;
    display: flex;
    justify-content: center;
    align-items: center;
    cursor: pointer;
}


/* Navigace pro desktop */

.sidebar {
    display: none;
}

@media (min-width: 769px) {
    .sidebar {
        display: block;
        background-color: #1a1a2e;
        padding: 15px 0;
        position: fixed;
        top: 70px;
        left: 0;
        bottom: 0;
        width: 200px;
    }
    .main-content {
        margin-left: 200px;
        padding: 20px;
    }
}


/* Navigace pro mobil */

.mobile-nav {
    background-color: #1a1a2e;
    padding: 10px 0;
    position: fixed;
    top: 61px;
    left: 0;
    width: 100%;
    z-index: 99;
}

@media (min-width: 769px) {
    .mobile-nav {
        display: none;
    }
}

.nav-item {
    display: block;
    padding: 12px 20px;
    color: #fff;
    text-decoration: none;
    border-left: 4px solid transparent;
}

.nav-item.active {
    background-color: rgba(255, 255, 255, 0.1);
    border-left-color: #0cb800;
}


/* Hlavn√≠ obsah */

.main-content {
    padding: 90px 15px 20px;
}

h2 {
    margin-bottom: 20px;
    font-size: 24px;
}

.add-btn {
    display: block;
    background-color: #0cb800;
    color: white;
    border: none;
    border-radius: 5px;
    padding: 12px;
    width: 100%;
    text-align: center;
    font-size: 16px;
    margin-bottom: 20px;
    cursor: pointer;
}


/* Vyhled√°v√°n√≠ a filtrov√°n√≠ */

.search-container {
    margin-bottom: 20px;
}

.search-box {
    display: flex;
    margin-bottom: 10px;
}

.search-input {
    flex: 1;
    padding: 12px;
    background-color: rgba(255, 255, 255, 0.1);
    border: none;
    border-radius: 5px 0 0 5px;
    color: #fff;
    font-size: 16px;
}

.search-btn {
    background-color: #0cb800;
    border: none;
    color: white;
    padding: 0 15px;
    border-radius: 0 5px 5px 0;
    cursor: pointer;
}

.filter-select {
    width: 100%;
    padding: 12px;
    background-color: rgba(255, 255, 255, 0.1);
    border: none;
    border-radius: 5px;
    color: #fff;
    font-size: 16px;
    -webkit-appearance: none;
    appearance: none;
    background-image: url("data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='white'%3e%3cpath d='M7 10l5 5 5-5z'/%3e%3c/svg%3e");
    background-repeat: no-repeat;
    background-position: right 15px center;
    background-size: 20px;
}

@media (min-width: 769px) {
    .search-container {
        display: flex;
        gap: 15px;
    }
    .search-box {
        flex: 2;
        margin-bottom: 0;
    }
    .filter-select {
        flex: 1;
    }
    .add-btn {
        width: auto;
        float: right;
        padding: 10px 15px;
        margin-top: -45px;
    }
}


/* Karty film≈Ø - pro mobiln√≠ zobrazen√≠ */

.movies-list {
    margin-bottom: 20px;
}

.movie-card {
    background-color: rgba(0, 0, 0, 0.3);
    border-radius: 8px;
    overflow: hidden;
    margin-bottom: 15px;
}

.movie-header {
    display: flex;
    padding: 15px;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
}

.movie-image {
    width: 60px;
    height: 90px;
    border-radius: 4px;
    margin-right: 15px;
    object-fit: cover;
}

.movie-title {
    font-size: 18px;
    font-weight: bold;
    margin-bottom: 5px;
}

.movie-meta {
    color: #ccc;
    font-size: 14px;
}

.movie-details {
    padding: 15px;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
}

.movie-dates {
    background: rgba(255, 255, 255, 0.05);
    padding: 8px 12px;
    border-radius: 4px;
    margin-bottom: 10px;
    font-size: 14px;
}

.date-label,
.time-label {
    color: #aaa;
    margin-right: 8px;
}

.movie-actions {
    display: flex;
    padding: 10px;
}

.action-btn {
    flex: 1;
    margin: 0 5px;
    padding: 10px 0;
    border: none;
    border-radius: 4px;
    font-size: 16px;
    font-weight: bold;
    cursor: pointer;
}

.edit-btn {
    background-color: #2196F3;
    color: white;
}

.delete-btn {
    background-color: #f44336;
    color: white;
}


/* Tabulka pro desktop */

.movies-table {
    display: none;
}

@media (min-width: 769px) {
    .movies-cards {
        display: none;
    }
    .movies-table {
        display: block;
        overflow-x: auto;
    }
    .admin-table {
        width: 100%;
        border-collapse: collapse;
        background-color: rgba(0, 0, 0, 0.2);
    }
    .admin-table th,
    .admin-table td {
        padding: 12px 15px;
        text-align: left;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    }
    .admin-table th {
        background-color: rgba(0, 0, 0, 0.3);
        color: #ddd;
        font-weight: 600;
        font-size: 0.9rem;
    }
    .movie-name-with-image {
        display: flex;
        align-items: center;
        gap: 10px;
    }
    .movie-name-with-image img {
        width: 40px;
        height: 60px;
        object-fit: cover;
        border-radius: 4px;
    }
    .action-buttons {
        display: flex;
        gap: 8px;
    }
    .action-buttons button {
        padding: 8px 12px;
        border: none;
        border-radius: 4px;
        font-size: 0.9rem;
        cursor: pointer;
    }
}


/* Archivovan√© filmy */

.movie-card.archived {
    opacity: 0.7;
}

.archive-badge {
    display: inline-block;
    background-color: #666;
    color: white;
    font-size: 12px;
    padding: 2px 8px;
    border-radius: 10px;
    margin-left: 10px;
}

.archived-row {
    opacity: 0.7;
}


/* Paginace */

.pagination {
    display: flex;
    justify-content: center;
    align-items: center;
    margin-top: 20px;
    gap: 8px;
}

.page-btn {
    width: 40px;
    height: 40px;
    display: flex;
    justify-content: center;
    align-items: center;
    background-color: rgba(255, 255, 255, 0.1);
    border: none;
    color: #fff;
    border-radius: 5px;
    font-size: 16px;
    cursor: pointer;
}

.page-btn.active {
    background-color: #0cb800;
}

.next-btn {
    width: 40px;
    height: 40px;
    display: flex;
    justify-content: center;
    align-items: center;
    background-color: rgba(255, 255, 255, 0.1);
    border: none;
    color: #fff;
    border-radius: 5px;
    font-size: 24px;
    cursor: pointer;
}


/* Mod√°ln√≠ okno */

.modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(0, 0, 0, 0.9);
    z-index: 999;
    overflow-y: auto;
}

.modal.active {
    display: block;
}

.modal-content {
    background-color: #333;
    border-radius: 8px;
    width: calc(100% - 30px);
    margin: 70px auto 20px;
    max-width: 500px;
}

.modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 15px;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
}

.modal-title {
    font-size: 20px;
    margin: 0;
}

.close-btn {
    background: none;
    border: none;
    color: #ccc;
    font-size: 24px;
    cursor: pointer;
}

.modal-body {
    padding: 15px;
}


/* Formul√°≈ô */

.form-group {
    margin-bottom: 20px;
}

.form-label {
    display: block;
    margin-bottom: 8px;
    color: #ccc;
}

.form-input {
    width: 100%;
    padding: 12px;
    background-color: rgba(255, 255, 255, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: 5px;
    color: #fff;
    font-size: 16px;
}

.form-row {
    display: flex;
    gap: 10px;
    margin-bottom: 20px;
}

.form-col {
    flex: 1;
}

@media (max-width: 768px) {
    .form-row {
        flex-direction: column;
    }
}

.image-upload {
    width: 100%;
    height: 120px;
    background-color: rgba(255, 255, 255, 0.05);
    border: 2px dashed rgba(255, 255, 255, 0.2);
    border-radius: 5px;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    cursor: pointer;
}

.upload-icon {
    font-size: 24px;
    margin-bottom: 10px;
}

.genre-tags {
    display: flex;
    flex-wrap: wrap;
    gap: 8px;
    margin-top: 10px;
}

.genre-tag {
    background-color: rgba(12, 184, 0, 0.2);
    border: 1px solid rgba(12, 184, 0, 0.5);
    border-radius: 20px;
    padding: 4px 10px;
    font-size: 14px;
    display: flex;
    align-items: center;
}

.remove-tag {
    background: none;
    border: none;
    color: rgba(255, 255, 255, 0.7);
    margin-left: 8px;
    font-size: 16px;
    cursor: pointer;
}

.times-container {
    display: flex;
    flex-direction: column;
    gap: 10px;
}

.time-group {
    display: flex;
    align-items: center;
}

.time-input {
    flex: 1;
}

.remove-time {
    background: none;
    border: none;
    color: #f44336;
    font-size: 24px;
    margin-left: 10px;
    cursor: pointer;
}

.add-time {
    background: none;
    border: 1px dashed rgba(255, 255, 255, 0.3);
    color: #ccc;
    padding: 8px;
    width: 100%;
    text-align: center;
    border-radius: 5px;
    cursor: pointer;
    margin-top: 5px;
}

.form-actions {
    display: flex;
    gap: 10px;
    margin-top: 20px;
}

.cancel-btn,
.save-btn,
.confirm-btn {
    flex: 1;
    padding: 12px;
    border: none;
    border-radius: 5px;
    font-size: 16px;
    font-weight: bold;
    cursor: pointer;
}

.cancel-btn {
    background-color: rgba(255, 255, 255, 0.2);
    color: #fff;
}

.save-btn {
    background-color: #0cb800;
    color: white;
}

.confirm-btn {
    background-color: #f44336;
    color: white;
}
// File: ./css/login.css
/* Login & Registration Styles */

.auth-container {
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: calc(100vh - 70px);
    padding: 20px;
}

.auth-box {
    background-color: rgba(0, 0, 0, 0.4);
    border-radius: 10px;
    box-shadow: 0 5px 20px rgba(0, 0, 0, 0.3);
    width: 100%;
    max-width: 550px;
    overflow: hidden;
}

.auth-header {
    padding: 35px 40px 20px;
    text-align: center;
}

.auth-header h1 {
    margin-bottom: 25px;
    font-size: 2.2rem;
    color: #fff;
}

.auth-tabs {
    display: flex;
    justify-content: center;
    margin-bottom: 20px;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
}

.auth-tab {
    background: none;
    border: none;
    color: #aaa;
    font-size: 1rem;
    padding: 10px 20px;
    margin: 0 5px;
    cursor: pointer;
    transition: all 0.3s ease;
    border-bottom: 2px solid transparent;
}

.auth-tab:hover {
    color: #fff;
}

.auth-tab.active {
    color: #0cb800;
    border-bottom: 2px solid #0cb800;
}

.auth-form-container {
    padding: 0 40px 40px;
}

.auth-form {
    display: none;
}

.auth-form.active {
    display: block;
    animation: fadeIn 0.5s ease;
}

@keyframes fadeIn {
    from {
        opacity: 0;
        transform: translateY(10px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

.form-group {
    margin-bottom: 20px;
}

.form-group label {
    display: block;
    margin-bottom: 8px;
    color: #ccc;
    font-size: 0.9rem;
}

.form-group input[type="text"],
.form-group input[type="password"] {
    width: 100%;
    padding: 14px 18px;
    background-color: rgba(255, 255, 255, 0.08);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 5px;
    color: #fff;
    font-size: 1.1rem;
    transition: all 0.3s ease;
}

.form-group input:focus {
    outline: none;
    background-color: rgba(255, 255, 255, 0.12);
    border-color: rgba(255, 255, 255, 0.2);
}

.checkbox {
    display: flex;
    align-items: center;
}

.checkbox input {
    margin-right: 10px;
    width: 18px;
    height: 18px;
    cursor: pointer;
}

.checkbox label {
    margin-bottom: 0;
    cursor: pointer;
}

.submit-btn {
    width: 100%;
    padding: 12px;
    background-color: #0cb800;
    color: white;
    border: none;
    border-radius: 5px;
    font-size: 1rem;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

.submit-btn:hover {
    background-color: #09a100;
}

.forgot-password {
    text-align: center;
    margin-top: 15px;
}

.forgot-password a,
.checkbox a {
    color: #0cb800;
    text-decoration: none;
    transition: color 0.3s ease;
}

.forgot-password a:hover,
.checkbox a:hover {
    color: #09a100;
    text-decoration: underline;
}


/* Error message styling */

.error-message {
    color: #ff6b6b;
    font-size: 0.85rem;
    margin-top: 5px;
    display: none;
}

.error-message.visible {
    display: block;
}


/* Responsive adjustments */

@media (max-width: 480px) {
    .auth-box {
        max-width: 100%;
    }
    .auth-header {
        padding: 20px 20px 10px;
    }
    .auth-form-container {
        padding: 0 20px 20px;
    }
    .auth-tab {
        padding: 8px 15px;
        font-size: 0.9rem;
    }
}
// File: ./css/movies.css
/* Responzivn√≠ styl pro str√°nku s filmy */


/* Logo v headeru */

.logo h1 {
    margin: 0;
    font-size: 1.5rem;
    font-weight: 700;
    color: #fff;
}


/* Hlavn√≠ kontejner */

.movies-container {
    width: 100%;
    max-width: 1200px;
    margin: 20px auto;
    padding: 0 15px;
}


/* Filtrov√°n√≠ a vyhled√°v√°n√≠ */

.filter-controls {
    display: flex;
    flex-direction: column;
    margin-bottom: 25px;
    gap: 10px;
}

.search-box {
    display: flex;
    width: 100%;
}

.search-box input {
    flex: 1;
    padding: 12px 15px;
    border: none;
    background-color: rgba(255, 255, 255, 0.1);
    color: #fff;
    border-radius: 5px 0 0 5px;
    font-size: 1rem;
}

.search-box input:focus {
    outline: none;
    background-color: rgba(255, 255, 255, 0.15);
}

.search-box button {
    background-color: #0cb800;
    border: none;
    color: white;
    padding: 0 15px;
    cursor: pointer;
    border-radius: 0 5px 5px 0;
    transition: background-color 0.3s;
}

.search-box button:hover {
    background-color: #09a100;
}

.filter-box select {
    width: 100%;
    padding: 12px 15px;
    border: none;
    background-color: rgba(255, 255, 255, 0.1);
    color: #fff;
    border-radius: 5px;
    cursor: pointer;
    font-size: 1rem;
}

.filter-box select:focus {
    outline: none;
    background-color: rgba(255, 255, 255, 0.15);
}


/* Kontejner s filmy - v√Ωchoz√≠ zobrazen√≠ pro mobiln√≠ za≈ô√≠zen√≠ */

.movies-wrapper {
    display: flex;
    flex-direction: column;
    gap: 15px;
    margin-bottom: 30px;
}


/* Karta filmu - v√Ωchoz√≠ horizont√°ln√≠ zobrazen√≠ pro mobil */

.movie-card {
    background-color: rgba(0, 0, 0, 0.3);
    border-radius: 8px;
    overflow: hidden;
    display: flex;
    flex-direction: row;
    box-shadow: 0 3px 10px rgba(0, 0, 0, 0.2);
    transition: transform 0.2s ease;
}

.movie-card:active {
    transform: scale(0.98);
}


/* Obr√°zek filmu */

.movie-image {
    width: 90px;
    min-width: 90px;
    overflow: hidden;
    position: relative;
}

.movie-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
}


/* Obsah filmu */

.movie-content {
    flex: 1;
    padding: 12px;
    display: flex;
    flex-direction: column;
}

.movie-title {
    margin: 0 0 8px;
    font-size: 1.1rem;
    line-height: 1.3;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
    min-height: 1.3em;
}

.movie-details {
    display: flex;
    flex-direction: column;
    gap: 8px;
    flex: 1;
}

.movie-meta {
    display: flex;
    gap: 10px;
    font-size: 0.85rem;
    color: #ccc;
}

.movie-time {
    display: flex;
    flex-direction: column;
    font-size: 0.85rem;
    color: #fff;
    background-color: rgba(255, 255, 255, 0.1);
    padding: 8px 10px;
    border-radius: 5px;
    margin-bottom: 10px;
}


/* Mobile-specific reserve button */

.mobile-reserve {
    margin-top: auto;
    display: block;
}


/* Desktop-specific reserve button (hidden on mobile) */

.desktop-reserve {
    display: none;
    position: absolute;
    bottom: 10px;
    left: 0;
    right: 0;
    text-align: center;
}

.reserve-btn {
    display: inline-block;
    background-color: #0cb800;
    color: white;
    padding: 8px 15px;
    border-radius: 5px;
    font-weight: bold;
    text-decoration: none;
    text-align: center;
    width: 100%;
    box-sizing: border-box;
    transition: background-color 0.3s;
}

.reserve-btn:hover,
.reserve-btn:active {
    background-color: #09a100;
}

.reserve-btn.disabled {
    background-color: #666;
    cursor: not-allowed;
    opacity: 0.7;
}

.ended-label {
    display: inline-block;
    background-color: #555;
    color: #ccc;
    padding: 8px 15px;
    border-radius: 5px;
    font-weight: bold;
    text-align: center;
    width: 100%;
    box-sizing: border-box;
}


/* Stavy film≈Ø */

.movie-card.upcoming .movie-image img,
.movie-card.past .movie-image img {
    filter: grayscale(0.5);
}

.movie-card.past {
    opacity: 0.7;
}


/* Str√°nkov√°n√≠ */

.pagination {
    display: flex;
    justify-content: center;
    align-items: center;
    margin: 25px 0;
    gap: 5px;
}

.pagination-btn {
    width: 40px;
    height: 40px;
    display: flex;
    justify-content: center;
    align-items: center;
    border: none;
    background-color: rgba(255, 255, 255, 0.1);
    color: #fff;
    border-radius: 5px;
    cursor: pointer;
    transition: all 0.3s;
}

.pagination-btn:hover,
.pagination-btn.active {
    background-color: #0cb800;
}

.pagination-next {
    width: 40px;
    height: 40px;
    display: flex;
    justify-content: center;
    align-items: center;
    border: none;
    background-color: rgba(255, 255, 255, 0.1);
    color: #fff;
    border-radius: 5px;
    cursor: pointer;
    transition: all 0.3s;
    font-size: 1.2rem;
}

.pagination-next:hover {
    background-color: #0cb800;
}

.pagination-dots {
    color: #ccc;
    margin: 0 5px;
}


/* Zpr√°va o ≈æ√°dn√Ωch v√Ωsledc√≠ch */

.no-results {
    padding: 25px 15px;
    text-align: center;
    background-color: rgba(0, 0, 0, 0.2);
    border-radius: 8px;
    margin: 20px 0;
}

.no-results-icon {
    font-size: 2rem;
    margin-bottom: 15px;
    color: #666;
}

.no-results h3 {
    font-size: 1.3rem;
    margin-bottom: 10px;
}

.no-results p {
    color: #aaa;
}


/* Responzivn√≠ √∫pravy pro tablety */

@media (min-width: 600px) {
    .filter-controls {
        flex-direction: row;
        justify-content: space-between;
    }
    .search-box {
        width: auto;
        max-width: 60%;
    }
    .filter-box select {
        width: auto;
        min-width: 160px;
    }
    .movie-image {
        width: 120px;
        min-width: 120px;
    }
    .movie-time {
        flex-direction: row;
        justify-content: space-between;
    }
}


/* P≈ôechod na dla≈ædice pro desktop */

@media (min-width: 768px) {
    /* Kontejner s filmy se zmƒõn√≠ na grid */
    .movies-wrapper {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(220px, 1fr));
        gap: 20px;
    }
    /* Karta filmu se zmƒõn√≠ na vertik√°ln√≠ */
    .movie-card {
        flex-direction: column;
        height: 100%;
    }
    /* Obr√°zek filmu zaujme v√≠ce m√≠sta */
    .movie-image {
        width: 100%;
        min-width: auto;
        height: 0;
        padding-top: 130%;
        /* Pomƒõr stran pro n√°hled */
    }
    /* Zmƒõna pozice obr√°zku */
    .movie-image img {
        position: absolute;
        top: 0;
        left: 0;
        transition: transform 0.5s ease;
    }
    .movie-card:hover .movie-image img {
        transform: scale(1.05);
    }
    /* P≈ôepnut√≠ tlaƒç√≠tek rezervace */
    .mobile-reserve {
        display: none;
    }
    .desktop-reserve {
        display: block;
        opacity: 0;
        transition: opacity 0.3s ease;
    }
    .movie-card:hover .desktop-reserve {
        opacity: 1;
    }
    /* Mal√© √∫pravy styl≈Ø pro desktop */
    .movie-title {
        font-size: 1rem;
    }
    .movie-time {
        flex-direction: column;
    }
    .reserve-btn,
    .ended-label {
        width: 80%;
        margin: 0 auto;
    }
}


/* Vƒõt≈°√≠ poƒç√≠taƒçe */

@media (min-width: 992px) {
    .movies-wrapper {
        grid-template-columns: repeat(auto-fill, minmax(240px, 1fr));
    }
    .movie-title {
        font-size: 1.1rem;
    }
}


/* Velk√© obrazovky */

@media (min-width: 1200px) {
    .movies-wrapper {
        grid-template-columns: repeat(auto-fill, minmax(260px, 1fr));
    }
}


/* Loading stav */

.loading-state {
    text-align: center;
    padding: 40px 20px;
    background-color: rgba(0, 0, 0, 0.2);
    border-radius: 8px;
    margin: 20px 0;
}

.loading-spinner {
    width: 40px;
    height: 40px;
    border: 4px solid rgba(255, 255, 255, 0.1);
    border-left-color: #0cb800;
    border-radius: 50%;
    margin: 0 auto 15px;
    animation: spin 1s linear infinite;
}

@keyframes spin {
    to {
        transform: rotate(360deg);
    }
}


/* Stav bez v√Ωsledk≈Ø - roz≈°√≠≈ôen√≠ existuj√≠c√≠ho stylu */

.no-results {
    display: none;
    text-align: center;
    padding: 40px 20px;
    background-color: rgba(0, 0, 0, 0.2);
    border-radius: 8px;
    margin: 20px 0;
}

.no-results.visible {
    display: block;
    animation: fadeIn 0.3s ease;
}

@keyframes fadeIn {
    from {
        opacity: 0;
    }
    to {
        opacity: 1;
    }
}
// File: ./css/my-reservations.css
/* Styles for My Reservations page */

.reservations-container {
    max-width: 900px;
    width: 100%;
    margin: 20px auto;
    padding: 0 15px;
}

.page-title {
    margin-bottom: 25px;
    font-size: 1.8rem;
    text-align: center;
}


/* Tabs */

.tabs {
    display: flex;
    justify-content: center;
    gap: 10px;
    margin-bottom: 25px;
}

.tab-btn {
    background-color: rgba(255, 255, 255, 0.1);
    border: none;
    color: #fff;
    padding: 10px 20px;
    border-radius: 5px;
    cursor: pointer;
    font-size: 0.9rem;
    transition: all 0.3s ease;
}

.tab-btn.active {
    background-color: #0cb800;
}

.tab-content {
    display: block;
}

.tab-content.hidden {
    display: none;
}


/* Reservation cards */

.reservation-list {
    display: flex;
    flex-direction: column;
    gap: 20px;
    margin-bottom: 30px;
}

.reservation-card {
    background-color: rgba(0, 0, 0, 0.2);
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 3px 10px rgba(0, 0, 0, 0.2);
}

.reservation-card.past {
    opacity: 0.7;
}

.reservation-header {
    display: flex;
    padding: 15px;
    border-bottom: 1px solid rgba(255, 255, 255, 0.05);
}

.movie-thumbnail {
    width: 80px;
    height: 120px;
    object-fit: cover;
    border-radius: 5px;
    margin-right: 15px;
}

.reservation-info {
    flex: 1;
}

.movie-title {
    font-size: 1.3rem;
    margin-bottom: 5px;
}

.movie-details {
    color: #ccc;
    font-size: 0.9rem;
    margin-bottom: 10px;
}

.movie-genre {
    margin-right: 15px;
}

.reservation-date {
    font-size: 0.9rem;
    background-color: rgba(255, 255, 255, 0.05);
    padding: 8px;
    border-radius: 5px;
    display: flex;
    align-items: center;
    flex-wrap: wrap;
    margin-top: 10px;
}

.date-icon,
.time-icon {
    margin-right: 5px;
}

.time-icon {
    margin-left: 15px;
}

.reservation-seats {
    padding: 15px;
    border-bottom: 1px solid rgba(255, 255, 255, 0.05);
}

.reservation-seats h4 {
    font-size: 1rem;
    margin-bottom: 10px;
    color: #ccc;
}

.seats-grid {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
}

.seat {
    background-color: rgba(255, 255, 255, 0.05);
    border-radius: 5px;
    padding: 10px;
    display: flex;
    flex-direction: column;
    align-items: center;
    min-width: 100px;
}

.seat-number {
    font-size: 1.5rem;
    font-weight: bold;
    color: #0cb800;
    margin-bottom: 5px;
}

.seat-label {
    font-size: 0.8rem;
    color: #ccc;
}

.reservation-actions {
    padding: 15px;
    display: flex;
    justify-content: space-between;
    align-items: center;
    flex-wrap: wrap;
    gap: 15px;
}

.view-btn {
    padding: 8px 15px;
    border: none;
    border-radius: 5px;
    font-size: 0.9rem;
    cursor: pointer;
    background-color: #2196F3;
    color: white;
    text-decoration: none;
    display: inline-block;
}

.view-btn:hover {
    background-color: #0b7dda;
}

.cancel-btn {
    padding: 8px 15px;
    border: none;
    border-radius: 5px;
    font-size: 0.9rem;
    cursor: pointer;
    background-color: #f44336;
    color: white;
}


/* Empty state */

.empty-state {
    text-align: center;
    padding: 40px 20px;
    background-color: rgba(0, 0, 0, 0.2);
    border-radius: 8px;
    margin-top: 20px;
}

.empty-state.hidden {
    display: none;
}

.empty-icon {
    font-size: 3rem;
    margin-bottom: 15px;
    opacity: 0.5;
}

.empty-state h3 {
    font-size: 1.5rem;
    margin-bottom: 10px;
}

.empty-state p {
    color: #ccc;
    margin-bottom: 20px;
}

.browse-btn {
    display: inline-block;
    background-color: #0cb800;
    color: white;
    padding: 10px 20px;
    border-radius: 5px;
    text-decoration: none;
    transition: background-color 0.3s ease;
}

.browse-btn:hover {
    background-color: #09a100;
}


/* Modal */

.modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(0, 0, 0, 0.8);
    z-index: 1000;
    overflow-y: auto;
}

.modal.active {
    display: block;
}

.modal-content {
    background-color: #333;
    border-radius: 8px;
    width: 90%;
    max-width: 500px;
    margin: 80px auto 20px;
}

.modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 15px 20px;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
}

.modal-title {
    font-size: 1.3rem;
    margin: 0;
}

.close-btn {
    background: none;
    border: none;
    color: #ccc;
    font-size: 1.5rem;
    cursor: pointer;
}

.modal-body {
    padding: 20px;
}

.modal-actions {
    display: flex;
    justify-content: flex-end;
    gap: 10px;
    margin-top: 20px;
}

.primary-btn,
.secondary-btn {
    padding: 10px 20px;
    border: none;
    border-radius: 5px;
    font-size: 0.9rem;
    cursor: pointer;
}

.primary-btn {
    background-color: #0cb800;
    color: white;
}

.secondary-btn {
    background-color: rgba(255, 255, 255, 0.1);
    color: #fff;
}

.primary-btn.confirm-cancel {
    background-color: #f44336;
}


/* Responsive adjustments */

@media (max-width: 600px) {
    .reservation-header {
        flex-direction: column;
    }
    .movie-thumbnail {
        width: 100%;
        height: 150px;
        margin-bottom: 15px;
        margin-right: 0;
    }
    .reservation-actions {
        flex-direction: column;
        align-items: flex-start;
    }
    .reservation-code {
        margin-bottom: 10px;
    }
    .cancel-btn,
    .rate-btn {
        width: 100%;
        padding: 10px;
    }
    .seat {
        min-width: 80px;
    }
}
// File: ./css/vestylu.css
     /* Include all CSS from the responsive-css artifact here */
     
     * {
         box-sizing: border-box;
         margin: 0;
         padding: 0;
         font-family: "Lato", sans-serif;
     }
     
     body {
         background-color: #242333;
         color: #fff;
         display: flex;
         flex-direction: column;
         align-items: center;
         justify-content: center;
         min-height: 100vh;
         padding: 10px;
         margin: 0;
         overflow-x: hidden;
     }
     
     .showcase {
         background: rgba(0, 0, 0, 0.3);
         padding: 15px 20px;
         border-radius: 5px;
         color: #fff;
         list-style-type: none;
         display: flex;
         justify-content: space-between;
         margin-bottom: 30px;
         width: 100%;
         max-width: 400px;
     }
     
     .showcase li {
         display: flex;
         align-items: center;
         justify-content: center;
         margin: 0 10px;
     }
     
     .showcase li .seat {
         margin-right: 10px;
         width: 20px;
         height: 20px;
     }
     
     .screen {
         position: absolute;
         left: 64px;
         right: 0;
         background-color: #fff;
         height: 120px;
         width: 100%;
         max-width: 380px;
         margin: 15px 0 40px;
         transform: rotateX(-45deg);
         box-shadow: 0 3px 20px rgba(255, 255, 255, 0.7);
     }
     
     .room-container {
         width: min(500px, 96vw);
         height: min(500px, 96vw);
         position: relative;
         perspective: 1000px;
         margin: 0 auto 20px;
         transform-origin: center;
         box-sizing: border-box;
         overflow: visible;
     }
     
     .seat {
         background-color: #444451;
         height: 26px;
         width: 32px;
         margin: 3px;
         border-top-left-radius: 10px;
         border-top-right-radius: 10px;
         display: flex;
         justify-content: center;
         align-items: center;
         transition: all 0.3s ease-in-out;
         cursor: pointer;
         font-size: 12px;
     }
     
     .not-allowed {
         cursor: not-allowed;
     }
     
     .seat.selected {
         background-color: #0cb800;
     }
     
     .seat.sold {
         background-color: #fff;
         color: #242333;
         cursor: not-allowed;
     }
     
     .seat:not(.sold):hover {
         cursor: pointer;
         transform: scale(1.2);
     }
     
     .showcase .seat:not(.sold):hover {
         cursor: default;
         transform: scale(1);
     }
     /* Fixed position containers with percentage-based positioning */
     /* Chair top right */
     
     .chair-top-right {
         position: absolute;
         top: 42.6%;
         right: 9.2%;
         width: 16%;
         height: 16%;
         background-color: #666;
         border-radius: 10px;
         display: flex;
         justify-content: center;
         align-items: center;
     }
     /* Chair middle left */
     
     .chair-middle-left {
         position: absolute;
         top: 63.8%;
         left: 9.2%;
         width: 16%;
         height: 16%;
         background-color: #666;
         border-radius: 10px;
         display: flex;
         justify-content: center;
         align-items: center;
     }
     /* Chair left top */
     
     .chair-middle-top {
         position: absolute;
         top: 42.6%;
         left: 9.2%;
         width: 16%;
         height: 16%;
         background-color: #666;
         border-radius: 10px;
         display: flex;
         justify-content: center;
         align-items: center;
     }
     /* Couch horizontal */
     
     .couch-horizontal {
         position: absolute;
         bottom: -6%;
         left: 9.5%;
         width: 68%;
         height: 20%;
         background-color: #666;
         border-radius: 10px;
         display: flex;
         justify-content: space-around;
         align-items: center;
     }
     /* Couch vertical */
     
     .couch-vertical {
         position: absolute;
         bottom: -6%;
         right: 9.2%;
         width: 16%;
         height: 36%;
         background-color: #666;
         border-radius: 10px;
         display: flex;
         flex-direction: column;
         justify-content: space-around;
         align-items: center;
     }
     
     .button-container {
         width: 100%;
         display: flex;
         justify-content: center;
         margin-top: 30px;
     }
     
     .reserve-btn {
         padding: 12px 30px;
         background-color: #0cb800;
         color: white;
         border: none;
         border-radius: 5px;
         font-size: 1rem;
         cursor: pointer;
         transition: background-color 0.3s ease;
     }
     
     .reserve-btn:hover {
         background-color: #09a100;
     }
     
     .reserve-btn:disabled {
         background-color: #333;
         cursor: not-allowed;
         color: #666;
     }
     
     .selection-info {
         margin-top: 20px;
         text-align: center;
     }
     
     .price {
         color: #0cb800;
         font-weight: bold;
     }
     
     .name-label {
         position: absolute;
         font-size: 10px;
         bottom: -15px;
         width: 50px;
         text-align: center;
         left: 50%;
         transform: translateX(-50%);
         color: #aaa;
     }
     /* Mobile responsive design */
     
     @media (max-width: 768px) {
         .showcase {
             display: flex;
             flex-direction: row;
             justify-content: space-between;
             width: min(96vw, 500px);
             padding: 10px;
         }
         .showcase li {
             margin: 0 5px;
         }
         /* Make container fill the screen width */
         .room-container {
             width: min(96vw, 500px);
             height: min(96vw, 500px);
         }
         /* Adjust seats for aspect ratio */
         .seat {
             width: min(28px, 5.5vw);
             height: min(22px, 4.5vw);
             margin: min(3px, 0.6vw);
         }
         /* Ensure screen is centered */
         .screen {
             left: 0;
             width: 90%;
             margin: 15px auto 40px;
         }
     }
     
     @media (max-width: 480px) {
         /* Even smaller screens */
         .room-container {
             width: 98vw;
             height: 98vw;
             padding: 0 5px;
         }
         .screen {
             width: 85%;
         }
         .showcase {
             padding: 8px 10px;
         }
     }
     
     @media (max-width: 360px) {
         /* Very small screens */
         .seat {
             width: min(24px, 6vw);
             height: min(20px, 5vw);
             margin: min(2px, 0.5vw);
         }
         .showcase li .seat {
             width: 18px;
             height: 18px;
         }
     }
     /* Header styles */
     
     .site-header {
         background-color: rgba(0, 0, 0, 0.5);
         padding: 15px 20px;
         display: flex;
         justify-content: space-between;
         align-items: center;
         width: 100%;
         position: fixed;
         top: 0;
         left: 0;
         z-index: 1000;
         box-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
     }
     
     .back-button a {
         color: #fff;
         text-decoration: none;
         display: flex;
         align-items: center;
         transition: all 0.3s ease;
     }
     
     .back-button a:hover {
         transform: translateX(-5px);
     }
     
     .back-arrow {
         font-size: 1.5rem;
         margin-right: 8px;
     }
     
     .user-menu-container {
         position: relative;
     }
     
     .user-icon {
         width: 40px;
         height: 40px;
         background-color: #444451;
         border-radius: 50%;
         display: flex;
         justify-content: center;
         align-items: center;
         cursor: pointer;
         transition: background-color 0.3s ease;
     }
     
     .user-icon:hover {
         background-color: #555562;
     }
     
     .user-icon-symbol {
         font-size: 1.3rem;
         color: #fff;
     }
     
     .dropdown-menu {
         position: absolute;
         top: 50px;
         right: 0;
         background-color: #333;
         border-radius: 5px;
         width: 150px;
         box-shadow: 0 3px 10px rgba(0, 0, 0, 0.3);
         display: none;
         overflow: hidden;
     }
     
     .dropdown-menu.active {
         display: block;
         animation: fade-in 0.3s ease;
     }
     
     .dropdown-menu ul {
         list-style: none;
         padding: 0;
         margin: 0;
     }
     
     .dropdown-menu ul li {
         width: 100%;
     }
     
     .dropdown-menu ul li a {
         color: #fff;
         text-decoration: none;
         display: block;
         padding: 12px 15px;
         transition: background-color 0.3s ease;
     }
     
     .dropdown-menu ul li a:hover {
         background-color: #444451;
     }
     
     @keyframes fade-in {
         from {
             opacity: 0;
             transform: translateY(-10px);
         }
         to {
             opacity: 1;
             transform: translateY(0);
         }
     }
     /* √öprava pro mobiln√≠ za≈ô√≠zen√≠ */
     
     @media (max-width: 768px) {
         .back-text {
             display: none;
         }
         .back-arrow {
             font-size: 1.8rem;
         }
         .user-icon {
             width: 35px;
             height: 35px;
         }
     }
     /* √öprava odsazen√≠ obsahu str√°nky */
     
     body {
         padding-top: 70px;
     }
     /* Login & Registration Styles */
     
     .auth-container {
         display: flex;
         justify-content: center;
         align-items: center;
         min-height: calc(100vh - 70px);
         padding: 20px;
     }
     
     .auth-box {
         background-color: rgba(0, 0, 0, 0.4);
         border-radius: 10px;
         box-shadow: 0 5px 20px rgba(0, 0, 0, 0.3);
         width: 100%;
         max-width: 450px;
         overflow: hidden;
     }
     
     .auth-header {
         padding: 25px 30px 15px;
         text-align: center;
     }
     
     .auth-header h1 {
         margin-bottom: 20px;
         font-size: 1.8rem;
         color: #fff;
     }
     
     .auth-tabs {
         display: flex;
         justify-content: center;
         margin-bottom: 20px;
         border-bottom: 1px solid rgba(255, 255, 255, 0.1);
     }
     
     .auth-tab {
         background: none;
         border: none;
         color: #aaa;
         font-size: 1rem;
         padding: 10px 20px;
         margin: 0 5px;
         cursor: pointer;
         transition: all 0.3s ease;
         border-bottom: 2px solid transparent;
     }
     
     .auth-tab:hover {
         color: #fff;
     }
     
     .auth-tab.active {
         color: #0cb800;
         border-bottom: 2px solid #0cb800;
     }
     
     .auth-form-container {
         padding: 0 30px 30px;
     }
     
     .auth-form {
         display: none;
     }
     
     .auth-form.active {
         display: block;
         animation: fadeIn 0.5s ease;
     }
     
     @keyframes fadeIn {
         from {
             opacity: 0;
             transform: translateY(10px);
         }
         to {
             opacity: 1;
             transform: translateY(0);
         }
     }
     
     .form-group {
         margin-bottom: 20px;
     }
     
     .form-group label {
         display: block;
         margin-bottom: 8px;
         color: #ccc;
         font-size: 0.9rem;
     }
     
     .form-group input[type="text"],
     .form-group input[type="email"],
     .form-group input[type="password"] {
         width: 100%;
         padding: 12px 15px;
         background-color: rgba(255, 255, 255, 0.08);
         border: 1px solid rgba(255, 255, 255, 0.1);
         border-radius: 5px;
         color: #fff;
         font-size: 1rem;
         transition: all 0.3s ease;
     }
     
     .form-group input:focus {
         outline: none;
         background-color: rgba(255, 255, 255, 0.12);
         border-color: rgba(255, 255, 255, 0.2);
     }
     
     .checkbox {
         display: flex;
         align-items: center;
     }
     
     .checkbox input {
         margin-right: 10px;
         width: 18px;
         height: 18px;
         cursor: pointer;
     }
     
     .checkbox label {
         margin-bottom: 0;
         cursor: pointer;
     }
     
     .submit-btn {
         width: 100%;
         padding: 12px;
         background-color: #0cb800;
         color: white;
         border: none;
         border-radius: 5px;
         font-size: 1rem;
         cursor: pointer;
         transition: background-color 0.3s ease;
     }
     
     .submit-btn:hover {
         background-color: #09a100;
     }
     
     .forgot-password {
         text-align: center;
         margin-top: 15px;
     }
     
     .forgot-password a,
     .checkbox a {
         color: #0cb800;
         text-decoration: none;
         transition: color 0.3s ease;
     }
     
     .forgot-password a:hover,
     .checkbox a:hover {
         color: #09a100;
         text-decoration: underline;
     }
     /* Error message styling */
     
     .error-message {
         color: #ff6b6b;
         font-size: 0.85rem;
         margin-top: 5px;
         display: none;
     }
     
     .error-message.visible {
         display: block;
     }
     /* Responsive adjustments */
     
     @media (max-width: 480px) {
         .auth-box {
             max-width: 100%;
         }
         .auth-header {
             padding: 20px 20px 10px;
         }
         .auth-form-container {
             padding: 0 20px 20px;
         }
         .auth-tab {
             padding: 8px 15px;
             font-size: 0.9rem;
         }
     }
     
     .seat-label {
         color: #0e0e0e;
         position: absolute;
         bottom: 3px;
         font-size: small;
     }
// File: ./db_config.php
<?php
// File: db_config.php
// Database connection parameters
$db_config = [
    'host' => '10.40.20.201',
    'port' => '5432',
    'db_name' => 'cb',
    'user' => 'cb_user',
    'password' => 'mEga_cbA_pAsS*3289'
];

/**
 * Function to get database connection
 * @return PDO Database connection object
 */
function getDbConnection() {
    global $db_config;
    
    try {
        // Create a new PDO instance
        $dsn = "pgsql:host={$db_config['host']};port={$db_config['port']};dbname={$db_config['db_name']}";
        $pdo = new PDO($dsn, $db_config['user'], $db_config['password']);
        
        // Set error mode to exception
        $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
        
        return $pdo;
    } catch (PDOException $e) {
        // Handle connection error
        die("Database connection failed: " . $e->getMessage());
    }
}
?>
// File: ./index.php
<!DOCTYPE html>
<html lang="cs">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CineBukay | Programy film≈Ø</title>
    <link href="https://fonts.googleapis.com/css?family=Lato&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="./css/vestylu.css">
    <link rel="stylesheet" href="./css/movies.css">
</head>
<body>
    <?php
    require_once 'session_check.php';
    $userMenu = getUserMenuHTML(); // Z√≠sk√° HTML pro menu podle stavu p≈ôihl√°≈°en√≠
    ?>

    <header class="site-header">
        <div class="logo">
            <h1>CineBukay</h1>
        </div>
        <?php echo $userMenu; ?>
    </header>

    <main class="movies-container">
        <div class="filter-controls">
            <div class="search-box">
                <input type="text" id="search-input" placeholder="Hledat film...">
                <button id="search-btn">
                    <span>&#128269;</span>
                </button>
            </div>
            <div class="filter-box">
                <select id="filter-select">
                    <option value="all">V≈°echny filmy</option>
                    <option value="upcoming">P≈ôipravovan√©</option>
                    <option value="now">Nyn√≠ prom√≠t√°me</option>
                    <option value="past">Archiv</option>
                </select>
            </div>
        </div>

        <!-- Loading indik√°tor -->
        <div id="loading" class="loading-state">
            <div class="loading-spinner"></div>
            <p>Naƒç√≠t√°m filmy...</p>
        </div>

        <!-- Kontejner pro filmy -->
        <div class="movies-wrapper" id="movies-wrapper">
            <!-- Sem budou dynamicky vlo≈æeny karty film≈Ø -->
        </div>

        <!-- Stav bez v√Ωsledk≈Ø -->
        <div id="no-results" class="no-results">
            <div class="no-results-icon">&#128269;</div>
            <h3>≈Ω√°dn√© filmy nenalezeny</h3>
            <p>Zkuste upravit va≈°e hled√°n√≠ nebo filtr.</p>
        </div>

        <!-- Str√°nkov√°n√≠ -->
        <div class="pagination">
            <button class="pagination-btn active">1</button>
            <button class="pagination-btn">2</button>
            <button class="pagination-btn">3</button>
            <span class="pagination-dots">...</span>
            <button class="pagination-btn">10</button>
            <button class="pagination-next">
                <span>&#8594;</span>
            </button>
        </div>
    </main>

    <script src="./js/main.js"></script>
</body>
</html>
// File: ./js/admin.js
document.addEventListener('DOMContentLoaded', function() {
            // Z√°kladn√≠ reference na elementy
            const movieModal = document.getElementById('movie-modal');
            const deleteModal = document.getElementById('delete-modal');
            const addMovieBtn = document.getElementById('add-movie-btn');
            const movieForm = document.getElementById('movie-form');
            const genreInput = document.getElementById('movie-genre');
            const genreTags = document.getElementById('genre-tags');
            const imageUpload = document.getElementById('image-upload');
            const movieImage = document.getElementById('movie-image');

            // Naƒçten√≠ film≈Ø p≈ôi startu
            loadMovies();

            // P≈ôid√°n√≠ nov√©ho filmu - otev≈ôen√≠ modalu
            addMovieBtn.addEventListener('click', function() {
                resetForm();
                movieModal.classList.add('active');
                document.body.style.overflow = 'hidden';
            });

            // Zav≈ôen√≠ mod√°l≈Ø
            document.querySelectorAll('.close-btn, .cancel-btn').forEach(btn => {
                btn.addEventListener('click', closeModals);
            });

            // Odesl√°n√≠ formul√°≈ôe
            movieForm.addEventListener('submit', async function(e) {
                e.preventDefault();

                const formData = new FormData();
                formData.append('action', 'add');

                // Z√°kladn√≠ √∫daje
                const title = document.getElementById('movie-title').value;
                const duration = document.getElementById('movie-duration').value;
                const dateFrom = document.getElementById('date-from').value;
                const description = document.getElementById('movie-description').value;

                // Povinn√° pole
                if (!title || !duration || !dateFrom) {
                    alert('Vypl≈àte pros√≠m v≈°echna povinn√° pole (n√°zev, d√©lka, datum)');
                    return;
                }

                formData.append('title', title);
                formData.append('duration', duration);
                formData.append('screening_date', dateFrom);
                formData.append('description', description);

                // ≈Ω√°nry
                const genres = Array.from(genreTags.querySelectorAll('.genre-tag'))
                    .map(tag => tag.textContent.replace('√ó', '').trim())
                    .filter(genre => genre);
                formData.append('genre', genres.length ? genres.join(', ') : 'Neza≈ôazeno');

                // ƒåasy prom√≠t√°n√≠
                const times = Array.from(document.querySelectorAll('.time-input'))
                    .map(input => input.value)
                    .filter(time => time);
                if (!times.length) {
                    alert('P≈ôidejte pros√≠m alespo≈à jeden ƒças prom√≠t√°n√≠');
                    return;
                }
                formData.append('screening_time', JSON.stringify(times));

                // Debug v√Ωpis
                console.log('Odes√≠lan√° data:');
                for (let [key, value] of formData.entries()) {
                    console.log(`${key}: ${value}`);
                }

                try {
                    const response = await fetch('movie_handlers.php', {
                        method: 'POST',
                        body: formData
                    });

                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }

                    const result = await response.json();
                    console.log('Server response:', result);

                    if (result.status === 'success') {
                        alert(result.message);
                        closeModals();
                        loadMovies();
                    } else {
                        throw new Error(result.message);
                    }
                } catch (error) {
                    console.error('Error:', error);
                    alert(`Chyba p≈ôi ukl√°d√°n√≠ filmu: ${error.message}`);
                }
            });

            // Spr√°va ≈æ√°nr≈Ø
            genreInput.addEventListener('keydown', function(e) {
                if (e.key === 'Enter' || e.key === ',') {
                    e.preventDefault();
                    addGenreTag(this.value);
                    this.value = '';
                }
            });

            function addGenreTag(genre) {
                genre = genre.trim();
                if (!genre) return;

                // Kontrola duplicity
                const existingTags = Array.from(genreTags.querySelectorAll('.genre-tag'))
                    .map(tag => tag.textContent.replace('√ó', '').trim().toLowerCase());

                if (existingTags.includes(genre.toLowerCase())) return;

                const tag = document.createElement('div');
                tag.className = 'genre-tag';
                tag.innerHTML = `
            ${genre}
            <button type="button" class="remove-tag">&times;</button>
        `;

                tag.querySelector('.remove-tag').addEventListener('click', () => tag.remove());
                genreTags.appendChild(tag);
            }

            // Spr√°va obr√°zku
            imageUpload.addEventListener('click', () => movieImage.click());

            movieImage.addEventListener('change', function(e) {
                const file = e.target.files[0];
                if (file) {
                    if (!file.type.startsWith('image/')) {
                        alert('Pros√≠m vyberte pouze obr√°zky');
                        return;
                    }

                    const reader = new FileReader();
                    reader.onload = function(e) {
                        imageUpload.innerHTML = `<img src="${e.target.result}" alt="N√°hled" style="max-width: 100%; max-height: 100%;">`;
                    };
                    reader.readAsDataURL(file);
                }
            });

            // P≈ôid√°v√°n√≠ ƒças≈Ø prom√≠t√°n√≠
            document.getElementById('add-time').addEventListener('click', addTimeInput);

            function addTimeInput(value = '') {
                const timeGroup = document.createElement('div');
                timeGroup.className = 'time-group';
                timeGroup.innerHTML = `
            <input type="time" class="form-input time-input" value="${value}">
            <button type="button" class="remove-time">&times;</button>
        `;

                const timesContainer = document.getElementById('times-container');
                timesContainer.insertBefore(timeGroup, document.getElementById('add-time'));

                timeGroup.querySelector('.remove-time').addEventListener('click', function() {
                    const timeGroups = document.querySelectorAll('.time-group');
                    if (timeGroups.length > 1) {
                        timeGroup.remove();
                    } else {
                        timeGroup.querySelector('input').value = '';
                    }
                });
            }

            // Naƒçten√≠ film≈Ø z API
            async function loadMovies() {
                try {
                    const response = await fetch('movie_handlers.php');
                    const movies = await response.json();

                    if (Array.isArray(movies)) {
                        updateMoviesUI(movies);
                    } else {
                        console.error('Neplatn√° odpovƒõƒè ze serveru:', movies);
                    }
                } catch (error) {
                    console.error('Chyba p≈ôi naƒç√≠t√°n√≠ film≈Ø:', error);
                }
            }

            // Aktualizace UI s filmy
            function updateMoviesUI(movies) {
                const tableBody = document.querySelector('.admin-table tbody');
                const cardsContainer = document.querySelector('.movies-cards');

                tableBody.innerHTML = '';
                cardsContainer.innerHTML = '';

                movies.forEach(movie => {
                            // ≈ò√°dek pro desktop tabulku
                            const row = document.createElement('tr');
                            row.innerHTML = `
                <td>
                    <div class="movie-name-with-image">
                        ${movie.image ? 
                            `<img src="data:image/jpeg;base64,${movie.image}" alt="${movie.title}">` :
                            '<div class="no-image">No image</div>'
                        }
                        <span>${movie.title}</span>
                    </div>
                </td>
                <td>${movie.genre}</td>
                <td>${movie.duration} min</td>
                <td>${formatDate(movie.screening_date)}</td>
                <td>${formatTime(movie.screening_time)}</td>
                <td>
                    <div class="action-buttons">
                        <button class="edit-btn" data-id="${movie.id_screening}">Upravit</button>
                        <button class="delete-btn" data-id="${movie.id_screening}">Smazat</button>
                    </div>
                </td>
            `;
            tableBody.appendChild(row);

            // Karta pro mobiln√≠ zobrazen√≠
            const card = document.createElement('div');
            card.className = 'movie-card';
            card.innerHTML = `
                <div class="movie-header">
                    ${movie.image ? 
                        `<img src="data:image/jpeg;base64,${movie.image}" alt="${movie.title}" class="movie-image">` :
                        '<div class="no-image">No image</div>'
                    }
                    <div>
                        <div class="movie-title">${movie.title}</div>
                        <div class="movie-meta">${movie.genre} ‚Ä¢ ${movie.duration} min</div>
                    </div>
                </div>
                <div class="movie-details">
                    <div class="movie-dates">
                        <div><span class="date-label">Datum:</span> ${formatDate(movie.screening_date)}</div>
                        <div><span class="time-label">ƒåasy:</span> ${formatTime(movie.screening_time)}</div>
                    </div>
                </div>
                <div class="movie-actions">
                    <button class="action-btn edit-btn" data-id="${movie.id_screening}">Upravit</button>
                    <button class="action-btn delete-btn" data-id="${movie.id_screening}">Smazat</button>
                </div>
            `;
            cardsContainer.appendChild(card);
        });

        // P≈ôid√°n√≠ event listener≈Ø pro akƒçn√≠ tlaƒç√≠tka
        setupActionButtons();
    }

    // Nastaven√≠ event listener≈Ø pro tlaƒç√≠tka
    function setupActionButtons() {
        // Edit tlaƒç√≠tka
        document.querySelectorAll('.edit-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                const id = this.getAttribute('data-id');
                editMovie(id);
            });
        });

        // Delete tlaƒç√≠tka
        document.querySelectorAll('.delete-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                const id = this.getAttribute('data-id');
                const title = this.closest('tr, .movie-card')
                    .querySelector('.movie-title, .movie-name-with-image span').textContent;
                showDeleteConfirmation(id, title);
            });
        });
    }

    // Helper funkce
    function closeModals() {
        movieModal.classList.remove('active');
        deleteModal.classList.remove('active');
        document.body.style.overflow = '';
    }

    function resetForm() {
        movieForm.reset();
        genreTags.innerHTML = '';
        imageUpload.innerHTML = `
            <div class="upload-icon">üì∑</div>
            <div>Nahr√°t obr√°zek</div>
        `;

        // Reset ƒças≈Ø
        const timeGroups = document.querySelectorAll('.time-group');
        timeGroups.forEach((group, index) => {
            if (index > 0) group.remove();
        });
        if (timeGroups.length === 0) {
            addTimeInput();
        } else {
            timeGroups[0].querySelector('input').value = '';
        }
    }

    function formatDate(dateStr) {
        return new Date(dateStr).toLocaleDateString('cs-CZ');
    }

    function formatTime(timeStr) {
        if (!timeStr) return '';
        return timeStr;
    }

    // Init
    if (!document.querySelector('.time-group')) {
        addTimeInput();
    }
});
// File: ./js/login.js
document.addEventListener('DOMContentLoaded', function() {
    // Tab switching functionality
    const tabs = document.querySelectorAll('.auth-tab');
    const forms = document.querySelectorAll('.auth-form');

    tabs.forEach(tab => {
        tab.addEventListener('click', function() {
            // Remove active class from all tabs and forms
            tabs.forEach(t => t.classList.remove('active'));
            forms.forEach(f => f.classList.remove('active'));

            // Add active class to clicked tab and corresponding form
            this.classList.add('active');
            const formId = `${this.dataset.tab}-form`;
            document.getElementById(formId).classList.add('active');
        });
    });

    // Login form submission handling
    const loginForm = document.getElementById('login-form');
    loginForm.addEventListener('submit', function(e) {
        e.preventDefault();

        // Get form values
        const username = document.getElementById('login-username').value;
        const password = document.getElementById('login-password').value;
        const rememberMe = document.getElementById('remember-me').checked;

        // Basic validation
        if (!username || !password) {
            showError(loginForm, 'Vypl≈àte pros√≠m v≈°echna povinn√° pole.');
            return;
        }

        // Send AJAX request
        const formData = new FormData();
        formData.append('action', 'login');
        formData.append('username', username);
        formData.append('password', password);
        formData.append('remember', rememberMe);

        fetch('auth_handlers.php', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.status === 'success') {
                    showSuccess(loginForm, data.message);

                    // Redirect after a short delay
                    setTimeout(() => {
                        window.location.href = data.redirect || 'index.php';
                    }, 1000);
                } else {
                    showError(loginForm, data.message);
                }
            })
            .catch(error => {
                showError(loginForm, 'Do≈°lo k chybƒõ p≈ôi p≈ôihla≈°ov√°n√≠. Zkuste to pros√≠m znovu.');
                console.error('Error:', error);
            });
    });

    // Registration form submission handling
    const registerForm = document.getElementById('register-form');
    registerForm.addEventListener('submit', function(e) {
        e.preventDefault();

        // Get form values
        const username = document.getElementById('register-username').value;
        const password = document.getElementById('register-password').value;
        const passwordConfirm = document.getElementById('register-password-confirm').value;
        const agreeTerms = document.getElementById('agree-terms').checked;

        // Basic validation
        if (!username || !password || !passwordConfirm) {
            showError(registerForm, 'Vypl≈àte pros√≠m v≈°echna povinn√° pole.');
            return;
        }

        if (password !== passwordConfirm) {
            showError(registerForm, 'Hesla se neshoduj√≠.');
            return;
        }

        if (!agreeTerms) {
            showError(registerForm, 'Pro registraci mus√≠te souhlasit s obchodn√≠mi podm√≠nkami.');
            return;
        }

        // Password strength validation
        if (password.length < 8) {
            showError(registerForm, 'Heslo mus√≠ m√≠t alespo≈à 8 znak≈Ø.');
            return;
        }

        // Send AJAX request
        const formData = new FormData();
        formData.append('action', 'register');
        formData.append('username', username);
        formData.append('password', password);

        fetch('auth_handlers.php', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.status === 'success') {
                    showSuccess(registerForm, data.message);

                    // Switch to login tab after successful registration
                    setTimeout(() => {
                        tabs[0].click();
                        document.getElementById('login-username').value = username;
                    }, 1500);
                } else {
                    showError(registerForm, data.message);
                }
            })
            .catch(error => {
                showError(registerForm, 'Do≈°lo k chybƒõ p≈ôi registraci. Zkuste to pros√≠m znovu.');
                console.error('Error:', error);
            });
    });

    // Error message helper function
    function showError(form, message) {
        showMessage(form, message, 'error-message');
    }

    // Success message helper function
    function showSuccess(form, message) {
        showMessage(form, message, 'success-message');
    }

    // Generic message helper function
    function showMessage(form, message, className) {
        // Check if message element already exists
        let messageElement = form.querySelector('.' + className);

        // If not, create it
        if (!messageElement) {
            messageElement = document.createElement('div');
            messageElement.className = className;
            form.insertBefore(messageElement, form.firstChild);
        }

        // Set message and show
        messageElement.textContent = message;
        messageElement.classList.add('visible');

        // Hide after 5 seconds
        setTimeout(() => {
            messageElement.classList.remove('visible');
        }, 5000);
    }
});
// File: ./js/main.js
document.addEventListener('DOMContentLoaded', function() {
            // Naƒçten√≠ film≈Ø p≈ôi startu
            loadMovies();

            // Elementy pro vyhled√°v√°n√≠ a filtrov√°n√≠
            const searchInput = document.getElementById('search-input');
            const searchBtn = document.getElementById('search-btn');
            const filterSelect = document.getElementById('filter-select');
            const moviesWrapper = document.getElementById('movies-wrapper');
            const paginationBtns = document.querySelectorAll('.pagination-btn');
            const paginationNext = document.querySelector('.pagination-next');

            // User menu
            const userIcon = document.getElementById('user-icon');
            const dropdownMenu = document.getElementById('dropdown-menu');

            // Event listeners pro vyhled√°v√°n√≠ a filtrov√°n√≠
            searchBtn.addEventListener('click', filterMovies);
            searchInput.addEventListener('keyup', e => {
                if (e.key === 'Enter') filterMovies();
            });
            filterSelect.addEventListener('change', filterMovies);

            // User menu toggle
            userIcon.addEventListener('click', function(e) {
                e.stopPropagation();
                dropdownMenu.classList.toggle('active');
            });

            document.addEventListener('click', function() {
                if (dropdownMenu.classList.contains('active')) {
                    dropdownMenu.classList.remove('active');
                }
            });

            // Naƒçten√≠ film≈Ø
            async function loadMovies() {
                try {
                    const response = await fetch('movie_handlers.php');
                    const movies = await response.json();

                    if (Array.isArray(movies)) {
                        updateMoviesUI(movies);
                    }
                } catch (error) {
                    console.error('Chyba p≈ôi naƒç√≠t√°n√≠ film≈Ø:', error);
                    showError('Nepoda≈ôilo se naƒç√≠st filmy. Zkuste to pros√≠m znovu.');
                }
            }

            // Aktualizace UI
            function updateMoviesUI(movies) {
                moviesWrapper.innerHTML = '';

                const now = new Date();
                movies.forEach(movie => {
                    const screeningDate = new Date(movie.screening_date);
                    const isPast = screeningDate < now;
                    const isUpcoming = screeningDate > new Date(now.getTime() + 7 * 24 * 60 * 60 * 1000); // 7 dn√≠ dop≈ôedu

                    const card = createMovieCard(movie, isPast, isUpcoming);
                    moviesWrapper.appendChild(card);
                });

                setupMobileCardClicks();
            }

            // Vytvo≈ôen√≠ karty filmu
            function createMovieCard(movie, isPast, isUpcoming) {
                const card = document.createElement('div');
                card.className = `movie-card${isPast ? ' past' : ''}${isUpcoming ? ' upcoming' : ''}`;

                const times = formatTimes(movie.screening_time);
                const dateRange = formatDateRange(movie.screening_date);

                card.innerHTML = `
            <div class="movie-image">
                <img src="data:image/jpeg;base64,${movie.image}" alt="${movie.title}">
                <div class="desktop-reserve">
                    ${isPast ? 
                        '<span class="ended-label">Projekce skonƒçila</span>' :
                        isUpcoming ? 
                            '<span class="reserve-btn disabled">Rezervovat</span>' :
                            `<a href="reserve.php?id=${movie.id_screening}" class="reserve-btn">Rezervovat</a>`
                    }
                </div>
            </div>
            <div class="movie-content">
                <h3 class="movie-title">${movie.title}</h3>
                <div class="movie-details">
                    <div class="movie-meta">
                        <span class="movie-duration">${movie.duration} min</span>
                        <span class="movie-genre">${movie.genre}</span>
                    </div>
                    <div class="movie-time">
                        <span class="date">${dateRange}</span>
                        ${!isUpcoming && !isPast ? `<span class="time">${times}</span>` : ''}
                    </div>
                </div>
                <div class="mobile-reserve">
                    ${isPast ? 
                        '<span class="ended-label">Projekce skonƒçila</span>' :
                        isUpcoming ? 
                            '<span class="reserve-btn disabled">Rezervovat</span>' :
                            `<a href="reserve.php?id=${movie.id_screening}" class="reserve-btn">Rezervovat</a>`
                    }
                </div>
            </div>
        `;

        return card;
    }

    // Filtrov√°n√≠ film≈Ø
    function filterMovies() {
        const searchTerm = searchInput.value.toLowerCase();
        const filterValue = filterSelect.value;
        const cards = document.querySelectorAll('.movie-card');

        let visibleCount = 0;
        cards.forEach(card => {
            const title = card.querySelector('.movie-title').textContent.toLowerCase();
            const genre = card.querySelector('.movie-genre').textContent.toLowerCase();
            const isPast = card.classList.contains('past');
            const isUpcoming = card.classList.contains('upcoming');

            let matchesFilter = true;
            switch (filterValue) {
                case 'upcoming':
                    matchesFilter = isUpcoming;
                    break;
                case 'now':
                    matchesFilter = !isPast && !isUpcoming;
                    break;
                case 'past':
                    matchesFilter = isPast;
                    break;
            }

            const matchesSearch = title.includes(searchTerm) || genre.includes(searchTerm);
            const shouldShow = matchesSearch && matchesFilter;
            
            card.style.display = shouldShow ? '' : 'none';
            if (shouldShow) visibleCount++;
        });

        // Zobrazen√≠ zpr√°vy, pokud nejsou nalezeny ≈æ√°dn√© filmy
        handleNoResults(visibleCount);
    }

    // Zobrazen√≠/skryt√≠ zpr√°vy o nenalezen√Ωch filmech
    function handleNoResults(visibleCount) {
        let noResultsMsg = document.getElementById('no-results-message');
        
        if (visibleCount === 0) {
            if (!noResultsMsg) {
                noResultsMsg = document.createElement('div');
                noResultsMsg.id = 'no-results-message';
                noResultsMsg.className = 'no-results';
                noResultsMsg.innerHTML = `
                    <div class="no-results-icon">&#128269;</div>
                    <h3>≈Ω√°dn√© filmy nenalezeny</h3>
                    <p>Zkuste upravit va≈°e hled√°n√≠ nebo filtr.</p>
                `;
                moviesWrapper.appendChild(noResultsMsg);
            }
        } else if (noResultsMsg) {
            noResultsMsg.remove();
        }
    }

    // Nastaven√≠ klik√°n√≠ na karty na mobiln√≠ch za≈ô√≠zen√≠ch
    function setupMobileCardClicks() {
        if (window.innerWidth < 768) {
            const movieCards = document.querySelectorAll('.movie-card:not(.past):not(.upcoming)');
            
            movieCards.forEach(card => {
                const reserveBtn = card.querySelector('.mobile-reserve .reserve-btn');
                if (!reserveBtn || reserveBtn.classList.contains('disabled')) return;

                const reserveLink = reserveBtn.getAttribute('href');
                
                card.addEventListener('click', function(e) {
                    if (e.target === reserveBtn || reserveBtn.contains(e.target)) return;
                    window.location.href = reserveLink;
                });
            });
        }
    }

    // Pagination
    paginationBtns.forEach(btn => {
        btn.addEventListener('click', function() {
            paginationBtns.forEach(b => b.classList.remove('active'));
            this.classList.add('active');
            window.scrollTo({ top: 0, behavior: 'smooth' });
        });
    });

    paginationNext.addEventListener('click', function() {
        const activeBtn = document.querySelector('.pagination-btn.active');
        const nextBtn = activeBtn.nextElementSibling;
        
        if (nextBtn && nextBtn.classList.contains('pagination-btn')) {
            nextBtn.click();
        }
    });

    // Helper funkce
    function formatTimes(timeStr) {
        try {
            const times = JSON.parse(timeStr);
            return times.join(', ');
        } catch {
            return timeStr;
        }
    }

    function formatDateRange(dateStr) {
        const date = new Date(dateStr);
        const now = new Date();
        
        if (date < now) {
            return `Skonƒçilo ${date.toLocaleDateString('cs-CZ')}`;
        }
        
        if (date > new Date(now.getTime() + 7 * 24 * 60 * 60 * 1000)) {
            return `Od ${date.toLocaleDateString('cs-CZ')}`;
        }

        const endDate = new Date(date);
        endDate.setDate(endDate.getDate() + 14); // p≈ôedpokl√°d√°me 14denn√≠ prom√≠t√°n√≠
        
        return `${date.toLocaleDateString('cs-CZ')} - ${endDate.toLocaleDateString('cs-CZ')}`;
    }

    // Tooltip pro dlouh√© n√°zvy
    function setupTooltips() {
        const movieTitles = document.querySelectorAll('.movie-title');
        movieTitles.forEach(title => {
            if (title.scrollHeight > title.clientHeight) {
                title.setAttribute('title', title.textContent);
            }
        });
    }

    // Event listener pro zmƒõnu velikosti okna
    window.addEventListener('resize', function() {
        setupMobileCardClicks();
        setupTooltips();
    });

    // Inicializace tooltip≈Ø
    setupTooltips();
});
// File: ./js/movies.js
document.addEventListener('DOMContentLoaded', function() {
    // Prvky u≈æivatelsk√©ho menu
    const userIcon = document.getElementById('user-icon');
    const dropdownMenu = document.getElementById('dropdown-menu');

    // Filtrov√°n√≠ a vyhled√°v√°n√≠
    const searchInput = document.getElementById('search-input');
    const searchBtn = document.getElementById('search-btn');
    const filterSelect = document.getElementById('filter-select');
    const moviesWrapper = document.getElementById('movies-wrapper');
    const paginationBtns = document.querySelectorAll('.pagination-btn');
    const paginationNext = document.querySelector('.pagination-next');

    // P≈ôid√°n√≠ funkcionality pro u≈æivatelsk√© menu
    userIcon.addEventListener('click', function(e) {
        e.stopPropagation();
        dropdownMenu.classList.toggle('active');
    });

    // Zav≈ôen√≠ menu p≈ôi kliknut√≠ mimo
    document.addEventListener('click', function() {
        if (dropdownMenu.classList.contains('active')) {
            dropdownMenu.classList.remove('active');
        }
    });

    // Zabr√°nƒõn√≠ ≈°√≠≈ôen√≠ kliknut√≠ v dropdown menu
    dropdownMenu.addEventListener('click', function(e) {
        e.stopPropagation();
    });

    // Funkce pro vyhled√°v√°n√≠ film≈Ø
    function searchMovies() {
        const searchTerm = searchInput.value.toLowerCase().trim();
        const filterValue = filterSelect.value;
        const movieCards = document.querySelectorAll('.movie-card');

        movieCards.forEach(card => {
            const title = card.querySelector('.movie-title').textContent.toLowerCase();
            const genre = card.querySelector('.movie-genre').textContent.toLowerCase();

            // Kontrola filtru kategorie
            let matchesFilter = true;
            if (filterValue !== 'all') {
                if (filterValue === 'upcoming' && !card.classList.contains('upcoming')) {
                    matchesFilter = false;
                } else if (filterValue === 'past' && !card.classList.contains('past')) {
                    matchesFilter = false;
                } else if (filterValue === 'now' && (card.classList.contains('past') || card.classList.contains('upcoming'))) {
                    matchesFilter = false;
                }
            }

            // Kontrola hledan√©ho textu
            const isMatch = (title.includes(searchTerm) ||
                genre.includes(searchTerm)) && matchesFilter;

            card.style.display = isMatch ? '' : 'none';
        });

        // Kontrola, zda jsou nƒõjak√© filmy zobrazeny a p≈ô√≠padnƒõ zobrazen√≠ zpr√°vy
        const visibleMovies = document.querySelectorAll('.movie-card[style="display: "]');

        let noResultsMsg = document.getElementById('no-results-message');
        if (visibleMovies.length === 0) {
            if (!noResultsMsg) {
                noResultsMsg = document.createElement('div');
                noResultsMsg.id = 'no-results-message';
                noResultsMsg.className = 'no-results';
                noResultsMsg.innerHTML = `
                    <div class="no-results-icon">&#128269;</div>
                    <h3>≈Ω√°dn√© filmy nenalezeny</h3>
                    <p>Zkuste upravit va≈°e hled√°n√≠ nebo filtr.</p>
                `;
                moviesWrapper.appendChild(noResultsMsg);
            }
        } else if (noResultsMsg) {
            noResultsMsg.remove();
        }
    }

    // Event listenery pro vyhled√°v√°n√≠ a filtrov√°n√≠
    searchBtn.addEventListener('click', searchMovies);
    searchInput.addEventListener('keyup', function(e) {
        if (e.key === 'Enter') {
            searchMovies();
        }
    });

    filterSelect.addEventListener('change', searchMovies);

    // Funkce pro str√°nkov√°n√≠
    paginationBtns.forEach(btn => {
        btn.addEventListener('click', function() {
            // Odstranƒõn√≠ aktivn√≠ t≈ô√≠dy ze v≈°ech tlaƒç√≠tek
            paginationBtns.forEach(b => b.classList.remove('active'));

            // P≈ôid√°n√≠ aktivn√≠ t≈ô√≠dy na kliknut√© tlaƒç√≠tko
            this.classList.add('active');

            // Zde by norm√°lnƒõ byla implementace skuteƒçn√©ho str√°nkov√°n√≠
            // Pro √∫ƒçely uk√°zky jen posuneme k zaƒç√°tku str√°nky
            window.scrollTo({ top: 0, behavior: 'smooth' });
        });
    });

    paginationNext.addEventListener('click', function() {
        // Najdeme aktivn√≠ tlaƒç√≠tko
        const activeBtn = document.querySelector('.pagination-btn.active');
        const nextBtn = activeBtn.nextElementSibling;

        // Pokud existuje dal≈°√≠ tlaƒç√≠tko, klikneme na nƒõj
        if (nextBtn && nextBtn.classList.contains('pagination-btn')) {
            nextBtn.click();
        }
    });

    // Tooltip pro dlouh√© n√°zvy film≈Ø
    const movieTitles = document.querySelectorAll('.movie-title');
    movieTitles.forEach(title => {
        // Kontrola, zda je obsah del≈°√≠ ne≈æ co se vejde do dvou ≈ô√°dk≈Ø
        if (title.scrollHeight > title.clientHeight) {
            title.setAttribute('title', title.textContent);
        }
    });

    // Responzivn√≠ chov√°n√≠ - detekce mobiln√≠ho zobrazen√≠
    function isMobileView() {
        return window.innerWidth < 768; // Breakpoint pro mobiln√≠ zobrazen√≠
    }

    // Pro mobiln√≠ za≈ô√≠zen√≠ - kliknut√≠ na celou kartu filmu
    function setupMobileCardClicks() {
        if (isMobileView()) {
            const movieCards = document.querySelectorAll('.movie-card:not(.past):not(.upcoming)');
            movieCards.forEach(card => {
                const reserveBtn = card.querySelector('.mobile-reserve .reserve-btn');
                if (!reserveBtn || reserveBtn.classList.contains('disabled')) return;

                const reserveLink = reserveBtn.getAttribute('href');

                // P≈ôid√°me event listener na celou kartu, ale vynech√°me tlaƒç√≠tko
                card.addEventListener('click', function(e) {
                    // Pokud u≈æ je kliknuto p≈ô√≠mo na tlaƒç√≠tko, nechceme duplikovat akci
                    if (e.target === reserveBtn || reserveBtn.contains(e.target)) {
                        return;
                    }

                    // Jinak p≈ôesmƒõrujeme na odkaz rezervace
                    window.location.href = reserveLink;
                });
            });
        }
    }

    // Inicializace mobiln√≠ch kliknut√≠
    setupMobileCardClicks();

    // P≈ôi zmƒõnƒõ velikosti okna aktualizujeme chov√°n√≠
    window.addEventListener('resize', function() {
        // Pokud bychom pot≈ôebovali reagovat na zmƒõnu zobrazen√≠
        // Tento k√≥d by se aktivoval p≈ôi zmƒõnƒõ z mobiln√≠ho na desktop zobrazen√≠ a naopak
    });
});
// File: ./js/my-reservations.js
document.addEventListener('DOMContentLoaded', function() {
            // Naƒçten√≠ rezervac√≠ p≈ôi startu
            loadReservations();

            // P≈ôep√≠n√°n√≠ z√°lo≈æek
            const tabBtns = document.querySelectorAll('.tab-btn');
            const tabContents = document.querySelectorAll('.tab-content');
            const emptyState = document.querySelector('.empty-state');

            tabBtns.forEach(btn => {
                btn.addEventListener('click', function() {
                    const tabId = this.getAttribute('data-tab');
                    switchTab(tabId);
                });
            });

            function switchTab(tabId) {
                // Aktualizace tlaƒç√≠tek
                tabBtns.forEach(b => b.classList.remove('active'));
                document.querySelector(`[data-tab="${tabId}"]`).classList.add('active');

                // Aktualizace obsahu
                tabContents.forEach(c => c.classList.add('hidden'));
                const activeTab = document.getElementById(`${tabId}-tab`);
                activeTab.classList.remove('hidden');

                // Kontrola pr√°zdn√©ho stavu
                checkEmptyState(activeTab);
            }

            // Naƒçten√≠ rezervac√≠
            async function loadReservations() {
                try {
                    const response = await fetch('reservation_handlers.php');
                    const reservations = await response.json();

                    if (Array.isArray(reservations)) {
                        updateReservationsUI(reservations);
                    }
                } catch (error) {
                    console.error('Chyba p≈ôi naƒç√≠t√°n√≠ rezervac√≠:', error);
                    alert('Nepoda≈ôilo se naƒç√≠st rezervace. Zkuste to pros√≠m znovu.');
                }
            }

            // Aktualizace UI rezervac√≠
            function updateReservationsUI(reservations) {
                const upcomingTab = document.getElementById('upcoming-tab');
                const pastTab = document.getElementById('past-tab');

                upcomingTab.querySelector('.reservation-list').innerHTML = '';
                pastTab.querySelector('.reservation-list').innerHTML = '';

                const now = new Date();

                reservations.forEach(reservation => {
                    const screeningDate = new Date(reservation.screening_date);
                    const isPast = screeningDate < now;

                    const card = createReservationCard(reservation);
                    const targetTab = isPast ? pastTab : upcomingTab;
                    targetTab.querySelector('.reservation-list').appendChild(card);
                });

                // Kontrola pr√°zdn√Ωch stav≈Ø
                checkEmptyState(upcomingTab);
                checkEmptyState(pastTab);
            }

            // Vytvo≈ôen√≠ karty rezervace
            function createReservationCard(reservation) {
                const card = document.createElement('div');
                card.className = `reservation-card${new Date(reservation.screening_date) < new Date() ? ' past' : ''}`;
                card.id = `reservation-${reservation.id_reservation}`;

                const screeningDate = new Date(reservation.screening_date);
                const formattedDate = screeningDate.toLocaleDateString('cs-CZ', {
                    weekday: 'long',
                    day: 'numeric',
                    month: 'numeric',
                    year: 'numeric'
                });

                card.innerHTML = `
            <div class="reservation-header">
                <img src="data:image/jpeg;base64,${reservation.image}" alt="${reservation.title}" class="movie-thumbnail">
                <div class="reservation-info">
                    <h3 class="movie-title">${reservation.title}</h3>
                    <div class="movie-details">
                        <span class="movie-genre">${reservation.genre}</span>
                        <span class="movie-duration">${reservation.duration} min</span>
                    </div>
                    <div class="reservation-date">
                        <span class="date-icon">&#128197;</span>
                        <span>${formattedDate}</span>
                        <span class="time-icon">&#128336;</span>
                        <span>${formatTime(reservation.screening_time)}</span>
                    </div>
                </div>
            </div>
            <div class="reservation-seats">
                <h4>Rezervovan√° m√≠sta</h4>
                <div class="seats-grid">
                    <div class="seat">
                        <span class="seat-number">${reservation.seat_number}</span>
                        <span class="seat-label">Sedadlo</span>
                    </div>
                </div>
            </div>
            <div class="reservation-actions">
                <a href="reserve.php?id=${reservation.id_screening}" class="view-btn">Zobrazit rezervaci</a>
                ${new Date(reservation.screening_date) > new Date() ? 
                    `<button class="cancel-btn" data-id="${reservation.id_reservation}">Zru≈°it rezervaci</button>` : 
                    ''}
            </div>
        `;

        // P≈ôid√°n√≠ event listeneru pro zru≈°en√≠ rezervace
        const cancelBtn = card.querySelector('.cancel-btn');
        if (cancelBtn) {
            cancelBtn.addEventListener('click', function() {
                showCancelConfirmation(reservation.id_reservation, reservation.title);
            });
        }

        return card;
    }

    // Kontrola pr√°zdn√©ho stavu
    function checkEmptyState(tab) {
        const cards = tab.querySelectorAll('.reservation-card');
        const emptyState = document.querySelector('.empty-state');
        
        if (cards.length === 0) {
            emptyState.classList.remove('hidden');
            tab.appendChild(emptyState);
        } else {
            emptyState.classList.add('hidden');
        }
    }

    // Zobrazen√≠ potvrzen√≠ zru≈°en√≠
    function showCancelConfirmation(reservationId, movieTitle) {
        const cancelModal = document.getElementById('cancel-modal');
        document.getElementById('cancel-movie-name').textContent = movieTitle;
        
        const confirmBtn = cancelModal.querySelector('.confirm-cancel');
        confirmBtn.onclick = () => cancelReservation(reservationId);

        cancelModal.classList.add('active');
        document.body.style.overflow = 'hidden';
    }

    // Zru≈°en√≠ rezervace
    async function cancelReservation(reservationId) {
        try {
            const formData = new FormData();
            formData.append('action', 'cancel');
            formData.append('reservation_id', reservationId);

            const response = await fetch('reservation_handlers.php', {
                method: 'POST',
                body: formData
            });

            const result = await response.json();

            if (result.status === 'success') {
                // Odstranƒõn√≠ karty rezervace
                const card = document.getElementById(`reservation-${reservationId}`);
                const parentTab = card.closest('.tab-content');
                card.remove();
                
                // Kontrola pr√°zdn√©ho stavu
                checkEmptyState(parentTab);
                
                // Zav≈ôen√≠ mod√°lu
                closeModals();
                
                alert('Rezervace byla √∫spƒõ≈°nƒõ zru≈°ena.');
            } else {
                throw new Error(result.message);
            }
        } catch (error) {
            console.error('Chyba p≈ôi ru≈°en√≠ rezervace:', error);
            alert(error.message || 'Do≈°lo k chybƒõ p≈ôi ru≈°en√≠ rezervace.');
        }
    }

    // User menu
    const userIcon = document.getElementById('user-icon');
    const dropdownMenu = document.getElementById('dropdown-menu');

    userIcon.addEventListener('click', function(e) {
        e.stopPropagation();
        dropdownMenu.classList.toggle('active');
    });

    document.addEventListener('click', function() {
        if (dropdownMenu.classList.contains('active')) {
            dropdownMenu.classList.remove('active');
        }
    });

    dropdownMenu.addEventListener('click', function(e) {
        e.stopPropagation();
    });

    // Helper funkce
    function formatTime(timeStr) {
        try {
            const times = JSON.parse(timeStr);
            return times.join(', ');
        } catch {
            return timeStr;
        }
    }

    // Zav√≠r√°n√≠ mod√°l≈Ø
    const closeBtns = document.querySelectorAll('.close-btn');
    const secondaryBtns = document.querySelectorAll('.secondary-btn');

    closeBtns.forEach(btn => {
        btn.addEventListener('click', closeModals);
    });

    secondaryBtns.forEach(btn => {
        btn.addEventListener('click', closeModals);
    });

    function closeModals() {
        const cancelModal = document.getElementById('cancel-modal');
        if (cancelModal) {
            cancelModal.classList.remove('active');
            document.body.style.overflow = '';
        }
    }

    // Zav≈ôen√≠ mod√°l≈Ø p≈ôi kliknut√≠ mimo
    window.addEventListener('click', function(e) {
        const cancelModal = document.getElementById('cancel-modal');
        if (e.target === cancelModal) {
            closeModals();
        }
    });

    // Navigace zpƒõt
    const backLink = document.getElementById('back-link');
    if (backLink) {
        backLink.addEventListener('click', function(e) {
            e.preventDefault();
            window.history.back();
        });
    }
});
// File: ./js/reserve.js
document.addEventListener('DOMContentLoaded', function() {
    const seats = document.querySelectorAll('.room-container .seat:not(.sold)');
    const reserveBtn = document.getElementById('reserve-btn');
    const count = document.getElementById('count');
    const total = document.getElementById('total');
    const screeningId = new URLSearchParams(window.location.search).get('id');

    let selectedSeats = [];
    let totalPrice = 0;

    // Naƒçten√≠ obsazen√Ωch m√≠st p≈ôi naƒçten√≠ str√°nky
    loadOccupiedSeats();

    // Funkce pro naƒçten√≠ obsazen√Ωch m√≠st
    async function loadOccupiedSeats() {
        try {
            const formData = new FormData();
            formData.append('action', 'get_available_seats');
            formData.append('screening_id', screeningId);

            const response = await fetch('reservation_handlers.php', {
                method: 'POST',
                body: formData
            });

            const availableSeats = await response.json();

            // Oznaƒçen√≠ obsazen√Ωch m√≠st
            seats.forEach(seat => {
                const seatId = seat.id.replace('seat', '');
                if (!availableSeats.find(s => s.id_seat === parseInt(seatId))) {
                    seat.classList.add('sold');
                    seat.style.cursor = 'not-allowed';
                }
            });
        } catch (error) {
            console.error('Chyba p≈ôi naƒç√≠t√°n√≠ obsazen√Ωch m√≠st:', error);
        }
    }

    // Event listenery pro sedadla
    seats.forEach(seat => {
        seat.addEventListener('click', function() {
            if (!this.classList.contains('sold')) {
                this.classList.toggle('selected');

                const seatId = this.id;
                const seatPrice = parseInt(this.getAttribute('data-price'));

                if (this.classList.contains('selected')) {
                    selectedSeats.push(seatId);
                    totalPrice += seatPrice;
                } else {
                    const index = selectedSeats.indexOf(seatId);
                    if (index > -1) {
                        selectedSeats.splice(index, 1);
                        totalPrice -= seatPrice;
                    }
                }

                updateUI();
            }
        });
    });

    // Aktualizace UI
    function updateUI() {
        count.textContent = selectedSeats.length;
        total.textContent = totalPrice;
        reserveBtn.disabled = selectedSeats.length === 0;
    }

    // Vytvo≈ôen√≠ rezervace
    reserveBtn.addEventListener('click', async function() {
        try {
            for (const seatId of selectedSeats) {
                const formData = new FormData();
                formData.append('action', 'create');
                formData.append('screening_id', screeningId);
                formData.append('seat_id', seatId.replace('seat', ''));

                const response = await fetch('reservation_handlers.php', {
                    method: 'POST',
                    body: formData
                });

                const result = await response.json();

                if (result.status === 'error') {
                    throw new Error(result.message);
                }
            }

            // √öspƒõ≈°n√° rezervace
            alert('Rezervace byla √∫spƒõ≈°nƒõ vytvo≈ôena!');

            // Oznaƒçen√≠ vybran√Ωch m√≠st jako prodan√Ωch
            selectedSeats.forEach(seatId => {
                const seat = document.getElementById(seatId);
                seat.classList.remove('selected');
                seat.classList.add('sold');
                seat.style.cursor = 'not-allowed';
            });

            // Reset v√Ωbƒõru
            selectedSeats = [];
            totalPrice = 0;
            updateUI();

            // P≈ôesmƒõrov√°n√≠ na seznam rezervac√≠
            window.location.href = 'my-reservations.php';

        } catch (error) {
            console.error('Chyba p≈ôi vytv√°≈ôen√≠ rezervace:', error);
            alert(error.message || 'Do≈°lo k chybƒõ p≈ôi vytv√°≈ôen√≠ rezervace.');
        }
    });

    // UI pro p≈ôihl√°≈°en√©ho u≈æivatele
    const userIcon = document.getElementById('user-icon');
    const dropdownMenu = document.getElementById('dropdown-menu');
    const backLink = document.getElementById('back-link');

    userIcon.addEventListener('click', function(e) {
        e.stopPropagation();
        dropdownMenu.classList.toggle('active');
    });

    document.addEventListener('click', function() {
        if (dropdownMenu.classList.contains('active')) {
            dropdownMenu.classList.remove('active');
        }
    });

    dropdownMenu.addEventListener('click', function(e) {
        e.stopPropagation();
    });

    backLink.addEventListener('click', function(e) {
        e.preventDefault();
        window.history.back();
    });
});
// File: ./login.php
<?php
// File: login.php
require_once 'auth_handlers.php';

// Redirect if already logged in
if (isLoggedIn()) {
    header("Location: " . (isAdmin() ? 'admin.php' : 'index.php'));
    exit;
}

// Check for error/success messages
$errorMsg = '';
$successMsg = '';

if (isset($_GET['error'])) {
    $errorMsg = htmlspecialchars($_GET['error']);
}

if (isset($_GET['success'])) {
    $successMsg = htmlspecialchars($_GET['success']);
}
?>
<!DOCTYPE html>
<html lang="cs">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>P≈ôihl√°≈°en√≠ | CineBukay</title>
    <link href="https://fonts.googleapis.com/css?family=Lato&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="./css/vestylu.css">
    <link rel="stylesheet" href="./css/login.css">
</head>
<body>
    <header class="site-header">
      <h1>CineBukay</h1>
    </header>

    <div class="auth-container">
        <div class="auth-box">
            <div class="auth-header">
                <h1>Rezervaƒçn√≠ Syst√©m</h1>
                <div class="auth-tabs">
                    <button class="auth-tab active" data-tab="login">P≈ôihl√°≈°en√≠</button>
                    <button class="auth-tab" data-tab="register">Registrace</button>
                </div>
            </div>

            <?php if ($errorMsg): ?>
            <div class="error-message visible"><?php echo $errorMsg; ?></div>
            <?php endif; ?>
            
            <?php if ($successMsg): ?>
            <div class="success-message visible"><?php echo $successMsg; ?></div>
            <?php endif; ?>

            <div class="auth-form-container">
                <!-- Login Form -->
                <form id="login-form" class="auth-form active">
                    <div class="form-group">
                        <label for="login-username">P≈ôezd√≠vka</label>
                        <input type="text" id="login-username" name="username" required>
                    </div>
                    
                    <div class="form-group">
                        <label for="login-password">Heslo</label>
                        <input type="password" id="login-password" name="password" required>
                    </div>
                    
                    <div class="form-group checkbox">
                        <input type="checkbox" id="remember-me" name="remember">
                        <label for="remember-me">Zapamatovat si mƒõ</label>
                    </div>
                    
                    <div class="form-group">
                        <button type="submit" class="submit-btn">P≈ôihl√°sit se</button>
                    </div>
                </form>

                <!-- Register Form -->
                <form id="register-form" class="auth-form">
                    <div class="form-group">
                        <label for="register-username">P≈ôezd√≠vka</label>
                        <input type="text" id="register-username" name="username" required>
                    </div>
                    
                    <div class="form-group">
                        <label for="register-password">Heslo</label>
                        <input type="password" id="register-password" name="password" required>
                    </div>
                    
                    <div class="form-group">
                        <label for="register-password-confirm">Potvrzen√≠ hesla</label>
                        <input type="password" id="register-password-confirm" name="password_confirm" required>
                    </div>
                    
                    <div class="form-group checkbox">
                        <input type="checkbox" id="agree-terms" name="agree_terms" required>
                        <label for="agree-terms">Souhlas√≠m s <a href="#"> podm√≠nkami</a></label>
                    </div>
                    
                    <div class="form-group">
                        <button type="submit" class="submit-btn">Registrovat se</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
    
    <script src="./js/login.js"></script>
</body>
</html>
// File: ./movie_handlers.php
<?php
require_once 'db_config.php';
require_once 'session_check.php';

header('Content-Type: application/json');

// Debug logging
error_reporting(E_ALL);
ini_set('display_errors', 1);
ini_set('log_errors', 1);

if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    error_log("Received POST data:");
    error_log(print_r($_POST, true));

    if (!isset($_POST['action'])) {
        echo json_encode(['status' => 'error', 'message' => 'Chyb√≠ parametr action']);
        exit;
    }

    try {
        $pdo = getDbConnection();

        switch ($_POST['action']) {
            case 'add':
                // Kontrola povinn√Ωch pol√≠
                $required = ['title', 'duration', 'screening_date', 'screening_time'];
                foreach ($required as $field) {
                    if (!isset($_POST[$field]) || empty($_POST[$field])) {
                        echo json_encode([
                            'status' => 'error',
                            'message' => "Chyb√≠ povinn√© pole: $field"
                        ]);
                        exit;
                    }
                }

                // Zpracov√°n√≠ ƒçasu - vezmeme prvn√≠ ƒças z JSON pole
                $times = json_decode($_POST['screening_time'], true);
                $firstTime = $times[0] ?? '00:00';

                // P≈ô√≠prava SQL dotazu
                $sql = "INSERT INTO screenings 
                        (title, duration, genre, description, screening_date, screening_time) 
                        VALUES 
                        (:title, :duration, :genre, :description, :screening_date, :screening_time)";

                $stmt = $pdo->prepare($sql);

                // P≈ô√≠prava parametr≈Ø
                $params = [
                    'title' => $_POST['title'],
                    'duration' => intval($_POST['duration']),
                    'genre' => $_POST['genre'] ?: 'Neza≈ôazeno', // V√Ωchoz√≠ hodnota pokud nen√≠ ≈æ√°nr
                    'description' => $_POST['description'] ?? '',
                    'screening_date' => $_POST['screening_date'],
                    'screening_time' => $firstTime
                ];

                error_log("Executing SQL with params:");
                error_log(print_r($params, true));

                if ($stmt->execute($params)) {
                    echo json_encode([
                        'status' => 'success',
                        'message' => 'Film byl √∫spƒõ≈°nƒõ p≈ôid√°n'
                    ]);
                } else {
                    echo json_encode([
                        'status' => 'error',
                        'message' => 'Nepoda≈ôilo se p≈ôidat film'
                    ]);
                }
                break;

            default:
                echo json_encode([
                    'status' => 'error',
                    'message' => 'Nezn√°m√° akce'
                ]);
        }
    } catch (PDOException $e) {
        error_log("Database error: " . $e->getMessage());
        echo json_encode([
            'status' => 'error',
            'message' => 'Datab√°zov√° chyba: ' . $e->getMessage()
        ]);
    } catch (Exception $e) {
        error_log("General error: " . $e->getMessage());
        echo json_encode([
            'status' => 'error',
            'message' => 'Chyba: ' . $e->getMessage()
        ]);
    }
    exit;
}

// GET po≈æadavky pro naƒçten√≠ film≈Ø
if ($_SERVER['REQUEST_METHOD'] === 'GET') {
    try {
        $pdo = getDbConnection();
        $stmt = $pdo->query("
            SELECT 
                id_screening,
                title,
                duration,
                genre,
                description,
                image,
                screening_date,
                screening_time::varchar as screening_time
            FROM screenings 
            ORDER BY screening_date DESC, screening_time ASC
        ");
        echo json_encode($stmt->fetchAll(PDO::FETCH_ASSOC));
    } catch (PDOException $e) {
        echo json_encode([
            'status' => 'error',
            'message' => 'Chyba p≈ôi naƒç√≠t√°n√≠ film≈Ø: ' . $e->getMessage()
        ]);
    }
    exit;
}
?>
// File: ./my-reservations.php
<!DOCTYPE html>
<html lang="cs">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Moje rezervace | CineBukay</title>
    <link href="https://fonts.googleapis.com/css?family=Lato&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="./css/vestylu.css">
    <link rel="stylesheet" href="./css/my-reservations.css">
</head>
<body>
    <header class="site-header">
        <div class="back-button">
            <a href="index.php" id="back-link">
                <span class="back-arrow">&#8592;</span>
                <span class="back-text">Zpƒõt na program</span>
            </a>
        </div>
        <div class="user-menu-container">
            <div class="user-icon active" id="user-icon">
                <span class="user-icon-symbol">&#128100;</span>
            </div>
            <div class="dropdown-menu" id="dropdown-menu">
                <ul>
                    <li><a href="#settings">Nastaven√≠</a></li>
                    <li><a href="#logout">Odhl√°sit se</a></li>
                </ul>
            </div>
        </div>
    </header>

    <main class="reservations-container">
        <h1 class="page-title">Moje rezervace</h1>
        
        <div class="tabs">
            <button class="tab-btn active" data-tab="upcoming">Aktu√°ln√≠</button>
            <button class="tab-btn" data-tab="past">Historie</button>
        </div>
        
        <div class="tab-content" id="upcoming-tab">
            <!-- Aktu√°ln√≠ rezervace -->
            <div class="reservation-list">
                <!-- Rezervace 1 -->
                <div class="reservation-card">
                    <div class="reservation-header">
                        <img src="https://via.placeholder.com/100x150?text=Deadpool+a+Wolverine" alt="Deadpool a Wolverine" class="movie-thumbnail">
                        <div class="reservation-info">
                            <h3 class="movie-title">Deadpool a Wolverine</h3>
                            <div class="movie-details">
                                <span class="movie-genre">Akƒçn√≠, Komedie</span>
                                <span class="movie-duration">122 min</span>
                            </div>
                            <div class="reservation-date">
                                <span class="date-icon">&#128197;</span>
                                <span>P√°tek, 1. 3. 2025</span>
                                <span class="time-icon">&#128336;</span>
                                <span>17:30</span>
                            </div>
                        </div>
                    </div>
                    <div class="reservation-seats">
                        <h4>Rezervovan√° m√≠sta</h4>
                        <div class="seats-grid">
                            <div class="seat">
                                <span class="seat-number">3</span>
                                <span class="seat-label">Gauƒç</span>
                            </div>
                            <div class="seat">
                                <span class="seat-number">4</span>
                                <span class="seat-label">Gauƒç</span>
                            </div>
                        </div>
                    </div>
                    <div class="reservation-actions">
                        <a href="reserve.php" class="view-btn">Zobrazit rezervaci</a>
                        <button class="cancel-btn">Zru≈°it rezervaci</button>
                    </div>
                </div>
                
                <!-- Rezervace 2 -->
                <div class="reservation-card">
                    <div class="reservation-header">
                        <img src="https://via.placeholder.com/100x150?text=Joker:+Folie+a+Deux" alt="Joker: Folie √† Deux" class="movie-thumbnail">
                        <div class="reservation-info">
                            <h3 class="movie-title">Joker: Folie √† Deux</h3>
                            <div class="movie-details">
                                <span class="movie-genre">Thriller, Drama</span>
                                <span class="movie-duration">138 min</span>
                            </div>
                            <div class="reservation-date">
                                <span class="date-icon">&#128197;</span>
                                <span>St≈ôeda, 6. 3. 2025</span>
                                <span class="time-icon">&#128336;</span>
                                <span>20:00</span>
                            </div>
                        </div>
                    </div>
                    <div class="reservation-seats">
                        <h4>Rezervovan√° m√≠sta</h4>
                        <div class="seats-grid">
                            <div class="seat">
                                <span class="seat-number">1</span>
                                <span class="seat-label">≈Ωidle</span>
                            </div>
                        </div>
                    </div>
                    <div class="reservation-actions">
                        <a href="reserve.php" class="view-btn">Zobrazit rezervaci</a>
                        <button class="cancel-btn">Zru≈°it rezervaci</button>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="tab-content hidden" id="past-tab">
            <!-- Historie rezervac√≠ -->
            <div class="reservation-list">
                <!-- Rezervace 3 - probƒõhl√° -->
                <div class="reservation-card past">
                    <div class="reservation-header">
                        <img src="https://via.placeholder.com/100x150?text=Oppenheimer" alt="Oppenheimer" class="movie-thumbnail">
                        <div class="reservation-info">
                            <h3 class="movie-title">Oppenheimer</h3>
                            <div class="movie-details">
                                <span class="movie-genre">≈Ωivotopisn√Ω, Drama</span>
                                <span class="movie-duration">180 min</span>
                            </div>
                            <div class="reservation-date">
                                <span class="date-icon">&#128197;</span>
                                <span>Nedƒõle, 23. 2. 2025</span>
                                <span class="time-icon">&#128336;</span>
                                <span>19:00</span>
                            </div>
                        </div>
                    </div>
                    <div class="reservation-seats">
                        <h4>Rezervovan√° m√≠sta</h4>
                        <div class="seats-grid">
                            <div class="seat">
                                <span class="seat-number">7</span>
                                <span class="seat-label">Bobik</span>
                            </div>
                            <div class="seat">
                                <span class="seat-number">8</span>
                                <span class="seat-label">Bobik</span>
                            </div>
                        </div>
                    </div>
                    <div class="reservation-actions">
                        <a href="reserve.php" class="view-btn">Zobrazit rezervaci</a>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Pr√°zdn√Ω stav -->
        <div class="empty-state hidden">
            <div class="empty-icon">&#128465;</div>
            <h3>≈Ω√°dn√© rezervace</h3>
            <p>Zat√≠m nem√°te ≈æ√°dn√© rezervace v t√©to kategorii.</p>
            <a href="index.php" class="browse-btn">Prohl√©dnout program</a>
        </div>
    </main>

    <!-- Modal pro potvrzen√≠ zru≈°en√≠ rezervace -->
    <div class="modal" id="cancel-modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">Zru≈°en√≠ rezervace</h3>
                <button class="close-btn">&times;</button>
            </div>
            <div class="modal-body">
                <p>Opravdu chcete zru≈°it rezervaci na film <span id="cancel-movie-name">Deadpool a Wolverine</span>?</p>
                <div class="modal-actions">
                    <button class="secondary-btn">Zpƒõt</button>
                    <button class="primary-btn confirm-cancel">Zru≈°it rezervaci</button>
                </div>
            </div>
        </div>
    </div>



    <script src="./js/my-reservations.js"></script>
</body>
</html>
// File: ./reservation_handlers.php
<?php
require_once 'db_config.php';
require_once 'session_check.php';

function getReservations($userId = null) {
    try {
        $pdo = getDbConnection();
        
        $sql = "
            SELECT r.*, s.title, s.screening_date, s.screening_time, s.genre, s.duration, seat.seat_number
            FROM reservations r
            JOIN screenings s ON r.id_screening = s.id_screening
            JOIN seats seat ON r.id_seat = seat.id_seat
        ";
        
        if ($userId) {
            $sql .= " WHERE r.id_user = :userId";
            $stmt = $pdo->prepare($sql);
            $stmt->execute(['userId' => $userId]);
        } else {
            $stmt = $pdo->query($sql);
        }
        
        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
        return ['status' => 'error', 'message' => 'Chyba p≈ôi naƒç√≠t√°n√≠ rezervac√≠: ' . $e->getMessage()];
    }
}

function getAvailableSeats($screeningId) {
    try {
        $pdo = getDbConnection();
        
        $stmt = $pdo->prepare("
            SELECT s.id_seat, s.seat_number
            FROM seats s
            WHERE s.id_seat NOT IN (
                SELECT r.id_seat 
                FROM reservations r 
                WHERE r.id_screening = :screeningId 
                AND r.status = 'active'
            )
        ");
        
        $stmt->execute(['screeningId' => $screeningId]);
        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
        return ['status' => 'error', 'message' => 'Chyba p≈ôi naƒç√≠t√°n√≠ voln√Ωch m√≠st: ' . $e->getMessage()];
    }
}

function createReservation($data) {
    try {
        $pdo = getDbConnection();
        
        // Ovƒõ≈ôen√≠, zda je m√≠sto voln√©
        $stmt = $pdo->prepare("
            SELECT COUNT(*) 
            FROM reservations 
            WHERE id_screening = :screeningId 
            AND id_seat = :seatId 
            AND status = 'active'
        ");
        
        $stmt->execute([
            'screeningId' => $data['screening_id'],
            'seatId' => $data['seat_id']
        ]);
        
        if ($stmt->fetchColumn() > 0) {
            return ['status' => 'error', 'message' => 'Vybran√© m√≠sto je ji≈æ obsazen√©.'];
        }
        
        // Vytvo≈ôen√≠ rezervace
        $stmt = $pdo->prepare("
            INSERT INTO reservations (id_user, id_screening, id_seat, status)
            VALUES (:userId, :screeningId, :seatId, 'active')
        ");
        
        $stmt->execute([
            'userId' => $_SESSION['user_id'],
            'screeningId' => $data['screening_id'],
            'seatId' => $data['seat_id']
        ]);
        
        return ['status' => 'success', 'message' => 'Rezervace byla √∫spƒõ≈°nƒõ vytvo≈ôena.'];
    } catch (PDOException $e) {
        return ['status' => 'error', 'message' => 'Chyba p≈ôi vytv√°≈ôen√≠ rezervace: ' . $e->getMessage()];
    }
}

function cancelReservation($reservationId) {
    try {
        $pdo = getDbConnection();
        
        // Ovƒõ≈ôen√≠, zda rezervace pat≈ô√≠ p≈ôihl√°≈°en√©mu u≈æivateli nebo je admin
        $stmt = $pdo->prepare("
            SELECT id_user 
            FROM reservations 
            WHERE id_reservation = :id 
            AND status = 'active'
        ");
        
        $stmt->execute(['id' => $reservationId]);
        $reservation = $stmt->fetch(PDO::FETCH_ASSOC);
        
        if (!$reservation) {
            return ['status' => 'error', 'message' => 'Rezervace neexistuje nebo ji≈æ byla zru≈°ena.'];
        }
        
        if ($reservation['id_user'] !== $_SESSION['user_id'] && !isAdmin()) {
            return ['status' => 'error', 'message' => 'Nem√°te opr√°vnƒõn√≠ zru≈°it tuto rezervaci.'];
        }
        
        // Zru≈°en√≠ rezervace
        $stmt = $pdo->prepare("
            UPDATE reservations 
            SET status = 'canceled' 
            WHERE id_reservation = :id
        ");
        
        $stmt->execute(['id' => $reservationId]);
        
        return ['status' => 'success', 'message' => 'Rezervace byla √∫spƒõ≈°nƒõ zru≈°ena.'];
    } catch (PDOException $e) {
        return ['status' => 'error', 'message' => 'Chyba p≈ôi ru≈°en√≠ rezervace: ' . $e->getMessage()];
    }
}

// Zpracov√°n√≠ API po≈æadavk≈Ø
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    requireLogin(); // Vy≈æadovat p≈ôihl√°≈°en√≠
    
    $action = $_POST['action'] ?? '';
    $response = ['status' => 'error', 'message' => 'Neplatn√Ω po≈æadavek'];
    
    switch ($action) {
        case 'create':
            $response = createReservation($_POST);
            break;
            
        case 'cancel':
            if (isset($_POST['reservation_id'])) {
                $response = cancelReservation($_POST['reservation_id']);
            }
            break;
            
        case 'get_available_seats':
            if (isset($_POST['screening_id'])) {
                $response = getAvailableSeats($_POST['screening_id']);
            }
            break;
    }
    
    header('Content-Type: application/json');
    echo json_encode($response);
    exit;
}

// Pro GET po≈æadavky vr√°t√≠me seznam rezervac√≠
if ($_SERVER['REQUEST_METHOD'] === 'GET') {
    requireLogin();
    
    $userId = !isAdmin() ? $_SESSION['user_id'] : null;
    header('Content-Type: application/json');
    echo json_encode(getReservations($userId));
    exit;
}
?>
// File: ./reserve.php
<!DOCTYPE html>
<html lang="cs">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Rezervaƒçn√≠ Syst√©m</title>
    <link href="https://fonts.googleapis.com/css?family=Lato&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="./css/vestylu.css">

</head>

<body>

    <header class="site-header">
        <div class="back-button">
            <a href="#" id="back-link">
                <span class="back-arrow">&#8592;</span>
                <span class="back-text">Zpƒõt</span>
            </a>

        </div>
        <div class="user-menu-container">
            <div class="user-icon" id="user-icon">
                <span class="user-icon-symbol">&#128100;</span>
            </div>
            <div class="dropdown-menu" id="dropdown-menu">
                <ul>
                    <li><a href="#settings">Nastaven√≠</a></li>
                    <li><a href="#logout">Odhl√°sit se</a></li>
                </ul>
            </div>
        </div>
    </header>

    <ul class="showcase">
        <li>
            <div class="seat"></div>
            <small>Voln√©</small>
        </li>
        <li>
            <div class="seat selected"></div>
            <small>Vybran√©</small>
        </li>
        <li>
            <div class="seat sold"></div>
            <small>Obsazen√©</small>
        </li>
    </ul>

    <div class="room-container">
        <!-- TV Screen -->
        <div class="screen"></div>

        <!-- Chair top right -->
        <div class="chair-top-right">
            <div class="seat" id="seat1" data-price="250"></div>
            <div class="seat-label">BOBIG</div>
        </div>

        <!-- Chair middle left -->
        <div class="chair-middle-top">
            <div class="seat" id="seat2" data-price="250"></div>
            <div class="seat-label">≈ΩIDLE</div>
        </div>

        <div class="chair-middle-left">
            <div class="seat" id="seat9" data-price="250"></div>
            <div class="seat-label">K≈òESLO</div>
        </div>

        <!-- Couch horizontal part -->
        <div class="couch-horizontal">
            <div class="seat" id="seat3" data-price="250"></div>
            <div class="seat" id="seat4" data-price="250"></div>
            <div class="seat" id="seat5" data-price="250"></div>
            <div class="seat" id="seat6" data-price="250"></div>
            <div class="seat-label" style="margin-left: 97px;">GAUƒå</div>
        </div>

        <!-- Couch vertical part -->
        <div class="couch-vertical">
            <div class="seat" id="seat7" data-price="250"></div>
            <div class="seat" id="seat8" style="margin-bottom: 10px;" data-price="250"></div>

        </div>
    </div>

    <div class="selection-info">
        <p>Vybrali jste <span id="count">0</span> m√≠st za cenu <span class="price" id="total">0</span> Kƒç</p>
    </div>

    <div class="button-container">
        <button class="reserve-btn" id="reserve-btn" disabled>Rezervovat m√≠sta</button>
    </div>

    <script src="./js/reserve.js"></script>
</body>

</html>
// File: ./session_check.php
<?php
// File: session_check.php
require_once 'auth_handlers.php';

/**
 * Checks if user is logged in, redirects to login page if not
 * @param bool $adminRequired Whether admin privileges are required
 */
function requireLogin($adminRequired = false) {
    if (!isLoggedIn()) {
        header("Location: login.php?error=Pro p≈ô√≠stup k t√©to str√°nce je nutn√© se p≈ôihl√°sit.");
        exit;
    }
    
    if ($adminRequired && !isAdmin()) {
        header("Location: index.php?error=K t√©to str√°nce nem√°te p≈ô√≠stup.");
        exit;
    }
}

/**
 * Gets current user information from database
 * @return array|null User data or null if not logged in
 */
function getCurrentUser() {
    if (!isLoggedIn()) {
        return null;
    }
    
    try {
        $pdo = getDbConnection();
        $stmt = $pdo->prepare("SELECT id_user, username, is_admin FROM users WHERE id_user = :id");
        $stmt->bindParam(':id', $_SESSION['user_id']);
        $stmt->execute();
        
        if ($stmt->rowCount() === 0) {
            // Invalid session data, log out user
            logoutUser();
            return null;
        }
        
        return $stmt->fetch(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
        // Error handling
        error_log("Error fetching current user: " . $e->getMessage());
        return null;
    }
}

/**
 * Generate user menu HTML based on login status
 * @return string HTML for user menu
 */
function getUserMenuHTML() {
    $currentUser = getCurrentUser();
    
    if ($currentUser) {
        $isAdmin = $currentUser['is_admin'] ? true : false;
        $html = '<div class="user-menu-container">';
        $html .= '<div class="user-icon" id="user-icon">';
        $html .= '<span class="user-icon-symbol">üë§</span>';
        $html .= '<span class="user-name">' . htmlspecialchars($currentUser['username']) . '</span>';
        $html .= '</div>';
        $html .= '<div class="dropdown-menu" id="dropdown-menu">';
        $html .= '<ul>';
        
        // Add admin link if user is admin
        if ($isAdmin) {
            $html .= '<li><a href="admin.php">Administrace</a></li>';
        }
        
        $html .= '<li><a href="my-reservations.php">Moje rezervace</a></li>';
        $html .= '<li><a href="auth_handlers.php?action=logout">Odhl√°sit se</a></li>';
        $html .= '</ul>';
        $html .= '</div>';
        $html .= '</div>';
    } else {
        $html = '<div class="user-menu-container">';
        $html .= '<a href="login.php" class="login-btn">P≈ôihl√°sit se</a>';
        $html .= '</div>';
    }
    
    return $html;
}
?>
