document.addEventListener('DOMContentLoaded', function() {
            // Naƒçten√≠ rezervac√≠ p≈ôi startu
            loadReservations();

            // P≈ôep√≠n√°n√≠ z√°lo≈æek
            const tabBtns = document.querySelectorAll('.tab-btn');
            const tabContents = document.querySelectorAll('.tab-content');

            tabBtns.forEach(btn => {
                btn.addEventListener('click', function() {
                    const tabId = this.getAttribute('data-tab');
                    switchTab(tabId);
                });
            });

            function switchTab(tabId) {
                // Aktualizace tlaƒç√≠tek
                tabBtns.forEach(b => b.classList.remove('active'));
                document.querySelector(`[data-tab="${tabId}"]`).classList.add('active');

                // Aktualizace obsahu
                tabContents.forEach(c => c.classList.add('hidden'));
                const activeTab = document.getElementById(`${tabId}-tab`);
                activeTab.classList.remove('hidden');
            }

            // Naƒçten√≠ rezervac√≠
            async function loadReservations() {
                // Zobrazit loading indik√°tor
                const loadingIndicator = document.getElementById('loading');
                const tabContents = document.querySelectorAll('.tab-content');
                loadingIndicator.style.display = 'flex';
                tabContents.forEach(c => c.classList.add('hidden')); // Skr√Ωt z√°lo≈æky bƒõhem naƒç√≠t√°n√≠

                try {
                    const response = await fetch('reservation_handlers.php');
                    const result = await response.json();

                    if (response.ok && Array.isArray(result)) {
                        updateReservationsUI(result);

                        // D≈ÆLE≈ΩIT√Å ZMƒöNA: Nejprve zajist√≠me, ≈æe jsou v≈°echny z√°lo≈æky spr√°vnƒõ inicializov√°ny
                        tabContents.forEach(c => c.classList.add('hidden'));
                        const upcomingTab = document.getElementById('upcoming-tab');
                        upcomingTab.classList.remove('hidden');

                        // Aktivujeme z√°lo≈æku "aktu√°ln√≠" pomoc√≠ switchTab, kter√° spr√°vnƒõ aktualizuje UI
                        const upcomingBtn = document.querySelector('[data-tab="upcoming"]');
                        tabBtns.forEach(b => b.classList.remove('active'));
                        upcomingBtn.classList.add('active');
                    } else {
                        console.error('Chyba p≈ôi naƒç√≠t√°n√≠ rezervac√≠:', result);
                        const errorMessage = result && result.message ? result.message : 'Nepoda≈ôilo se naƒç√≠st rezervace. Zkuste to pros√≠m znovu.';
                        showToast(errorMessage, 'error');
                        updateReservationsUI([]);
                    }
                } catch (error) {
                    console.error('Chyba p≈ôi zpracov√°n√≠ odpovƒõdi rezervac√≠:', error);
                    showToast('Do≈°lo k chybƒõ p≈ôi komunikaci se serverem. Zkuste to pros√≠m znovu.', 'error');
                    updateReservationsUI([]);
                } finally {
                    // Skr√Ωt loading indik√°tor po naƒçten√≠
                    loadingIndicator.style.display = 'none';
                }
            }

            // Aktualizace UI rezervac√≠
            // Aktualizace UI rezervac√≠
            function updateReservationsUI(reservations) {
                const upcomingTab = document.getElementById('upcoming-tab');
                const pastTab = document.getElementById('past-tab');

                // Vyƒçist√≠me kontejnery
                upcomingTab.querySelector('.reservation-list').innerHTML = '';
                pastTab.querySelector('.reservation-list').innerHTML = '';

                const now = new Date();
                let upcomingCount = 0;
                let pastCount = 0;

                // Filtrujeme pouze aktivn√≠ rezervace
                reservations = reservations.filter(reservation =>
                    reservation.status === undefined || reservation.status === 'active'
                );

                reservations.forEach(reservation => {
                    try {
                        // Vytvo≈ôen√≠ kompletn√≠ho datetime z datumu a ƒçasu projekce
                        let screeningDate = reservation.screening_date;
                        let screeningTime = reservation.screening_time;

                        // Zpracov√°n√≠ ƒçasu prom√≠t√°n√≠
                        try {
                            const parsedTime = JSON.parse(screeningTime);
                            if (Array.isArray(parsedTime) && parsedTime.length > 0) {
                                screeningTime = parsedTime[0];
                            }
                        } catch (e) {
                            // Pokud nen√≠ JSON, pou≈æij tak jak je
                        }

                        // Vytvo≈ô√≠me datum prom√≠t√°n√≠
                        const screeningDateTime = new Date(`${screeningDate}T${screeningTime}`);

                        // D≈ÆLE≈ΩIT√Å ZMƒöNA: Pokud datum prom√≠t√°n√≠ je v minulosti, je to historie
                        const isPast = screeningDateTime < now;

                        // Vytvo≈ô√≠me kartu rezervace
                        const card = createReservationCard(reservation, isPast);

                        // Vlo≈æ√≠me do spr√°vn√© z√°lo≈æky
                        if (isPast) {
                            pastTab.querySelector('.reservation-list').appendChild(card);
                            pastCount++;
                        } else {
                            upcomingTab.querySelector('.reservation-list').appendChild(card);
                            upcomingCount++;
                        }
                    } catch (e) {
                        console.error("Chyba p≈ôi zpracov√°n√≠ rezervace:", e);
                    }
                });

                console.log(`Aktu√°ln√≠: ${upcomingCount}, Historie: ${pastCount}`);

                // Zkontrolujeme pr√°zdn√© stavy pro obƒõ z√°lo≈æky
                if (upcomingCount === 0) {
                    showEmptyState(upcomingTab);
                }

                if (pastCount === 0) {
                    showEmptyState(pastTab);
                }
            }

            // Zobrazen√≠ pr√°zdn√©ho stavu
            function showEmptyState(tab) {
                const emptyState = document.createElement('div');
                emptyState.className = 'empty-state';
                emptyState.innerHTML = `
            <div class="empty-icon">üóëÔ∏è</div>
            <h3>≈Ω√°dn√© rezervace</h3>
            <p>Zat√≠m nem√°te ≈æ√°dn√© rezervace v t√©to kategorii.</p>
            <a href="index.php" class="browse-btn">Prohl√©dnout program</a>
        `;

                const reservationList = tab.querySelector('.reservation-list');
                reservationList.innerHTML = '';
                reservationList.appendChild(emptyState);
            }

            // Kontrola pr√°zdn√©ho stavu
            function checkEmptyState(tab) {
                const cards = tab.querySelectorAll('.reservation-card');
                if (cards.length === 0) {
                    showEmptyState(tab);
                }
            }

            // Vytvo≈ôen√≠ karty rezervace
            // Vytvo≈ôen√≠ karty rezervace
            function createReservationCard(reservation, isPast) {
                const card = document.createElement('div');
                card.className = `reservation-card${isPast ? ' past' : ''}`;
                card.id = `reservation-${reservation.id_reservation}`;

                const screeningDate = new Date(reservation.screening_date);
                const formattedDate = screeningDate.toLocaleDateString('cs-CZ', {
                    weekday: 'long',
                    day: 'numeric',
                    month: 'numeric',
                    year: 'numeric'
                });

                // Funkce pro z√≠sk√°n√≠ n√°zvu m√≠sta podle ƒç√≠sla sedadla
                function getSeatLabel(seatNumber) {
                    const seatNum = parseInt(seatNumber);
                    switch (seatNum) {
                        case 1:
                            return "bobig | 1";
                        case 2:
                            return "≈æidle | 2";
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                        case 7:
                        case 8:
                            return `gauƒç | ${seatNum}`;
                        case 9:
                            return "k≈ôeslo | 9";
                        default:
                            return `m√≠sto | ${seatNum}`;
                    }
                }

                card.innerHTML = `
                    <div class="reservation-header">
                        <div class="movie-thumbnail-container">
                            ${reservation.image ? 
                                `<img src="data:image/jpeg;base64,${reservation.image}" alt="${reservation.movie_title || reservation.title}" class="movie-thumbnail">` :
                                `<img src="data:image/svg+xml;charset=utf-8,${encodeURIComponent('<svg xmlns="http://www.w3.org/2000/svg" width="80" height="120"><rect width="100%" height="100%" fill="#666"/></svg>')}" alt="Loading..." class="movie-thumbnail" data-movie-id="${reservation.id_screening}">`
                            }
                        </div>
                        <div class="reservation-info">
                            <h3 class="movie-title">${reservation.movie_title || reservation.title}</h3>
                            <div class="movie-details">
                                <span class="movie-genre">${reservation.genre}</span>
                                <span class="movie-duration">${reservation.duration} min</span>
                            </div>
                            <div class="reservation-date">
                                <span class="date-icon">üìÖ</span>
                                <span>${formattedDate}</span>
                                <span class="time-icon">üïí</span>
                                <span>${formatTime(reservation.screening_time)}</span>
                            </div>
                        </div>
                    </div>
                    <div class="reservation-seats">
                        <h4>Rezervovan√© m√≠sto</h4>
                        <div class="seats-grid">
                            <div class="seat">
                                <span class="seat-number">${getSeatLabel(reservation.seat_number)}</span>
                            </div>
                        </div>
                    </div>
                    <div class="reservation-actions">
                        <a href="reserve.php?id=${reservation.id_screening}" class="view-btn">Zobrazit rezervaci</a>
                        ${!isPast ? `<button class="cancel-btn" data-id="${reservation.id_reservation}">Zru≈°it rezervaci</button>` : ''}
                    </div>
                `;

                // P≈ôid√°n√≠ event listeneru pro zru≈°en√≠ rezervace
                const cancelBtn = card.querySelector('.cancel-btn');
                if (cancelBtn) {
                    cancelBtn.addEventListener('click', function() {
                        showCancelConfirmation(reservation.id_reservation, reservation.movie_title || reservation.title); 
                    });
                }

                // NOV√â: Lazy load obr√°zk≈Ø i v my-reservations
                if (reservation.has_image && !reservation.image) {
                    const imgElement = card.querySelector('.movie-thumbnail');
                    if (imgElement) loadImageLazyMyReservations(reservation.id_screening, imgElement);
                }

                return card;
            }

    // Zobrazen√≠ potvrzen√≠ zru≈°en√≠
    function showCancelConfirmation(reservationId, movieTitle) {
        const cancelModal = document.getElementById('cancel-modal');
        document.getElementById('cancel-movie-name').textContent = movieTitle || 'tento film';
        
        const confirmBtn = cancelModal.querySelector('.confirm-cancel');
        confirmBtn.onclick = () => cancelReservation(reservationId);

        cancelModal.classList.add('active');
        document.body.style.overflow = 'hidden';
    }

    // Zru≈°en√≠ rezervace
    async function cancelReservation(reservationId) {
        try {
            const formData = new FormData();
            formData.append('action', 'cancel');
            formData.append('reservation_id', reservationId);

            const response = await fetch('reservation_handlers.php', {
                method: 'POST',
                body: formData
            });

            const result = await response.json();

            if (result.status === 'success') {
                // Odstranƒõn√≠ karty rezervace
                const card = document.getElementById(`reservation-${reservationId}`);
                if (card) {
                    const parentTab = card.closest('.tab-content');
                    card.remove();
                    
                    // Kontrola pr√°zdn√©ho stavu
                    checkEmptyState(parentTab);
                }
                
                // Zav≈ôen√≠ mod√°lu
                closeModals();
                
                showToast('Rezervace byla √∫spƒõ≈°nƒõ zru≈°ena.', 'success');
            } else {
                throw new Error(result.message || 'Nepoda≈ôilo se zru≈°it rezervaci.');
            }
        } catch (error) {
            console.error('Chyba p≈ôi ru≈°en√≠ rezervace:', error);
            showToast(error.message || 'Do≈°lo k chybƒõ p≈ôi ru≈°en√≠ rezervace.', 'error');
            closeModals();
        }
    }

    // Helper funkce
    function formatTime(timeStr) {
        try {
            const times = JSON.parse(timeStr);
            if (Array.isArray(times) && times.length > 0) {
                return times[0].substring(0, 5);
            }
            return timeStr.substring(0, 5);
        } catch {
            return timeStr.substring(0, 5);
        }
    }

    // Zobrazen√≠ toast notifikace
    function showToast(message, type = 'success', duration = 3000) {
        if (window.showToast) {
            window.showToast(message, type, duration);
        } else {
            alert(message);
        }
    }

    // Zav√≠r√°n√≠ mod√°l≈Ø
    const closeBtns = document.querySelectorAll('.close-btn');
    const secondaryBtns = document.querySelectorAll('.secondary-btn');

    closeBtns.forEach(btn => {
        btn.addEventListener('click', closeModals);
    });

    secondaryBtns.forEach(btn => {
        btn.addEventListener('click', closeModals);
    });

    function closeModals() {
        const cancelModal = document.getElementById('cancel-modal');
        if (cancelModal) {
            cancelModal.classList.remove('active');
            document.body.style.overflow = '';
        }
    }

    // Zav≈ôen√≠ mod√°l≈Ø p≈ôi kliknut√≠ mimo
    window.addEventListener('click', function(e) {
        const cancelModal = document.getElementById('cancel-modal');
        if (e.target === cancelModal) {
            closeModals();
        }
    });

    // NOV√Å FUNKCE: Lazy load obr√°zk≈Ø pro my-reservations
    async function loadImageLazyMyReservations(movieId, imgElement) {
        try {
            const response = await fetch(`api_endpoint.php?action=image&id=${movieId}`);
            const result = await response.json();
            
            if (result.status === 'success' && result.image) {
                imgElement.src = `data:image/jpeg;base64,${result.image}`;
            }
        } catch (error) {
            console.error('Chyba p≈ôi naƒç√≠t√°n√≠ obr√°zku v my-reservations:', error);
        }
    }
});